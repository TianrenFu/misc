/* Generated by Cython 0.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__Pieces
#define __PYX_HAVE_API__Pieces
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include "string.h"
#include <string>
#include <algorithm>
#include "stdlib.h"
#include "stddef.h"
#include "time.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "Pieces.pyx",
  "header.pxd",
  "cyrand.pxd",
  "stringsource",
  "PieceReader.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_11PieceReader_Piece;
struct __pyx_obj_11PieceReader_PieceReader;
struct __pyx_opt_args_11PieceReader_5Piece_new_matrix;

/* "PieceReader.pxd":13
 *     cpdef public list action
 * 
 *     cpdef new_matrix(cls, size=?)             # <<<<<<<<<<<<<<
 * 
 *     cpdef duplicate_matrix(cls, model)
 */
struct __pyx_opt_args_11PieceReader_5Piece_new_matrix {
  int __pyx_n;
  PyObject *size;
};
struct __pyx_t_6header_ActionAttribute;
typedef struct __pyx_t_6header_ActionAttribute __pyx_t_6header_ActionAttribute;
struct __pyx_t_6header_Action;
typedef struct __pyx_t_6header_Action __pyx_t_6header_Action;
struct __pyx_t_6header_Move;
typedef struct __pyx_t_6header_Move __pyx_t_6header_Move;
struct __pyx_t_6header_Piece;
typedef struct __pyx_t_6header_Piece __pyx_t_6header_Piece;
struct __pyx_t_6header_Board;
typedef struct __pyx_t_6header_Board __pyx_t_6header_Board;

/* "header.pxd":15
 * from Pieces cimport *
 * 
 * cdef enum:  # const variables             # <<<<<<<<<<<<<<
 *     BOARD_SIZE = 8
 *     ACTION_MAP_SIZE = 15
 */
enum  {
  __pyx_e_6header_BOARD_SIZE = 8,
  __pyx_e_6header_ACTION_MAP_SIZE = 15,
  __pyx_e_6header_CENTRAL_POSITION = 7,
  __pyx_e_6header_MAX_VALUE = 0x8000,
  __pyx_e_6header_MAX_MOVE_NUMBER = 0x190
};

/* "header.pxd":22
 *     MAX_MOVE_NUMBER = 400
 * 
 * ctypedef vector[vector[int]] int2d             # <<<<<<<<<<<<<<
 * 
 * ctypedef void (*ActionFunction)(Board&, int, int, int, int)
 */
typedef std::vector<std::vector<int> >  __pyx_t_6header_int2d;

/* "header.pxd":24
 * ctypedef vector[vector[int]] int2d
 * 
 * ctypedef void (*ActionFunction)(Board&, int, int, int, int)             # <<<<<<<<<<<<<<
 * ctypedef int (*TargetCheckFunction)(Board&, int, int, int, int)
 * 
 */
typedef void (*__pyx_t_6header_ActionFunction)(__pyx_t_6header_Board &, int, int, int, int);

/* "header.pxd":25
 * 
 * ctypedef void (*ActionFunction)(Board&, int, int, int, int)
 * ctypedef int (*TargetCheckFunction)(Board&, int, int, int, int)             # <<<<<<<<<<<<<<
 * 
 * ctypedef struct ActionAttribute:
 */
typedef int (*__pyx_t_6header_TargetCheckFunction)(__pyx_t_6header_Board &, int, int, int, int);

/* "header.pxd":27
 * ctypedef int (*TargetCheckFunction)(Board&, int, int, int, int)
 * 
 * ctypedef struct ActionAttribute:             # <<<<<<<<<<<<<<
 *     int to_empty
 *     int to_enemy
 */
struct __pyx_t_6header_ActionAttribute {
  int to_empty;
  int to_enemy;
  int to_friend;
  int blockable;
  int additional_limit;
  __pyx_t_6header_TargetCheckFunction limit;
};

/* "header.pxd":35
 *     TargetCheckFunction limit
 * 
 * ctypedef struct Action:             # <<<<<<<<<<<<<<
 *     int handle
 *     ActionFunction cast
 */
struct __pyx_t_6header_Action {
  int handle;
  __pyx_t_6header_ActionFunction cast;
  __pyx_t_6header_ActionAttribute attr;
  std::string description;
};

/* "header.pxd":41
 *     string description
 * 
 * ctypedef struct Move:             # <<<<<<<<<<<<<<
 *     int xfrom
 *     int yfrom
 */
struct __pyx_t_6header_Move {
  int xfrom;
  int yfrom;
  int xto;
  int yto;
  int actno;
};

/* "header.pxd":48
 *     int actno
 * 
 * ctypedef struct Piece:             # <<<<<<<<<<<<<<
 *     string name
 *     int2d map
 */
struct __pyx_t_6header_Piece {
  std::string name;
  __pyx_t_6header_int2d map;
  int cost;
  int promotion;
  int minion;
  int champion;
  int not_blocking;
  int augmented;
  int augmented_actno;
  __pyx_t_6header_TargetCheckFunction augmented_check;
  int has_on_death;
  __pyx_t_6header_ActionFunction on_death;
  int has_on_kill;
  __pyx_t_6header_ActionFunction on_kill;
};

/* "header.pxd":65
 *     ActionFunction on_kill
 * 
 * ctypedef struct Board:             # <<<<<<<<<<<<<<
 *     int2d pieces
 *     int2d ownerships  # 1/2 for each player, 0 for empty
 */
struct __pyx_t_6header_Board {
  __pyx_t_6header_int2d pieces;
  __pyx_t_6header_int2d ownerships;
  __pyx_t_6header_int2d costs;
  __pyx_t_6header_int2d frozen;
  __pyx_t_6header_int2d poison;
  __pyx_t_6header_int2d thunder;
  int current;
  int moral[3];
  int king[3];
};
struct __pyx_opt_args_6Pieces_build_piece_list;

/* "Pieces.pyx":44
 * 
 * #region cdef void build_piece_list(vector[Piece]& piece_vec, str folder)
 * cdef void build_piece_list(vector[Piece]& piece_vec, str folder='PieceLib'):             # <<<<<<<<<<<<<<
 *     cdef PieceReader reader = PieceReader(folder)
 *     cdef int i, j
 */
struct __pyx_opt_args_6Pieces_build_piece_list {
  int __pyx_n;
  PyObject *folder;
};

/* "PieceReader.pxd":8
 * 
 * 
 * cdef class Piece:             # <<<<<<<<<<<<<<
 *     cpdef public str name, class_name, type, package, rarity, passive, promotion
 *     cpdef public int cost, tier, not_blocking
 */
struct __pyx_obj_11PieceReader_Piece {
  PyObject_HEAD
  struct __pyx_vtabstruct_11PieceReader_Piece *__pyx_vtab;
  PyObject *name;
  PyObject *class_name;
  PyObject *type;
  PyObject *package;
  PyObject *rarity;
  PyObject *passive;
  PyObject *promotion;
  int cost;
  int tier;
  int not_blocking;
  PyObject *action;
};


/* "PieceReader.pxd":18
 * 
 * 
 * cdef class PieceReader:             # <<<<<<<<<<<<<<
 *     cpdef public list pieces
 *     cpdef public object files
 */
struct __pyx_obj_11PieceReader_PieceReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_11PieceReader_PieceReader *__pyx_vtab;
  PyObject *pieces;
  PyObject *files;
};



/* "PieceReader.pxd":8
 * 
 * 
 * cdef class Piece:             # <<<<<<<<<<<<<<
 *     cpdef public str name, class_name, type, package, rarity, passive, promotion
 *     cpdef public int cost, tier, not_blocking
 */

struct __pyx_vtabstruct_11PieceReader_Piece {
  PyObject *(*new_matrix)(struct __pyx_obj_11PieceReader_Piece *, int __pyx_skip_dispatch, struct __pyx_opt_args_11PieceReader_5Piece_new_matrix *__pyx_optional_args);
  PyObject *(*duplicate_matrix)(struct __pyx_obj_11PieceReader_Piece *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_11PieceReader_Piece *__pyx_vtabptr_11PieceReader_Piece;


/* "PieceReader.pxd":18
 * 
 * 
 * cdef class PieceReader:             # <<<<<<<<<<<<<<
 *     cpdef public list pieces
 *     cpdef public object files
 */

struct __pyx_vtabstruct_11PieceReader_PieceReader {
  PyObject *(*get_file_list)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*read_file)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*link_promotions)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*read_actions)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*resolve_lable)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*name_plus_tier)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*is_piece_calculatable)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_11PieceReader_PieceReader *__pyx_vtabptr_11PieceReader_PieceReader;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* None.proto */
static CYTHON_INLINE int __Pyx_mod_int(int, int);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyObjectSetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* VoidPtrExport.proto */
static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.algorithm' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stddef' */

/* Module declarations from 'libc.time' */

/* Module declarations from 'cyrand' */
static PyObject *(*__pyx_f_6cyrand_srand)(int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE float __pyx_f_6cyrand_random(void); /*proto*/
static CYTHON_INLINE int __pyx_f_6cyrand_randi(int); /*proto*/
static CYTHON_INLINE float __pyx_f_6cyrand_randf(float); /*proto*/

/* Module declarations from 'PieceReader' */
static PyTypeObject *__pyx_ptype_11PieceReader_Piece = 0;
static PyTypeObject *__pyx_ptype_11PieceReader_PieceReader = 0;

/* Module declarations from 'Actions' */
static std::vector<__pyx_t_6header_Action>  *__pyx_vp_7Actions_actions = 0;
#define __pyx_v_7Actions_actions (*__pyx_vp_7Actions_actions)
static void (*__pyx_f_7Actions_move_to)(__pyx_t_6header_Board &, int, int, int, int); /*proto*/

/* Module declarations from 'header' */
static CYTHON_INLINE int __pyx_f_6header_enemy_player(int); /*proto*/
static CYTHON_INLINE int __pyx_f_6header_on_the_board(int, int); /*proto*/
static CYTHON_INLINE void __pyx_f_6header_deepcopy_int2d(__pyx_t_6header_int2d &, __pyx_t_6header_int2d &); /*proto*/

/* Module declarations from 'Pieces' */
static std::vector<__pyx_t_6header_Piece>  __pyx_v_6Pieces_piece_list;
static std::map<std::string,int>  __pyx_v_6Pieces_piece_index;
static int __pyx_v_6Pieces_index_of_King;
static __pyx_t_6header_Piece __pyx_f_6Pieces_import_piece(PyObject *); /*proto*/
static void __pyx_f_6Pieces_build_piece_list(std::vector<__pyx_t_6header_Piece>  &, struct __pyx_opt_args_6Pieces_build_piece_list *__pyx_optional_args); /*proto*/
static void __pyx_f_6Pieces_build_piece_index(std::map<std::string,int>  &, std::vector<__pyx_t_6header_Piece>  &); /*proto*/
static void __pyx_f_6Pieces_null_effect(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_King_on_death(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_Aquarius_on_death(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_Comet_on_death(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_to_lose_2_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_to_lose_3_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_to_lose_4_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_to_lose_5_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_to_lose_8_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_to_lose_12_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_to_lose_16_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_from_lose_4_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_steal_2_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_steal_3_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_steal_4_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_steal_5_moral(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static int __pyx_f_6Pieces_null_augmented(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static int __pyx_f_6Pieces_RoyalGuard_augmented(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static int __pyx_f_6Pieces_Comet_augmented(__pyx_t_6header_Board &, int, int, int, int); /*proto*/
static void __pyx_f_6Pieces_link_effects(std::vector<__pyx_t_6header_Piece>  &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static std::vector<std::vector<int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "Pieces"
int __pyx_module_is_main_Pieces = 0;

/* Implementation of 'Pieces' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_[] = "";
static const char __pyx_k_d_s[] = "[#%d] %s";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_King[] = "King";
static const char __pyx_k_cost[] = "cost";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_Comet[] = "Comet";
static const char __pyx_k_Greed[] = "Greed";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_Minion[] = "Minion";
static const char __pyx_k_Reaver[] = "Reaver";
static const char __pyx_k_action[] = "action";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_Greed_2[] = "Greed+";
static const char __pyx_k_Greed_3[] = "Greed++";
static const char __pyx_k_Greed_4[] = "Greed+++";
static const char __pyx_k_Militia[] = "Militia";
static const char __pyx_k_Vampire[] = "Vampire";
static const char __pyx_k_Aquarius[] = "Aquarius";
static const char __pyx_k_Champion[] = "Champion";
static const char __pyx_k_PieceLib[] = "PieceLib";
static const char __pyx_k_pyx_capi[] = "__pyx_capi__";
static const char __pyx_k_Militia_2[] = "Militia+";
static const char __pyx_k_Militia_3[] = "Militia++";
static const char __pyx_k_Militia_4[] = "Militia+++";
static const char __pyx_k_Vampire_2[] = "Vampire+";
static const char __pyx_k_Vampire_3[] = "Vampire++";
static const char __pyx_k_Vampire_4[] = "Vampire+++";
static const char __pyx_k_promotion[] = "promotion";
static const char __pyx_k_RoyalGuard[] = "RoyalGuard";
static const char __pyx_k_piece_list[] = "piece_list";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_piece_index[] = "piece_index";
static const char __pyx_k_not_blocking[] = "not_blocking";
static const char __pyx_k_index_of_King[] = "index_of_King";
static const char __pyx_k_promotes_to_d_s[] = " (promotes to [#%d] %s)";
static const char __pyx_k_Tree_Common_4_Status_Immune[] = "Tree,,,Common;4:(Status-Immune),";
static const char __pyx_k_Sapling_Common_1_Status_Immune[] = "Sapling,,,Common;1:(Status-Immune),";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_Aquarius;
static PyObject *__pyx_n_s_Champion;
static PyObject *__pyx_n_s_Comet;
static PyObject *__pyx_n_s_Greed;
static PyObject *__pyx_kp_s_Greed_2;
static PyObject *__pyx_kp_s_Greed_3;
static PyObject *__pyx_kp_s_Greed_4;
static PyObject *__pyx_n_b_King;
static PyObject *__pyx_n_s_King;
static PyObject *__pyx_n_s_Militia;
static PyObject *__pyx_kp_s_Militia_2;
static PyObject *__pyx_kp_s_Militia_3;
static PyObject *__pyx_kp_s_Militia_4;
static PyObject *__pyx_n_s_Minion;
static PyObject *__pyx_n_s_PieceLib;
static PyObject *__pyx_n_s_Reaver;
static PyObject *__pyx_n_s_RoyalGuard;
static PyObject *__pyx_kp_s_Sapling_Common_1_Status_Immune;
static PyObject *__pyx_kp_s_Tree_Common_4_Status_Immune;
static PyObject *__pyx_n_s_Vampire;
static PyObject *__pyx_kp_s_Vampire_2;
static PyObject *__pyx_kp_s_Vampire_3;
static PyObject *__pyx_kp_s_Vampire_4;
static PyObject *__pyx_n_s_action;
static PyObject *__pyx_n_s_cost;
static PyObject *__pyx_kp_s_d_s;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_index_of_King;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_not_blocking;
static PyObject *__pyx_n_s_piece_index;
static PyObject *__pyx_n_s_piece_list;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_kp_s_promotes_to_d_s;
static PyObject *__pyx_n_s_promotion;
static PyObject *__pyx_n_s_pyx_capi;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_type;

/* "Pieces.pyx":27
 * #     return num
 * 
 * cdef Piece import_piece(object py_piece):             # <<<<<<<<<<<<<<
 *     cdef Piece piece
 *     piece.name = py_piece.name.encode()
 */

static __pyx_t_6header_Piece __pyx_f_6Pieces_import_piece(PyObject *__pyx_v_py_piece) {
  __pyx_t_6header_Piece __pyx_v_piece;
  __pyx_t_6header_Piece __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __pyx_t_6header_int2d __pyx_t_7;
  __Pyx_RefNannySetupContext("import_piece", 0);

  /* "Pieces.pyx":29
 * cdef Piece import_piece(object py_piece):
 *     cdef Piece piece
 *     piece.name = py_piece.name.encode()             # <<<<<<<<<<<<<<
 *     piece.cost = py_piece.cost
 *     piece.promotion = 0
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_piece, __pyx_n_s_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_piece.name = __pyx_t_4;

  /* "Pieces.pyx":30
 *     cdef Piece piece
 *     piece.name = py_piece.name.encode()
 *     piece.cost = py_piece.cost             # <<<<<<<<<<<<<<
 *     piece.promotion = 0
 *     piece.minion = 1 if py_piece.type == 'Minion' else 0
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_piece, __pyx_n_s_cost); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_piece.cost = __pyx_t_5;

  /* "Pieces.pyx":31
 *     piece.name = py_piece.name.encode()
 *     piece.cost = py_piece.cost
 *     piece.promotion = 0             # <<<<<<<<<<<<<<
 *     piece.minion = 1 if py_piece.type == 'Minion' else 0
 *     piece.champion = 1 if py_piece.type == 'Champion' else 0
 */
  __pyx_v_piece.promotion = 0;

  /* "Pieces.pyx":32
 *     piece.cost = py_piece.cost
 *     piece.promotion = 0
 *     piece.minion = 1 if py_piece.type == 'Minion' else 0             # <<<<<<<<<<<<<<
 *     piece.champion = 1 if py_piece.type == 'Champion' else 0
 *     piece.not_blocking = py_piece.not_blocking
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_piece, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_Minion, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {
    __pyx_t_5 = 1;
  } else {
    __pyx_t_5 = 0;
  }
  __pyx_v_piece.minion = __pyx_t_5;

  /* "Pieces.pyx":33
 *     piece.promotion = 0
 *     piece.minion = 1 if py_piece.type == 'Minion' else 0
 *     piece.champion = 1 if py_piece.type == 'Champion' else 0             # <<<<<<<<<<<<<<
 *     piece.not_blocking = py_piece.not_blocking
 *     piece.map = py_piece.action  # auto conversion from [[int,],] to int2d
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_piece, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_Champion, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {
    __pyx_t_5 = 1;
  } else {
    __pyx_t_5 = 0;
  }
  __pyx_v_piece.champion = __pyx_t_5;

  /* "Pieces.pyx":34
 *     piece.minion = 1 if py_piece.type == 'Minion' else 0
 *     piece.champion = 1 if py_piece.type == 'Champion' else 0
 *     piece.not_blocking = py_piece.not_blocking             # <<<<<<<<<<<<<<
 *     piece.map = py_piece.action  # auto conversion from [[int,],] to int2d
 *     piece.augmented = 0; piece.augmented_actno = 0; piece.augmented_check=null_augmented
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_piece, __pyx_n_s_not_blocking); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_piece.not_blocking = __pyx_t_5;

  /* "Pieces.pyx":35
 *     piece.champion = 1 if py_piece.type == 'Champion' else 0
 *     piece.not_blocking = py_piece.not_blocking
 *     piece.map = py_piece.action  # auto conversion from [[int,],] to int2d             # <<<<<<<<<<<<<<
 *     piece.augmented = 0; piece.augmented_actno = 0; piece.augmented_check=null_augmented
 *     piece.has_on_death = 0; piece.on_death = null_effect
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_py_piece, __pyx_n_s_action); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_piece.map = __pyx_t_7;

  /* "Pieces.pyx":36
 *     piece.not_blocking = py_piece.not_blocking
 *     piece.map = py_piece.action  # auto conversion from [[int,],] to int2d
 *     piece.augmented = 0; piece.augmented_actno = 0; piece.augmented_check=null_augmented             # <<<<<<<<<<<<<<
 *     piece.has_on_death = 0; piece.on_death = null_effect
 *     piece.has_on_kill = 0; piece.on_kill = null_effect
 */
  __pyx_v_piece.augmented = 0;
  __pyx_v_piece.augmented_actno = 0;
  __pyx_v_piece.augmented_check = __pyx_f_6Pieces_null_augmented;

  /* "Pieces.pyx":37
 *     piece.map = py_piece.action  # auto conversion from [[int,],] to int2d
 *     piece.augmented = 0; piece.augmented_actno = 0; piece.augmented_check=null_augmented
 *     piece.has_on_death = 0; piece.on_death = null_effect             # <<<<<<<<<<<<<<
 *     piece.has_on_kill = 0; piece.on_kill = null_effect
 *     return piece
 */
  __pyx_v_piece.has_on_death = 0;
  __pyx_v_piece.on_death = __pyx_f_6Pieces_null_effect;

  /* "Pieces.pyx":38
 *     piece.augmented = 0; piece.augmented_actno = 0; piece.augmented_check=null_augmented
 *     piece.has_on_death = 0; piece.on_death = null_effect
 *     piece.has_on_kill = 0; piece.on_kill = null_effect             # <<<<<<<<<<<<<<
 *     return piece
 * 
 */
  __pyx_v_piece.has_on_kill = 0;
  __pyx_v_piece.on_kill = __pyx_f_6Pieces_null_effect;

  /* "Pieces.pyx":39
 *     piece.has_on_death = 0; piece.on_death = null_effect
 *     piece.has_on_kill = 0; piece.on_kill = null_effect
 *     return piece             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_piece;
  goto __pyx_L0;

  /* "Pieces.pyx":27
 * #     return num
 * 
 * cdef Piece import_piece(object py_piece):             # <<<<<<<<<<<<<<
 *     cdef Piece piece
 *     piece.name = py_piece.name.encode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("Pieces.import_piece", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Pieces.pyx":44
 * 
 * #region cdef void build_piece_list(vector[Piece]& piece_vec, str folder)
 * cdef void build_piece_list(vector[Piece]& piece_vec, str folder='PieceLib'):             # <<<<<<<<<<<<<<
 *     cdef PieceReader reader = PieceReader(folder)
 *     cdef int i, j
 */

static void __pyx_f_6Pieces_build_piece_list(std::vector<__pyx_t_6header_Piece>  &__pyx_v_piece_vec, struct __pyx_opt_args_6Pieces_build_piece_list *__pyx_optional_args) {
  PyObject *__pyx_v_folder = ((PyObject*)__pyx_n_s_PieceLib);
  struct __pyx_obj_11PieceReader_PieceReader *__pyx_v_reader = 0;
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_v_pr = 0;
  PyObject *__pyx_v_s = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  size_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("build_piece_list", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_folder = __pyx_optional_args->folder;
    }
  }

  /* "Pieces.pyx":45
 * #region cdef void build_piece_list(vector[Piece]& piece_vec, str folder)
 * cdef void build_piece_list(vector[Piece]& piece_vec, str folder='PieceLib'):
 *     cdef PieceReader reader = PieceReader(folder)             # <<<<<<<<<<<<<<
 *     cdef int i, j
 *     cdef str pr, s
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_folder);
  __Pyx_GIVEREF(__pyx_v_folder);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_folder);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11PieceReader_PieceReader), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_reader = ((struct __pyx_obj_11PieceReader_PieceReader *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "Pieces.pyx":48
 *     cdef int i, j
 *     cdef str pr, s
 *     piece_vec.clear()             # <<<<<<<<<<<<<<
 *     piece_vec.push_back(import_piece(pyPiece()))
 *     for i in range(len(reader.pieces)):
 */
  __pyx_v_piece_vec.clear();

  /* "Pieces.pyx":49
 *     cdef str pr, s
 *     piece_vec.clear()
 *     piece_vec.push_back(import_piece(pyPiece()))             # <<<<<<<<<<<<<<
 *     for i in range(len(reader.pieces)):
 *         piece_vec.push_back(import_piece(reader.pieces[i]))
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_11PieceReader_Piece), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_v_piece_vec.push_back(__pyx_f_6Pieces_import_piece(__pyx_t_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 49, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "Pieces.pyx":50
 *     piece_vec.clear()
 *     piece_vec.push_back(import_piece(pyPiece()))
 *     for i in range(len(reader.pieces)):             # <<<<<<<<<<<<<<
 *         piece_vec.push_back(import_piece(reader.pieces[i]))
 *         if reader.pieces[i].promotion != '':
 */
  __pyx_t_2 = __pyx_v_reader->pieces;
  __Pyx_INCREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 50, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "Pieces.pyx":51
 *     piece_vec.push_back(import_piece(pyPiece()))
 *     for i in range(len(reader.pieces)):
 *         piece_vec.push_back(import_piece(reader.pieces[i]))             # <<<<<<<<<<<<<<
 *         if reader.pieces[i].promotion != '':
 *             pr = reader.pieces[i].promotion
 */
    if (unlikely(__pyx_v_reader->pieces == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 51, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_reader->pieces, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    try {
      __pyx_v_piece_vec.push_back(__pyx_f_6Pieces_import_piece(__pyx_t_2));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 51, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "Pieces.pyx":52
 *     for i in range(len(reader.pieces)):
 *         piece_vec.push_back(import_piece(reader.pieces[i]))
 *         if reader.pieces[i].promotion != '':             # <<<<<<<<<<<<<<
 *             pr = reader.pieces[i].promotion
 *             for j in range(len(reader.pieces)):
 */
    if (unlikely(__pyx_v_reader->pieces == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 52, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_reader->pieces, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_promotion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s_, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "Pieces.pyx":53
 *         piece_vec.push_back(import_piece(reader.pieces[i]))
 *         if reader.pieces[i].promotion != '':
 *             pr = reader.pieces[i].promotion             # <<<<<<<<<<<<<<
 *             for j in range(len(reader.pieces)):
 *                 if reader.pieces[j].name == pr:
 */
      if (unlikely(__pyx_v_reader->pieces == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 53, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_reader->pieces, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_promotion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 53, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_pr, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "Pieces.pyx":54
 *         if reader.pieces[i].promotion != '':
 *             pr = reader.pieces[i].promotion
 *             for j in range(len(reader.pieces)):             # <<<<<<<<<<<<<<
 *                 if reader.pieces[j].name == pr:
 *                     piece_vec[i + 1].promotion = j + 1
 */
      __pyx_t_2 = __pyx_v_reader->pieces;
      __Pyx_INCREF(__pyx_t_2);
      if (unlikely(__pyx_t_2 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 54, __pyx_L1_error)
      }
      __pyx_t_6 = PyList_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 54, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_j = __pyx_t_7;

        /* "Pieces.pyx":55
 *             pr = reader.pieces[i].promotion
 *             for j in range(len(reader.pieces)):
 *                 if reader.pieces[j].name == pr:             # <<<<<<<<<<<<<<
 *                     piece_vec[i + 1].promotion = j + 1
 *                     break
 */
        if (unlikely(__pyx_v_reader->pieces == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 55, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_reader->pieces, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_v_pr, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 55, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_5) {

          /* "Pieces.pyx":56
 *             for j in range(len(reader.pieces)):
 *                 if reader.pieces[j].name == pr:
 *                     piece_vec[i + 1].promotion = j + 1             # <<<<<<<<<<<<<<
 *                     break
 *     for i in range(1, piece_vec.size()):
 */
          (__pyx_v_piece_vec[(__pyx_v_i + 1)]).promotion = (__pyx_v_j + 1);

          /* "Pieces.pyx":57
 *                 if reader.pieces[j].name == pr:
 *                     piece_vec[i + 1].promotion = j + 1
 *                     break             # <<<<<<<<<<<<<<
 *     for i in range(1, piece_vec.size()):
 *         s = '[#%d] %s' % (i, piece_vec[i].name.decode())
 */
          goto __pyx_L7_break;

          /* "Pieces.pyx":55
 *             pr = reader.pieces[i].promotion
 *             for j in range(len(reader.pieces)):
 *                 if reader.pieces[j].name == pr:             # <<<<<<<<<<<<<<
 *                     piece_vec[i + 1].promotion = j + 1
 *                     break
 */
        }
      }
      __pyx_L7_break:;

      /* "Pieces.pyx":52
 *     for i in range(len(reader.pieces)):
 *         piece_vec.push_back(import_piece(reader.pieces[i]))
 *         if reader.pieces[i].promotion != '':             # <<<<<<<<<<<<<<
 *             pr = reader.pieces[i].promotion
 *             for j in range(len(reader.pieces)):
 */
    }
  }

  /* "Pieces.pyx":58
 *                     piece_vec[i + 1].promotion = j + 1
 *                     break
 *     for i in range(1, piece_vec.size()):             # <<<<<<<<<<<<<<
 *         s = '[#%d] %s' % (i, piece_vec[i].name.decode())
 *         if 0 < piece_vec[i].promotion < piece_vec.size():
 */
  __pyx_t_8 = __pyx_v_piece_vec.size();
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_8; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "Pieces.pyx":59
 *                     break
 *     for i in range(1, piece_vec.size()):
 *         s = '[#%d] %s' % (i, piece_vec[i].name.decode())             # <<<<<<<<<<<<<<
 *         if 0 < piece_vec[i].promotion < piece_vec.size():
 *             s += ' (promotes to [#%d] %s)' % (piece_vec[i].promotion, piece_vec[piece_vec[i].promotion].name.decode())
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_decode_cpp_string((__pyx_v_piece_vec[__pyx_v_i]).name, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_d_s, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "Pieces.pyx":60
 *     for i in range(1, piece_vec.size()):
 *         s = '[#%d] %s' % (i, piece_vec[i].name.decode())
 *         if 0 < piece_vec[i].promotion < piece_vec.size():             # <<<<<<<<<<<<<<
 *             s += ' (promotes to [#%d] %s)' % (piece_vec[i].promotion, piece_vec[piece_vec[i].promotion].name.decode())
 *         print(s)
 */
    __pyx_t_7 = (__pyx_v_piece_vec[__pyx_v_i]).promotion;
    __pyx_t_5 = (0 < __pyx_t_7);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_t_7 < __pyx_v_piece_vec.size());
    }
    __pyx_t_10 = (__pyx_t_5 != 0);
    if (__pyx_t_10) {

      /* "Pieces.pyx":61
 *         s = '[#%d] %s' % (i, piece_vec[i].name.decode())
 *         if 0 < piece_vec[i].promotion < piece_vec.size():
 *             s += ' (promotes to [#%d] %s)' % (piece_vec[i].promotion, piece_vec[piece_vec[i].promotion].name.decode())             # <<<<<<<<<<<<<<
 *         print(s)
 * #endregion
 */
      __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_piece_vec[__pyx_v_i]).promotion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __Pyx_decode_cpp_string((__pyx_v_piece_vec[(__pyx_v_piece_vec[__pyx_v_i]).promotion]).name, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 61, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_9);
      __pyx_t_2 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_promotes_to_d_s, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 61, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 61, __pyx_L1_error)
      __Pyx_DECREF_SET(__pyx_v_s, ((PyObject*)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "Pieces.pyx":60
 *     for i in range(1, piece_vec.size()):
 *         s = '[#%d] %s' % (i, piece_vec[i].name.decode())
 *         if 0 < piece_vec[i].promotion < piece_vec.size():             # <<<<<<<<<<<<<<
 *             s += ' (promotes to [#%d] %s)' % (piece_vec[i].promotion, piece_vec[piece_vec[i].promotion].name.decode())
 *         print(s)
 */
    }

    /* "Pieces.pyx":62
 *         if 0 < piece_vec[i].promotion < piece_vec.size():
 *             s += ' (promotes to [#%d] %s)' % (piece_vec[i].promotion, piece_vec[piece_vec[i].promotion].name.decode())
 *         print(s)             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
    if (__Pyx_PrintOne(0, __pyx_v_s) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  }

  /* "Pieces.pyx":44
 * 
 * #region cdef void build_piece_list(vector[Piece]& piece_vec, str folder)
 * cdef void build_piece_list(vector[Piece]& piece_vec, str folder='PieceLib'):             # <<<<<<<<<<<<<<
 *     cdef PieceReader reader = PieceReader(folder)
 *     cdef int i, j
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("Pieces.build_piece_list", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_reader);
  __Pyx_XDECREF(__pyx_v_pr);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":66
 * 
 * 
 * cdef void build_piece_index(map[string, int]& index_map, vector[Piece]& piece_vec):             # <<<<<<<<<<<<<<
 *     cdef string name
 *     for i in range(piece_vec.size()):
 */

static void __pyx_f_6Pieces_build_piece_index(std::map<std::string,int>  &__pyx_v_index_map, std::vector<__pyx_t_6header_Piece>  &__pyx_v_piece_vec) {
  std::string __pyx_v_name;
  size_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("build_piece_index", 0);

  /* "Pieces.pyx":68
 * cdef void build_piece_index(map[string, int]& index_map, vector[Piece]& piece_vec):
 *     cdef string name
 *     for i in range(piece_vec.size()):             # <<<<<<<<<<<<<<
 *         name = piece_vec[i].name
 *         if name != b'':
 */
  __pyx_t_1 = __pyx_v_piece_vec.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "Pieces.pyx":69
 *     cdef string name
 *     for i in range(piece_vec.size()):
 *         name = piece_vec[i].name             # <<<<<<<<<<<<<<
 *         if name != b'':
 *             index_map[name] = i
 */
    __pyx_t_3 = (__pyx_v_piece_vec[__pyx_v_i]).name;
    __pyx_v_name = __pyx_t_3;

    /* "Pieces.pyx":70
 *     for i in range(piece_vec.size()):
 *         name = piece_vec[i].name
 *         if name != b'':             # <<<<<<<<<<<<<<
 *             index_map[name] = i
 * 
 */
    __pyx_t_4 = ((__pyx_v_name != ((char *)"")) != 0);
    if (__pyx_t_4) {

      /* "Pieces.pyx":71
 *         name = piece_vec[i].name
 *         if name != b'':
 *             index_map[name] = i             # <<<<<<<<<<<<<<
 * 
 * cdef void apped_special_pieces(vector[Piece]& piece_vec):
 */
      (__pyx_v_index_map[__pyx_v_name]) = __pyx_v_i;

      /* "Pieces.pyx":70
 *     for i in range(piece_vec.size()):
 *         name = piece_vec[i].name
 *         if name != b'':             # <<<<<<<<<<<<<<
 *             index_map[name] = i
 * 
 */
    }
  }

  /* "Pieces.pyx":66
 * 
 * 
 * cdef void build_piece_index(map[string, int]& index_map, vector[Piece]& piece_vec):             # <<<<<<<<<<<<<<
 *     cdef string name
 *     for i in range(piece_vec.size()):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":73
 *             index_map[name] = i
 * 
 * cdef void apped_special_pieces(vector[Piece]& piece_vec):             # <<<<<<<<<<<<<<
 *     cdef list special_pieces = [
 *         'Sapling,,,Common;1:(Status-Immune),',
 */

static void __pyx_f_6Pieces_apped_special_pieces(CYTHON_UNUSED std::vector<__pyx_t_6header_Piece>  &__pyx_v_piece_vec) {
  CYTHON_UNUSED PyObject *__pyx_v_special_pieces = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("apped_special_pieces", 0);

  /* "Pieces.pyx":74
 * 
 * cdef void apped_special_pieces(vector[Piece]& piece_vec):
 *     cdef list special_pieces = [             # <<<<<<<<<<<<<<
 *         'Sapling,,,Common;1:(Status-Immune),',
 *         'Tree,,,Common;4:(Status-Immune),',
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_Sapling_Common_1_Status_Immune);
  __Pyx_GIVEREF(__pyx_kp_s_Sapling_Common_1_Status_Immune);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_Sapling_Common_1_Status_Immune);
  __Pyx_INCREF(__pyx_kp_s_Tree_Common_4_Status_Immune);
  __Pyx_GIVEREF(__pyx_kp_s_Tree_Common_4_Status_Immune);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_s_Tree_Common_4_Status_Immune);
  __pyx_v_special_pieces = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "Pieces.pyx":73
 *             index_map[name] = i
 * 
 * cdef void apped_special_pieces(vector[Piece]& piece_vec):             # <<<<<<<<<<<<<<
 *     cdef list special_pieces = [
 *         'Sapling,,,Common;1:(Status-Immune),',
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("Pieces.apped_special_pieces", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_special_pieces);
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":82
 * #######################
 * #region EFFECTS
 * cdef void null_effect(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

static void __pyx_f_6Pieces_null_effect(CYTHON_UNUSED __pyx_t_6header_Board &__pyx_v_board, CYTHON_UNUSED int __pyx_v_xfrom, CYTHON_UNUSED int __pyx_v_yfrom, CYTHON_UNUSED int __pyx_v_xto, CYTHON_UNUSED int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("null_effect", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":85
 *     pass
 * 
 * cdef void King_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 25
 *     board.king[board.ownerships[xto][yto]] -= 1
 */

static void __pyx_f_6Pieces_King_on_death(__pyx_t_6header_Board &__pyx_v_board, CYTHON_UNUSED int __pyx_v_xfrom, CYTHON_UNUSED int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("King_on_death", 0);

  /* "Pieces.pyx":86
 * 
 * cdef void King_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xto][yto]] -= 25             # <<<<<<<<<<<<<<
 *     board.king[board.ownerships[xto][yto]] -= 1
 * 
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 25);

  /* "Pieces.pyx":87
 * cdef void King_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xto][yto]] -= 25
 *     board.king[board.ownerships[xto][yto]] -= 1             # <<<<<<<<<<<<<<
 * 
 * cdef void Aquarius_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):  # ofrom is enemy to Aquarius' owner
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.king[__pyx_t_1]) = ((__pyx_v_board.king[__pyx_t_1]) - 1);

  /* "Pieces.pyx":85
 *     pass
 * 
 * cdef void King_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 25
 *     board.king[board.ownerships[xto][yto]] -= 1
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":89
 *     board.king[board.ownerships[xto][yto]] -= 1
 * 
 * cdef void Aquarius_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):  # ofrom is enemy to Aquarius' owner             # <<<<<<<<<<<<<<
 *     cdef int dx, dy, nx, ny, nnx, nny
 *     for dx in range(-1, 2):
 */

static void __pyx_f_6Pieces_Aquarius_on_death(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_xfrom, int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  int __pyx_v_dx;
  int __pyx_v_dy;
  int __pyx_v_nx;
  int __pyx_v_ny;
  int __pyx_v_nnx;
  int __pyx_v_nny;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("Aquarius_on_death", 0);

  /* "Pieces.pyx":91
 * cdef void Aquarius_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):  # ofrom is enemy to Aquarius' owner
 *     cdef int dx, dy, nx, ny, nnx, nny
 *     for dx in range(-1, 2):             # <<<<<<<<<<<<<<
 *         for dy in range(-1, 2):
 *             if dx == 0 and dy == 0: continue
 */
  for (__pyx_t_1 = -1L; __pyx_t_1 < 2; __pyx_t_1+=1) {
    __pyx_v_dx = __pyx_t_1;

    /* "Pieces.pyx":92
 *     cdef int dx, dy, nx, ny, nnx, nny
 *     for dx in range(-1, 2):
 *         for dy in range(-1, 2):             # <<<<<<<<<<<<<<
 *             if dx == 0 and dy == 0: continue
 *             nx = xto + dx; ny = yto + dy
 */
    for (__pyx_t_2 = -1L; __pyx_t_2 < 2; __pyx_t_2+=1) {
      __pyx_v_dy = __pyx_t_2;

      /* "Pieces.pyx":93
 *     for dx in range(-1, 2):
 *         for dy in range(-1, 2):
 *             if dx == 0 and dy == 0: continue             # <<<<<<<<<<<<<<
 *             nx = xto + dx; ny = yto + dy
 *             if on_the_board(nx, ny):
 */
      __pyx_t_4 = ((__pyx_v_dx == 0) != 0);
      if (__pyx_t_4) {
      } else {
        __pyx_t_3 = __pyx_t_4;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_4 = ((__pyx_v_dy == 0) != 0);
      __pyx_t_3 = __pyx_t_4;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_3) {
        goto __pyx_L5_continue;
      }

      /* "Pieces.pyx":94
 *         for dy in range(-1, 2):
 *             if dx == 0 and dy == 0: continue
 *             nx = xto + dx; ny = yto + dy             # <<<<<<<<<<<<<<
 *             if on_the_board(nx, ny):
 *                 if board.pieces[nx][ny] and board.ownerships[nx][ny] == board.ownerships[xfrom][yfrom]:
 */
      __pyx_v_nx = (__pyx_v_xto + __pyx_v_dx);
      __pyx_v_ny = (__pyx_v_yto + __pyx_v_dy);

      /* "Pieces.pyx":95
 *             if dx == 0 and dy == 0: continue
 *             nx = xto + dx; ny = yto + dy
 *             if on_the_board(nx, ny):             # <<<<<<<<<<<<<<
 *                 if board.pieces[nx][ny] and board.ownerships[nx][ny] == board.ownerships[xfrom][yfrom]:
 *                     if board.frozen[nx][ny] < 2:
 */
      __pyx_t_3 = (__pyx_f_6header_on_the_board(__pyx_v_nx, __pyx_v_ny) != 0);
      if (__pyx_t_3) {

        /* "Pieces.pyx":96
 *             nx = xto + dx; ny = yto + dy
 *             if on_the_board(nx, ny):
 *                 if board.pieces[nx][ny] and board.ownerships[nx][ny] == board.ownerships[xfrom][yfrom]:             # <<<<<<<<<<<<<<
 *                     if board.frozen[nx][ny] < 2:
 *                         board.frozen[nx][ny] = 2
 */
        __pyx_t_4 = (((__pyx_v_board.pieces[__pyx_v_nx])[__pyx_v_ny]) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_3 = __pyx_t_4;
          goto __pyx_L12_bool_binop_done;
        }
        __pyx_t_4 = ((((__pyx_v_board.ownerships[__pyx_v_nx])[__pyx_v_ny]) == ((__pyx_v_board.ownerships[__pyx_v_xfrom])[__pyx_v_yfrom])) != 0);
        __pyx_t_3 = __pyx_t_4;
        __pyx_L12_bool_binop_done:;
        if (__pyx_t_3) {

          /* "Pieces.pyx":97
 *             if on_the_board(nx, ny):
 *                 if board.pieces[nx][ny] and board.ownerships[nx][ny] == board.ownerships[xfrom][yfrom]:
 *                     if board.frozen[nx][ny] < 2:             # <<<<<<<<<<<<<<
 *                         board.frozen[nx][ny] = 2
 *                     nnx = nx + dx; nny = ny + dy
 */
          __pyx_t_3 = ((((__pyx_v_board.frozen[__pyx_v_nx])[__pyx_v_ny]) < 2) != 0);
          if (__pyx_t_3) {

            /* "Pieces.pyx":98
 *                 if board.pieces[nx][ny] and board.ownerships[nx][ny] == board.ownerships[xfrom][yfrom]:
 *                     if board.frozen[nx][ny] < 2:
 *                         board.frozen[nx][ny] = 2             # <<<<<<<<<<<<<<
 *                     nnx = nx + dx; nny = ny + dy
 *                     if on_the_board(nnx, nny):
 */
            ((__pyx_v_board.frozen[__pyx_v_nx])[__pyx_v_ny]) = 2;

            /* "Pieces.pyx":97
 *             if on_the_board(nx, ny):
 *                 if board.pieces[nx][ny] and board.ownerships[nx][ny] == board.ownerships[xfrom][yfrom]:
 *                     if board.frozen[nx][ny] < 2:             # <<<<<<<<<<<<<<
 *                         board.frozen[nx][ny] = 2
 *                     nnx = nx + dx; nny = ny + dy
 */
          }

          /* "Pieces.pyx":99
 *                     if board.frozen[nx][ny] < 2:
 *                         board.frozen[nx][ny] = 2
 *                     nnx = nx + dx; nny = ny + dy             # <<<<<<<<<<<<<<
 *                     if on_the_board(nnx, nny):
 *                         if board.pieces[nnx][nny] == 0:
 */
          __pyx_v_nnx = (__pyx_v_nx + __pyx_v_dx);
          __pyx_v_nny = (__pyx_v_ny + __pyx_v_dy);

          /* "Pieces.pyx":100
 *                         board.frozen[nx][ny] = 2
 *                     nnx = nx + dx; nny = ny + dy
 *                     if on_the_board(nnx, nny):             # <<<<<<<<<<<<<<
 *                         if board.pieces[nnx][nny] == 0:
 *                             move_to(board, nx, ny, nnx, nny)
 */
          __pyx_t_3 = (__pyx_f_6header_on_the_board(__pyx_v_nnx, __pyx_v_nny) != 0);
          if (__pyx_t_3) {

            /* "Pieces.pyx":101
 *                     nnx = nx + dx; nny = ny + dy
 *                     if on_the_board(nnx, nny):
 *                         if board.pieces[nnx][nny] == 0:             # <<<<<<<<<<<<<<
 *                             move_to(board, nx, ny, nnx, nny)
 * 
 */
            __pyx_t_3 = ((((__pyx_v_board.pieces[__pyx_v_nnx])[__pyx_v_nny]) == 0) != 0);
            if (__pyx_t_3) {

              /* "Pieces.pyx":102
 *                     if on_the_board(nnx, nny):
 *                         if board.pieces[nnx][nny] == 0:
 *                             move_to(board, nx, ny, nnx, nny)             # <<<<<<<<<<<<<<
 * 
 * cdef void Comet_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):  # ofrom is enemy to Comet's owner
 */
              __pyx_f_7Actions_move_to(__pyx_v_board, __pyx_v_nx, __pyx_v_ny, __pyx_v_nnx, __pyx_v_nny);

              /* "Pieces.pyx":101
 *                     nnx = nx + dx; nny = ny + dy
 *                     if on_the_board(nnx, nny):
 *                         if board.pieces[nnx][nny] == 0:             # <<<<<<<<<<<<<<
 *                             move_to(board, nx, ny, nnx, nny)
 * 
 */
            }

            /* "Pieces.pyx":100
 *                         board.frozen[nx][ny] = 2
 *                     nnx = nx + dx; nny = ny + dy
 *                     if on_the_board(nnx, nny):             # <<<<<<<<<<<<<<
 *                         if board.pieces[nnx][nny] == 0:
 *                             move_to(board, nx, ny, nnx, nny)
 */
          }

          /* "Pieces.pyx":96
 *             nx = xto + dx; ny = yto + dy
 *             if on_the_board(nx, ny):
 *                 if board.pieces[nx][ny] and board.ownerships[nx][ny] == board.ownerships[xfrom][yfrom]:             # <<<<<<<<<<<<<<
 *                     if board.frozen[nx][ny] < 2:
 *                         board.frozen[nx][ny] = 2
 */
        }

        /* "Pieces.pyx":95
 *             if dx == 0 and dy == 0: continue
 *             nx = xto + dx; ny = yto + dy
 *             if on_the_board(nx, ny):             # <<<<<<<<<<<<<<
 *                 if board.pieces[nx][ny] and board.ownerships[nx][ny] == board.ownerships[xfrom][yfrom]:
 *                     if board.frozen[nx][ny] < 2:
 */
      }
      __pyx_L5_continue:;
    }
  }

  /* "Pieces.pyx":89
 *     board.king[board.ownerships[xto][yto]] -= 1
 * 
 * cdef void Aquarius_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):  # ofrom is enemy to Aquarius' owner             # <<<<<<<<<<<<<<
 *     cdef int dx, dy, nx, ny, nnx, nny
 *     for dx in range(-1, 2):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":104
 *                             move_to(board, nx, ny, nnx, nny)
 * 
 * cdef void Comet_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):  # ofrom is enemy to Comet's owner             # <<<<<<<<<<<<<<
 *     cdef int x, y, actno
 *     cdef int ocomet = enemy_player(board.ownerships[xfrom][yfrom])
 */

static void __pyx_f_6Pieces_Comet_on_death(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_xfrom, int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_actno;
  int __pyx_v_ocomet;
  int __pyx_v_pcomet;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<int> __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("Comet_on_death", 0);

  /* "Pieces.pyx":106
 * cdef void Comet_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):  # ofrom is enemy to Comet's owner
 *     cdef int x, y, actno
 *     cdef int ocomet = enemy_player(board.ownerships[xfrom][yfrom])             # <<<<<<<<<<<<<<
 *     cdef int pcomet = board.pieces[xfrom][yfrom] if (xfrom == xto and yfrom == yto) else board.pieces[xto][yto]  # only way to reveal pcomet
 *     for x in range(BOARD_SIZE):
 */
  __pyx_v_ocomet = __pyx_f_6header_enemy_player(((__pyx_v_board.ownerships[__pyx_v_xfrom])[__pyx_v_yfrom]));

  /* "Pieces.pyx":107
 *     cdef int x, y, actno
 *     cdef int ocomet = enemy_player(board.ownerships[xfrom][yfrom])
 *     cdef int pcomet = board.pieces[xfrom][yfrom] if (xfrom == xto and yfrom == yto) else board.pieces[xto][yto]  # only way to reveal pcomet             # <<<<<<<<<<<<<<
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):
 */
  __pyx_t_3 = ((__pyx_v_xfrom == __pyx_v_xto) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_yfrom == __pyx_v_yto) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  if (__pyx_t_2) {
    __pyx_t_1 = ((__pyx_v_board.pieces[__pyx_v_xfrom])[__pyx_v_yfrom]);
  } else {
    __pyx_t_1 = ((__pyx_v_board.pieces[__pyx_v_xto])[__pyx_v_yto]);
  }
  __pyx_v_pcomet = __pyx_t_1;

  /* "Pieces.pyx":108
 *     cdef int ocomet = enemy_player(board.ownerships[xfrom][yfrom])
 *     cdef int pcomet = board.pieces[xfrom][yfrom] if (xfrom == xto and yfrom == yto) else board.pieces[xto][yto]  # only way to reveal pcomet
 *     for x in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *         for y in range(BOARD_SIZE):
 *             if ocomet == 1:
 */
  __pyx_t_4 = __pyx_e_6header_BOARD_SIZE;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_x = __pyx_t_5;

    /* "Pieces.pyx":109
 *     cdef int pcomet = board.pieces[xfrom][yfrom] if (xfrom == xto and yfrom == yto) else board.pieces[xto][yto]  # only way to reveal pcomet
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *             if ocomet == 1:
 *                 actno = piece_list[pcomet].map[x - xto + CENTRAL_POSITION][y - yto + CENTRAL_POSITION]
 */
    __pyx_t_6 = __pyx_e_6header_BOARD_SIZE;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_y = __pyx_t_7;

      /* "Pieces.pyx":110
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):
 *             if ocomet == 1:             # <<<<<<<<<<<<<<
 *                 actno = piece_list[pcomet].map[x - xto + CENTRAL_POSITION][y - yto + CENTRAL_POSITION]
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_ocomet == 1) != 0);
      if (__pyx_t_2) {

        /* "Pieces.pyx":111
 *         for y in range(BOARD_SIZE):
 *             if ocomet == 1:
 *                 actno = piece_list[pcomet].map[x - xto + CENTRAL_POSITION][y - yto + CENTRAL_POSITION]             # <<<<<<<<<<<<<<
 *             else:
 *                 actno = piece_list[pcomet].map[xto - x + CENTRAL_POSITION][yto - y + CENTRAL_POSITION]
 */
        __pyx_v_actno = (((__pyx_v_6Pieces_piece_list[__pyx_v_pcomet]).map[((__pyx_v_x - __pyx_v_xto) + __pyx_e_6header_CENTRAL_POSITION)])[((__pyx_v_y - __pyx_v_yto) + __pyx_e_6header_CENTRAL_POSITION)]);

        /* "Pieces.pyx":110
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):
 *             if ocomet == 1:             # <<<<<<<<<<<<<<
 *                 actno = piece_list[pcomet].map[x - xto + CENTRAL_POSITION][y - yto + CENTRAL_POSITION]
 *             else:
 */
        goto __pyx_L9;
      }

      /* "Pieces.pyx":113
 *                 actno = piece_list[pcomet].map[x - xto + CENTRAL_POSITION][y - yto + CENTRAL_POSITION]
 *             else:
 *                 actno = piece_list[pcomet].map[xto - x + CENTRAL_POSITION][yto - y + CENTRAL_POSITION]             # <<<<<<<<<<<<<<
 *             if actno == 36 and board.ownerships[x][y] != ocomet and piece_list[board.pieces[x][y]].minion:
 *                 if board.frozen[x][y] < 6:
 */
      /*else*/ {
        __pyx_v_actno = (((__pyx_v_6Pieces_piece_list[__pyx_v_pcomet]).map[((__pyx_v_xto - __pyx_v_x) + __pyx_e_6header_CENTRAL_POSITION)])[((__pyx_v_yto - __pyx_v_y) + __pyx_e_6header_CENTRAL_POSITION)]);
      }
      __pyx_L9:;

      /* "Pieces.pyx":114
 *             else:
 *                 actno = piece_list[pcomet].map[xto - x + CENTRAL_POSITION][yto - y + CENTRAL_POSITION]
 *             if actno == 36 and board.ownerships[x][y] != ocomet and piece_list[board.pieces[x][y]].minion:             # <<<<<<<<<<<<<<
 *                 if board.frozen[x][y] < 6:
 *                     board.frozen[x][y] = 6
 */
      __pyx_t_3 = ((__pyx_v_actno == 36) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_3 = ((((__pyx_v_board.ownerships[__pyx_v_x])[__pyx_v_y]) != __pyx_v_ocomet) != 0);
      if (__pyx_t_3) {
      } else {
        __pyx_t_2 = __pyx_t_3;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_3 = ((__pyx_v_6Pieces_piece_list[((__pyx_v_board.pieces[__pyx_v_x])[__pyx_v_y])]).minion != 0);
      __pyx_t_2 = __pyx_t_3;
      __pyx_L11_bool_binop_done:;
      if (__pyx_t_2) {

        /* "Pieces.pyx":115
 *                 actno = piece_list[pcomet].map[xto - x + CENTRAL_POSITION][yto - y + CENTRAL_POSITION]
 *             if actno == 36 and board.ownerships[x][y] != ocomet and piece_list[board.pieces[x][y]].minion:
 *                 if board.frozen[x][y] < 6:             # <<<<<<<<<<<<<<
 *                     board.frozen[x][y] = 6
 * 
 */
        __pyx_t_2 = ((((__pyx_v_board.frozen[__pyx_v_x])[__pyx_v_y]) < 6) != 0);
        if (__pyx_t_2) {

          /* "Pieces.pyx":116
 *             if actno == 36 and board.ownerships[x][y] != ocomet and piece_list[board.pieces[x][y]].minion:
 *                 if board.frozen[x][y] < 6:
 *                     board.frozen[x][y] = 6             # <<<<<<<<<<<<<<
 * 
 * 
 */
          ((__pyx_v_board.frozen[__pyx_v_x])[__pyx_v_y]) = 6;

          /* "Pieces.pyx":115
 *                 actno = piece_list[pcomet].map[xto - x + CENTRAL_POSITION][yto - y + CENTRAL_POSITION]
 *             if actno == 36 and board.ownerships[x][y] != ocomet and piece_list[board.pieces[x][y]].minion:
 *                 if board.frozen[x][y] < 6:             # <<<<<<<<<<<<<<
 *                     board.frozen[x][y] = 6
 * 
 */
        }

        /* "Pieces.pyx":114
 *             else:
 *                 actno = piece_list[pcomet].map[xto - x + CENTRAL_POSITION][yto - y + CENTRAL_POSITION]
 *             if actno == 36 and board.ownerships[x][y] != ocomet and piece_list[board.pieces[x][y]].minion:             # <<<<<<<<<<<<<<
 *                 if board.frozen[x][y] < 6:
 *                     board.frozen[x][y] = 6
 */
      }
    }
  }

  /* "Pieces.pyx":104
 *                             move_to(board, nx, ny, nnx, nny)
 * 
 * cdef void Comet_on_death(Board& board, int xfrom, int yfrom, int xto, int yto):  # ofrom is enemy to Comet's owner             # <<<<<<<<<<<<<<
 *     cdef int x, y, actno
 *     cdef int ocomet = enemy_player(board.ownerships[xfrom][yfrom])
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":120
 * 
 * #region from/to_lose_X_moral & steal_X_moral
 * cdef void to_lose_2_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 2
 * 
 */

static void __pyx_f_6Pieces_to_lose_2_moral(__pyx_t_6header_Board &__pyx_v_board, CYTHON_UNUSED int __pyx_v_xfrom, CYTHON_UNUSED int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("to_lose_2_moral", 0);

  /* "Pieces.pyx":121
 * #region from/to_lose_X_moral & steal_X_moral
 * cdef void to_lose_2_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xto][yto]] -= 2             # <<<<<<<<<<<<<<
 * 
 * cdef void to_lose_3_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 2);

  /* "Pieces.pyx":120
 * 
 * #region from/to_lose_X_moral & steal_X_moral
 * cdef void to_lose_2_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 2
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":123
 *     board.moral[board.ownerships[xto][yto]] -= 2
 * 
 * cdef void to_lose_3_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 3
 * 
 */

static void __pyx_f_6Pieces_to_lose_3_moral(__pyx_t_6header_Board &__pyx_v_board, CYTHON_UNUSED int __pyx_v_xfrom, CYTHON_UNUSED int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("to_lose_3_moral", 0);

  /* "Pieces.pyx":124
 * 
 * cdef void to_lose_3_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xto][yto]] -= 3             # <<<<<<<<<<<<<<
 * 
 * cdef void to_lose_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 3);

  /* "Pieces.pyx":123
 *     board.moral[board.ownerships[xto][yto]] -= 2
 * 
 * cdef void to_lose_3_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 3
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":126
 *     board.moral[board.ownerships[xto][yto]] -= 3
 * 
 * cdef void to_lose_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 4
 * 
 */

static void __pyx_f_6Pieces_to_lose_4_moral(__pyx_t_6header_Board &__pyx_v_board, CYTHON_UNUSED int __pyx_v_xfrom, CYTHON_UNUSED int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("to_lose_4_moral", 0);

  /* "Pieces.pyx":127
 * 
 * cdef void to_lose_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xto][yto]] -= 4             # <<<<<<<<<<<<<<
 * 
 * cdef void to_lose_5_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 4);

  /* "Pieces.pyx":126
 *     board.moral[board.ownerships[xto][yto]] -= 3
 * 
 * cdef void to_lose_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 4
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":129
 *     board.moral[board.ownerships[xto][yto]] -= 4
 * 
 * cdef void to_lose_5_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 5
 * 
 */

static void __pyx_f_6Pieces_to_lose_5_moral(__pyx_t_6header_Board &__pyx_v_board, CYTHON_UNUSED int __pyx_v_xfrom, CYTHON_UNUSED int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("to_lose_5_moral", 0);

  /* "Pieces.pyx":130
 * 
 * cdef void to_lose_5_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xto][yto]] -= 5             # <<<<<<<<<<<<<<
 * 
 * cdef void to_lose_8_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 5);

  /* "Pieces.pyx":129
 *     board.moral[board.ownerships[xto][yto]] -= 4
 * 
 * cdef void to_lose_5_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 5
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":132
 *     board.moral[board.ownerships[xto][yto]] -= 5
 * 
 * cdef void to_lose_8_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 8
 * 
 */

static void __pyx_f_6Pieces_to_lose_8_moral(__pyx_t_6header_Board &__pyx_v_board, CYTHON_UNUSED int __pyx_v_xfrom, CYTHON_UNUSED int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("to_lose_8_moral", 0);

  /* "Pieces.pyx":133
 * 
 * cdef void to_lose_8_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xto][yto]] -= 8             # <<<<<<<<<<<<<<
 * 
 * cdef void to_lose_12_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 8);

  /* "Pieces.pyx":132
 *     board.moral[board.ownerships[xto][yto]] -= 5
 * 
 * cdef void to_lose_8_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 8
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":135
 *     board.moral[board.ownerships[xto][yto]] -= 8
 * 
 * cdef void to_lose_12_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 12
 * 
 */

static void __pyx_f_6Pieces_to_lose_12_moral(__pyx_t_6header_Board &__pyx_v_board, CYTHON_UNUSED int __pyx_v_xfrom, CYTHON_UNUSED int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("to_lose_12_moral", 0);

  /* "Pieces.pyx":136
 * 
 * cdef void to_lose_12_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xto][yto]] -= 12             # <<<<<<<<<<<<<<
 * 
 * cdef void to_lose_16_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 12);

  /* "Pieces.pyx":135
 *     board.moral[board.ownerships[xto][yto]] -= 8
 * 
 * cdef void to_lose_12_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 12
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":138
 *     board.moral[board.ownerships[xto][yto]] -= 12
 * 
 * cdef void to_lose_16_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 16
 * 
 */

static void __pyx_f_6Pieces_to_lose_16_moral(__pyx_t_6header_Board &__pyx_v_board, CYTHON_UNUSED int __pyx_v_xfrom, CYTHON_UNUSED int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("to_lose_16_moral", 0);

  /* "Pieces.pyx":139
 * 
 * cdef void to_lose_16_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xto][yto]] -= 16             # <<<<<<<<<<<<<<
 * 
 * cdef void from_lose_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 16);

  /* "Pieces.pyx":138
 *     board.moral[board.ownerships[xto][yto]] -= 12
 * 
 * cdef void to_lose_16_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 16
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":141
 *     board.moral[board.ownerships[xto][yto]] -= 16
 * 
 * cdef void from_lose_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xfrom][yfrom]] -= 4
 * 
 */

static void __pyx_f_6Pieces_from_lose_4_moral(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_xfrom, int __pyx_v_yfrom, CYTHON_UNUSED int __pyx_v_xto, CYTHON_UNUSED int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("from_lose_4_moral", 0);

  /* "Pieces.pyx":142
 * 
 * cdef void from_lose_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xfrom][yfrom]] -= 4             # <<<<<<<<<<<<<<
 * 
 * cdef void steal_2_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xfrom])[__pyx_v_yfrom]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 4);

  /* "Pieces.pyx":141
 *     board.moral[board.ownerships[xto][yto]] -= 16
 * 
 * cdef void from_lose_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xfrom][yfrom]] -= 4
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":144
 *     board.moral[board.ownerships[xfrom][yfrom]] -= 4
 * 
 * cdef void steal_2_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xfrom][yfrom]] += 2
 *     board.moral[board.ownerships[xto][yto]] -= 2
 */

static void __pyx_f_6Pieces_steal_2_moral(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_xfrom, int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("steal_2_moral", 0);

  /* "Pieces.pyx":145
 * 
 * cdef void steal_2_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xfrom][yfrom]] += 2             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 2
 * 
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xfrom])[__pyx_v_yfrom]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) + 2);

  /* "Pieces.pyx":146
 * cdef void steal_2_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xfrom][yfrom]] += 2
 *     board.moral[board.ownerships[xto][yto]] -= 2             # <<<<<<<<<<<<<<
 * 
 * cdef void steal_3_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 2);

  /* "Pieces.pyx":144
 *     board.moral[board.ownerships[xfrom][yfrom]] -= 4
 * 
 * cdef void steal_2_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xfrom][yfrom]] += 2
 *     board.moral[board.ownerships[xto][yto]] -= 2
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":148
 *     board.moral[board.ownerships[xto][yto]] -= 2
 * 
 * cdef void steal_3_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xfrom][yfrom]] += 3
 *     board.moral[board.ownerships[xto][yto]] -= 3
 */

static void __pyx_f_6Pieces_steal_3_moral(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_xfrom, int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("steal_3_moral", 0);

  /* "Pieces.pyx":149
 * 
 * cdef void steal_3_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xfrom][yfrom]] += 3             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 3
 * 
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xfrom])[__pyx_v_yfrom]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) + 3);

  /* "Pieces.pyx":150
 * cdef void steal_3_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xfrom][yfrom]] += 3
 *     board.moral[board.ownerships[xto][yto]] -= 3             # <<<<<<<<<<<<<<
 * 
 * cdef void steal_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 3);

  /* "Pieces.pyx":148
 *     board.moral[board.ownerships[xto][yto]] -= 2
 * 
 * cdef void steal_3_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xfrom][yfrom]] += 3
 *     board.moral[board.ownerships[xto][yto]] -= 3
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":152
 *     board.moral[board.ownerships[xto][yto]] -= 3
 * 
 * cdef void steal_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xfrom][yfrom]] += 4
 *     board.moral[board.ownerships[xto][yto]] -= 4
 */

static void __pyx_f_6Pieces_steal_4_moral(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_xfrom, int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("steal_4_moral", 0);

  /* "Pieces.pyx":153
 * 
 * cdef void steal_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xfrom][yfrom]] += 4             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 4
 * 
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xfrom])[__pyx_v_yfrom]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) + 4);

  /* "Pieces.pyx":154
 * cdef void steal_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xfrom][yfrom]] += 4
 *     board.moral[board.ownerships[xto][yto]] -= 4             # <<<<<<<<<<<<<<
 * 
 * cdef void steal_5_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 4);

  /* "Pieces.pyx":152
 *     board.moral[board.ownerships[xto][yto]] -= 3
 * 
 * cdef void steal_4_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xfrom][yfrom]] += 4
 *     board.moral[board.ownerships[xto][yto]] -= 4
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":156
 *     board.moral[board.ownerships[xto][yto]] -= 4
 * 
 * cdef void steal_5_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xfrom][yfrom]] += 5
 *     board.moral[board.ownerships[xto][yto]] -= 5
 */

static void __pyx_f_6Pieces_steal_5_moral(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_xfrom, int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("steal_5_moral", 0);

  /* "Pieces.pyx":157
 * 
 * cdef void steal_5_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xfrom][yfrom]] += 5             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xto][yto]] -= 5
 * #endregion
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xfrom])[__pyx_v_yfrom]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) + 5);

  /* "Pieces.pyx":158
 * cdef void steal_5_moral(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     board.moral[board.ownerships[xfrom][yfrom]] += 5
 *     board.moral[board.ownerships[xto][yto]] -= 5             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
  __pyx_t_1 = ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]);
  (__pyx_v_board.moral[__pyx_t_1]) = ((__pyx_v_board.moral[__pyx_t_1]) - 5);

  /* "Pieces.pyx":156
 *     board.moral[board.ownerships[xto][yto]] -= 4
 * 
 * cdef void steal_5_moral(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     board.moral[board.ownerships[xfrom][yfrom]] += 5
 *     board.moral[board.ownerships[xto][yto]] -= 5
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "Pieces.pyx":167
 * #######################
 * #region AUGMENTED CHECK FUNCTIONS
 * cdef int null_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

static int __pyx_f_6Pieces_null_augmented(CYTHON_UNUSED __pyx_t_6header_Board &__pyx_v_board, CYTHON_UNUSED int __pyx_v_xfrom, CYTHON_UNUSED int __pyx_v_yfrom, CYTHON_UNUSED int __pyx_v_xto, CYTHON_UNUSED int __pyx_v_yto) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("null_augmented", 0);

  /* "Pieces.pyx":168
 * #region AUGMENTED CHECK FUNCTIONS
 * cdef int null_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int RoyalGuard_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "Pieces.pyx":167
 * #######################
 * #region AUGMENTED CHECK FUNCTIONS
 * cdef int null_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Pieces.pyx":170
 *     return 0
 * 
 * cdef int RoyalGuard_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     if board.pieces[xto][yto]:
 *         return 0
 */

static int __pyx_f_6Pieces_RoyalGuard_augmented(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_xfrom, int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  int __pyx_v_ofrom;
  int __pyx_v_dx;
  int __pyx_v_dy;
  int __pyx_v_nx;
  int __pyx_v_ny;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("RoyalGuard_augmented", 0);

  /* "Pieces.pyx":171
 * 
 * cdef int RoyalGuard_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     if board.pieces[xto][yto]:             # <<<<<<<<<<<<<<
 *         return 0
 *     cdef int ofrom = board.ownerships[xfrom][yfrom]
 */
  __pyx_t_1 = (((__pyx_v_board.pieces[__pyx_v_xto])[__pyx_v_yto]) != 0);
  if (__pyx_t_1) {

    /* "Pieces.pyx":172
 * cdef int RoyalGuard_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     if board.pieces[xto][yto]:
 *         return 0             # <<<<<<<<<<<<<<
 *     cdef int ofrom = board.ownerships[xfrom][yfrom]
 *     cdef int dx, dy, nx, ny
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "Pieces.pyx":171
 * 
 * cdef int RoyalGuard_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     if board.pieces[xto][yto]:             # <<<<<<<<<<<<<<
 *         return 0
 *     cdef int ofrom = board.ownerships[xfrom][yfrom]
 */
  }

  /* "Pieces.pyx":173
 *     if board.pieces[xto][yto]:
 *         return 0
 *     cdef int ofrom = board.ownerships[xfrom][yfrom]             # <<<<<<<<<<<<<<
 *     cdef int dx, dy, nx, ny
 *     for dx in range(-1, 2):
 */
  __pyx_v_ofrom = ((__pyx_v_board.ownerships[__pyx_v_xfrom])[__pyx_v_yfrom]);

  /* "Pieces.pyx":175
 *     cdef int ofrom = board.ownerships[xfrom][yfrom]
 *     cdef int dx, dy, nx, ny
 *     for dx in range(-1, 2):             # <<<<<<<<<<<<<<
 *         for dy in range(-1, 2):
 *             nx, ny = xto + dx, yto + dy
 */
  for (__pyx_t_2 = -1L; __pyx_t_2 < 2; __pyx_t_2+=1) {
    __pyx_v_dx = __pyx_t_2;

    /* "Pieces.pyx":176
 *     cdef int dx, dy, nx, ny
 *     for dx in range(-1, 2):
 *         for dy in range(-1, 2):             # <<<<<<<<<<<<<<
 *             nx, ny = xto + dx, yto + dy
 *             if nx < 0 or nx >= BOARD_SIZE or ny < 0 or ny >= BOARD_SIZE:
 */
    for (__pyx_t_3 = -1L; __pyx_t_3 < 2; __pyx_t_3+=1) {
      __pyx_v_dy = __pyx_t_3;

      /* "Pieces.pyx":177
 *     for dx in range(-1, 2):
 *         for dy in range(-1, 2):
 *             nx, ny = xto + dx, yto + dy             # <<<<<<<<<<<<<<
 *             if nx < 0 or nx >= BOARD_SIZE or ny < 0 or ny >= BOARD_SIZE:
 *                 continue
 */
      __pyx_t_4 = (__pyx_v_xto + __pyx_v_dx);
      __pyx_t_5 = (__pyx_v_yto + __pyx_v_dy);
      __pyx_v_nx = __pyx_t_4;
      __pyx_v_ny = __pyx_t_5;

      /* "Pieces.pyx":178
 *         for dy in range(-1, 2):
 *             nx, ny = xto + dx, yto + dy
 *             if nx < 0 or nx >= BOARD_SIZE or ny < 0 or ny >= BOARD_SIZE:             # <<<<<<<<<<<<<<
 *                 continue
 *             if board.pieces[nx][ny] == index_of_King and board.ownerships[nx][ny] == ofrom:
 */
      __pyx_t_6 = ((__pyx_v_nx < 0) != 0);
      if (!__pyx_t_6) {
      } else {
        __pyx_t_1 = __pyx_t_6;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_6 = ((__pyx_v_nx >= __pyx_e_6header_BOARD_SIZE) != 0);
      if (!__pyx_t_6) {
      } else {
        __pyx_t_1 = __pyx_t_6;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_6 = ((__pyx_v_ny < 0) != 0);
      if (!__pyx_t_6) {
      } else {
        __pyx_t_1 = __pyx_t_6;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_6 = ((__pyx_v_ny >= __pyx_e_6header_BOARD_SIZE) != 0);
      __pyx_t_1 = __pyx_t_6;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_1) {

        /* "Pieces.pyx":179
 *             nx, ny = xto + dx, yto + dy
 *             if nx < 0 or nx >= BOARD_SIZE or ny < 0 or ny >= BOARD_SIZE:
 *                 continue             # <<<<<<<<<<<<<<
 *             if board.pieces[nx][ny] == index_of_King and board.ownerships[nx][ny] == ofrom:
 *                 return 1
 */
        goto __pyx_L6_continue;

        /* "Pieces.pyx":178
 *         for dy in range(-1, 2):
 *             nx, ny = xto + dx, yto + dy
 *             if nx < 0 or nx >= BOARD_SIZE or ny < 0 or ny >= BOARD_SIZE:             # <<<<<<<<<<<<<<
 *                 continue
 *             if board.pieces[nx][ny] == index_of_King and board.ownerships[nx][ny] == ofrom:
 */
      }

      /* "Pieces.pyx":180
 *             if nx < 0 or nx >= BOARD_SIZE or ny < 0 or ny >= BOARD_SIZE:
 *                 continue
 *             if board.pieces[nx][ny] == index_of_King and board.ownerships[nx][ny] == ofrom:             # <<<<<<<<<<<<<<
 *                 return 1
 *     return 0
 */
      __pyx_t_6 = ((((__pyx_v_board.pieces[__pyx_v_nx])[__pyx_v_ny]) == __pyx_v_6Pieces_index_of_King) != 0);
      if (__pyx_t_6) {
      } else {
        __pyx_t_1 = __pyx_t_6;
        goto __pyx_L14_bool_binop_done;
      }
      __pyx_t_6 = ((((__pyx_v_board.ownerships[__pyx_v_nx])[__pyx_v_ny]) == __pyx_v_ofrom) != 0);
      __pyx_t_1 = __pyx_t_6;
      __pyx_L14_bool_binop_done:;
      if (__pyx_t_1) {

        /* "Pieces.pyx":181
 *                 continue
 *             if board.pieces[nx][ny] == index_of_King and board.ownerships[nx][ny] == ofrom:
 *                 return 1             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "Pieces.pyx":180
 *             if nx < 0 or nx >= BOARD_SIZE or ny < 0 or ny >= BOARD_SIZE:
 *                 continue
 *             if board.pieces[nx][ny] == index_of_King and board.ownerships[nx][ny] == ofrom:             # <<<<<<<<<<<<<<
 *                 return 1
 *     return 0
 */
      }
      __pyx_L6_continue:;
    }
  }

  /* "Pieces.pyx":182
 *             if board.pieces[nx][ny] == index_of_King and board.ownerships[nx][ny] == ofrom:
 *                 return 1
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef int Comet_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "Pieces.pyx":170
 *     return 0
 * 
 * cdef int RoyalGuard_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     if board.pieces[xto][yto]:
 *         return 0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Pieces.pyx":184
 *     return 0
 * 
 * cdef int Comet_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     return board.ownerships[xfrom][yfrom] != board.ownerships[xto][yto] and piece_list[board.pieces[xto][yto]].champion
 * 
 */

static int __pyx_f_6Pieces_Comet_augmented(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_xfrom, int __pyx_v_yfrom, int __pyx_v_xto, int __pyx_v_yto) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("Comet_augmented", 0);

  /* "Pieces.pyx":185
 * 
 * cdef int Comet_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):
 *     return board.ownerships[xfrom][yfrom] != board.ownerships[xto][yto] and piece_list[board.pieces[xto][yto]].champion             # <<<<<<<<<<<<<<
 * 
 * #endregion
 */
  __pyx_t_2 = (((__pyx_v_board.ownerships[__pyx_v_xfrom])[__pyx_v_yfrom]) != ((__pyx_v_board.ownerships[__pyx_v_xto])[__pyx_v_yto]));
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_6Pieces_piece_list[((__pyx_v_board.pieces[__pyx_v_xto])[__pyx_v_yto])]).champion;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "Pieces.pyx":184
 *     return 0
 * 
 * cdef int Comet_augmented(Board& board, int xfrom, int yfrom, int xto, int yto):             # <<<<<<<<<<<<<<
 *     return board.ownerships[xfrom][yfrom] != board.ownerships[xto][yto] and piece_list[board.pieces[xto][yto]].champion
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Pieces.pyx":190
 * #######################
 * 
 * cdef void link_effects(vector[Piece]& piece_vec):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef str name
 */

static void __pyx_f_6Pieces_link_effects(std::vector<__pyx_t_6header_Piece>  &__pyx_v_piece_vec) {
  int __pyx_v_i;
  PyObject *__pyx_v_name = 0;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("link_effects", 0);

  /* "Pieces.pyx":193
 *     cdef int i
 *     cdef str name
 *     for i in range(piece_vec.size()):             # <<<<<<<<<<<<<<
 *         name = piece_vec[i].name.decode()
 *         if name == 'King': piece_vec[i].has_on_death = 1; piece_list[i].on_death = King_on_death
 */
  __pyx_t_1 = __pyx_v_piece_vec.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "Pieces.pyx":194
 *     cdef str name
 *     for i in range(piece_vec.size()):
 *         name = piece_vec[i].name.decode()             # <<<<<<<<<<<<<<
 *         if name == 'King': piece_vec[i].has_on_death = 1; piece_list[i].on_death = King_on_death
 *         elif name == 'Greed': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_4_moral
 */
    __pyx_t_3 = __Pyx_decode_cpp_string((__pyx_v_piece_vec[__pyx_v_i]).name, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyString_CheckExact(__pyx_t_3))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_name, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "Pieces.pyx":195
 *     for i in range(piece_vec.size()):
 *         name = piece_vec[i].name.decode()
 *         if name == 'King': piece_vec[i].has_on_death = 1; piece_list[i].on_death = King_on_death             # <<<<<<<<<<<<<<
 *         elif name == 'Greed': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_4_moral
 *         elif name == 'Greed+': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_8_moral
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_n_s_King, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 195, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_King_on_death;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":196
 *         name = piece_vec[i].name.decode()
 *         if name == 'King': piece_vec[i].has_on_death = 1; piece_list[i].on_death = King_on_death
 *         elif name == 'Greed': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_4_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Greed+': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_8_moral
 *         elif name == 'Greed++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_12_moral
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_n_s_Greed, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 196, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_to_lose_4_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":197
 *         if name == 'King': piece_vec[i].has_on_death = 1; piece_list[i].on_death = King_on_death
 *         elif name == 'Greed': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_4_moral
 *         elif name == 'Greed+': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_8_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Greed++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_12_moral
 *         elif name == 'Greed+++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_16_moral
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_kp_s_Greed_2, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 197, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_to_lose_8_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":198
 *         elif name == 'Greed': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_4_moral
 *         elif name == 'Greed+': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_8_moral
 *         elif name == 'Greed++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_12_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Greed+++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_16_moral
 *         elif name == 'Militia': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_2_moral
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_kp_s_Greed_3, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 198, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_to_lose_12_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":199
 *         elif name == 'Greed+': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_8_moral
 *         elif name == 'Greed++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_12_moral
 *         elif name == 'Greed+++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_16_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Militia': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_2_moral
 *         elif name == 'Militia+': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_3_moral
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_kp_s_Greed_4, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 199, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_to_lose_16_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":200
 *         elif name == 'Greed++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_12_moral
 *         elif name == 'Greed+++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_16_moral
 *         elif name == 'Militia': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_2_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Militia+': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_3_moral
 *         elif name == 'Militia++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_4_moral
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_n_s_Militia, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 200, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_to_lose_2_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":201
 *         elif name == 'Greed+++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_16_moral
 *         elif name == 'Militia': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_2_moral
 *         elif name == 'Militia+': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_3_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Militia++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_4_moral
 *         elif name == 'Militia+++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_5_moral
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_kp_s_Militia_2, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_to_lose_3_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":202
 *         elif name == 'Militia': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_2_moral
 *         elif name == 'Militia+': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_3_moral
 *         elif name == 'Militia++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_4_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Militia+++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_5_moral
 *         elif name == 'Vampire': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_2_moral
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_kp_s_Militia_3, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 202, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_to_lose_4_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":203
 *         elif name == 'Militia+': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_3_moral
 *         elif name == 'Militia++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_4_moral
 *         elif name == 'Militia+++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_5_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Vampire': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_2_moral
 *         elif name == 'Vampire+': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_3_moral
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_kp_s_Militia_4, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 203, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_to_lose_5_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":204
 *         elif name == 'Militia++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_4_moral
 *         elif name == 'Militia+++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_5_moral
 *         elif name == 'Vampire': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_2_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Vampire+': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_3_moral
 *         elif name == 'Vampire++': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_4_moral
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_n_s_Vampire, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 204, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_kill = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_kill = __pyx_f_6Pieces_steal_2_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":205
 *         elif name == 'Militia+++': piece_vec[i].has_on_death = 1; piece_list[i].on_death = to_lose_5_moral
 *         elif name == 'Vampire': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_2_moral
 *         elif name == 'Vampire+': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_3_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Vampire++': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_4_moral
 *         elif name == 'Vampire+++': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_5_moral
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_kp_s_Vampire_2, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 205, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_kill = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_kill = __pyx_f_6Pieces_steal_3_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":206
 *         elif name == 'Vampire': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_2_moral
 *         elif name == 'Vampire+': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_3_moral
 *         elif name == 'Vampire++': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_4_moral             # <<<<<<<<<<<<<<
 *         elif name == 'Vampire+++': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_5_moral
 * 
 */
    __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_kp_s_Vampire_3, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 206, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_kill = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_kill = __pyx_f_6Pieces_steal_4_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":207
 *         elif name == 'Vampire+': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_3_moral
 *         elif name == 'Vampire++': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_4_moral
 *         elif name == 'Vampire+++': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_5_moral             # <<<<<<<<<<<<<<
 * 
 *         elif 'Reaver' in name: piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = from_lose_4_moral
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_name, __pyx_kp_s_Vampire_4, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_kill = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_kill = __pyx_f_6Pieces_steal_5_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":209
 *         elif name == 'Vampire+++': piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = steal_5_moral
 * 
 *         elif 'Reaver' in name: piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = from_lose_4_moral             # <<<<<<<<<<<<<<
 *         elif 'RoyalGuard' in name: piece_vec[i].augmented = 1; piece_vec[i].augmented_actno = 6; piece_vec[i].augmented_check = RoyalGuard_augmented
 *         elif 'Aquarius' in name: piece_vec[i].has_on_death = 1; piece_list[i].on_death = Aquarius_on_death
 */
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_Reaver, __pyx_v_name, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 209, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_kill = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_kill = __pyx_f_6Pieces_from_lose_4_moral;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":210
 * 
 *         elif 'Reaver' in name: piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = from_lose_4_moral
 *         elif 'RoyalGuard' in name: piece_vec[i].augmented = 1; piece_vec[i].augmented_actno = 6; piece_vec[i].augmented_check = RoyalGuard_augmented             # <<<<<<<<<<<<<<
 *         elif 'Aquarius' in name: piece_vec[i].has_on_death = 1; piece_list[i].on_death = Aquarius_on_death
 *         elif 'Comet' in name:
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_RoyalGuard, __pyx_v_name, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 210, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
      (__pyx_v_piece_vec[__pyx_v_i]).augmented = 1;
      (__pyx_v_piece_vec[__pyx_v_i]).augmented_actno = 6;
      (__pyx_v_piece_vec[__pyx_v_i]).augmented_check = __pyx_f_6Pieces_RoyalGuard_augmented;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":211
 *         elif 'Reaver' in name: piece_vec[i].has_on_kill = 1; piece_list[i].on_kill = from_lose_4_moral
 *         elif 'RoyalGuard' in name: piece_vec[i].augmented = 1; piece_vec[i].augmented_actno = 6; piece_vec[i].augmented_check = RoyalGuard_augmented
 *         elif 'Aquarius' in name: piece_vec[i].has_on_death = 1; piece_list[i].on_death = Aquarius_on_death             # <<<<<<<<<<<<<<
 *         elif 'Comet' in name:
 *             piece_vec[i].augmented = 1; piece_vec[i].augmented_actno = 37; piece_vec[i].augmented_check = Comet_augmented
 */
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_Aquarius, __pyx_v_name, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 211, __pyx_L1_error)
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_Aquarius_on_death;
      goto __pyx_L5;
    }

    /* "Pieces.pyx":212
 *         elif 'RoyalGuard' in name: piece_vec[i].augmented = 1; piece_vec[i].augmented_actno = 6; piece_vec[i].augmented_check = RoyalGuard_augmented
 *         elif 'Aquarius' in name: piece_vec[i].has_on_death = 1; piece_list[i].on_death = Aquarius_on_death
 *         elif 'Comet' in name:             # <<<<<<<<<<<<<<
 *             piece_vec[i].augmented = 1; piece_vec[i].augmented_actno = 37; piece_vec[i].augmented_check = Comet_augmented
 *             piece_vec[i].has_on_death = 1; piece_list[i].on_death = Comet_on_death
 */
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_n_s_Comet, __pyx_v_name, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 212, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "Pieces.pyx":213
 *         elif 'Aquarius' in name: piece_vec[i].has_on_death = 1; piece_list[i].on_death = Aquarius_on_death
 *         elif 'Comet' in name:
 *             piece_vec[i].augmented = 1; piece_vec[i].augmented_actno = 37; piece_vec[i].augmented_check = Comet_augmented             # <<<<<<<<<<<<<<
 *             piece_vec[i].has_on_death = 1; piece_list[i].on_death = Comet_on_death
 */
      (__pyx_v_piece_vec[__pyx_v_i]).augmented = 1;
      (__pyx_v_piece_vec[__pyx_v_i]).augmented_actno = 37;
      (__pyx_v_piece_vec[__pyx_v_i]).augmented_check = __pyx_f_6Pieces_Comet_augmented;

      /* "Pieces.pyx":214
 *         elif 'Comet' in name:
 *             piece_vec[i].augmented = 1; piece_vec[i].augmented_actno = 37; piece_vec[i].augmented_check = Comet_augmented
 *             piece_vec[i].has_on_death = 1; piece_list[i].on_death = Comet_on_death             # <<<<<<<<<<<<<<
 */
      (__pyx_v_piece_vec[__pyx_v_i]).has_on_death = 1;
      (__pyx_v_6Pieces_piece_list[__pyx_v_i]).on_death = __pyx_f_6Pieces_Comet_on_death;

      /* "Pieces.pyx":212
 *         elif 'RoyalGuard' in name: piece_vec[i].augmented = 1; piece_vec[i].augmented_actno = 6; piece_vec[i].augmented_check = RoyalGuard_augmented
 *         elif 'Aquarius' in name: piece_vec[i].has_on_death = 1; piece_list[i].on_death = Aquarius_on_death
 *         elif 'Comet' in name:             # <<<<<<<<<<<<<<
 *             piece_vec[i].augmented = 1; piece_vec[i].augmented_actno = 37; piece_vec[i].augmented_check = Comet_augmented
 *             piece_vec[i].has_on_death = 1; piece_list[i].on_death = Comet_on_death
 */
    }
    __pyx_L5:;
  }

  /* "Pieces.pyx":190
 * #######################
 * 
 * cdef void link_effects(vector[Piece]& piece_vec):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef str name
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("Pieces.link_effects", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_RefNannyFinishContext();
}

/* "header.pxd":80
 * #### INLINE FUNCTIONS ####
 * 
 * cdef inline int iabs(int x):             # <<<<<<<<<<<<<<
 *     return -x if x < 0 else x
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_iabs(int __pyx_v_x) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("iabs", 0);

  /* "header.pxd":81
 * 
 * cdef inline int iabs(int x):
 *     return -x if x < 0 else x             # <<<<<<<<<<<<<<
 * 
 * cdef inline int imin(int x, int y):
 */
  if (((__pyx_v_x < 0) != 0)) {
    __pyx_t_1 = (-__pyx_v_x);
  } else {
    __pyx_t_1 = __pyx_v_x;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "header.pxd":80
 * #### INLINE FUNCTIONS ####
 * 
 * cdef inline int iabs(int x):             # <<<<<<<<<<<<<<
 *     return -x if x < 0 else x
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":83
 *     return -x if x < 0 else x
 * 
 * cdef inline int imin(int x, int y):             # <<<<<<<<<<<<<<
 *     return x if x < y else y
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_imin(int __pyx_v_x, int __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("imin", 0);

  /* "header.pxd":84
 * 
 * cdef inline int imin(int x, int y):
 *     return x if x < y else y             # <<<<<<<<<<<<<<
 * 
 * cdef inline int imax(int x, int y):
 */
  if (((__pyx_v_x < __pyx_v_y) != 0)) {
    __pyx_t_1 = __pyx_v_x;
  } else {
    __pyx_t_1 = __pyx_v_y;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "header.pxd":83
 *     return -x if x < 0 else x
 * 
 * cdef inline int imin(int x, int y):             # <<<<<<<<<<<<<<
 *     return x if x < y else y
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":86
 *     return x if x < y else y
 * 
 * cdef inline int imax(int x, int y):             # <<<<<<<<<<<<<<
 *     return x if x > y else y
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_imax(int __pyx_v_x, int __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("imax", 0);

  /* "header.pxd":87
 * 
 * cdef inline int imax(int x, int y):
 *     return x if x > y else y             # <<<<<<<<<<<<<<
 * 
 * cdef inline int unit(int x):
 */
  if (((__pyx_v_x > __pyx_v_y) != 0)) {
    __pyx_t_1 = __pyx_v_x;
  } else {
    __pyx_t_1 = __pyx_v_y;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "header.pxd":86
 *     return x if x < y else y
 * 
 * cdef inline int imax(int x, int y):             # <<<<<<<<<<<<<<
 *     return x if x > y else y
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":89
 *     return x if x > y else y
 * 
 * cdef inline int unit(int x):             # <<<<<<<<<<<<<<
 *     return 1 if x > 0 else (-1 if x < 0 else 0)
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_unit(int __pyx_v_x) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("unit", 0);

  /* "header.pxd":90
 * 
 * cdef inline int unit(int x):
 *     return 1 if x > 0 else (-1 if x < 0 else 0)             # <<<<<<<<<<<<<<
 * 
 * cdef inline int enemy_player(int player_no):
 */
  if (((__pyx_v_x > 0) != 0)) {
    __pyx_t_1 = 1;
  } else {
    if (((__pyx_v_x < 0) != 0)) {
      __pyx_t_2 = -1;
    } else {
      __pyx_t_2 = 0;
    }
    __pyx_t_1 = __pyx_t_2;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "header.pxd":89
 *     return x if x > y else y
 * 
 * cdef inline int unit(int x):             # <<<<<<<<<<<<<<
 *     return 1 if x > 0 else (-1 if x < 0 else 0)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":92
 *     return 1 if x > 0 else (-1 if x < 0 else 0)
 * 
 * cdef inline int enemy_player(int player_no):             # <<<<<<<<<<<<<<
 *     return 3 - player_no
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_enemy_player(int __pyx_v_player_no) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enemy_player", 0);

  /* "header.pxd":93
 * 
 * cdef inline int enemy_player(int player_no):
 *     return 3 - player_no             # <<<<<<<<<<<<<<
 * 
 * cdef inline int on_the_board(int x, int y):
 */
  __pyx_r = (3 - __pyx_v_player_no);
  goto __pyx_L0;

  /* "header.pxd":92
 *     return 1 if x > 0 else (-1 if x < 0 else 0)
 * 
 * cdef inline int enemy_player(int player_no):             # <<<<<<<<<<<<<<
 *     return 3 - player_no
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":95
 *     return 3 - player_no
 * 
 * cdef inline int on_the_board(int x, int y):             # <<<<<<<<<<<<<<
 *     return x >= 0 and x < BOARD_SIZE and y >= 0 and y < BOARD_SIZE
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_on_the_board(int __pyx_v_x, int __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("on_the_board", 0);

  /* "header.pxd":96
 * 
 * cdef inline int on_the_board(int x, int y):
 *     return x >= 0 and x < BOARD_SIZE and y >= 0 and y < BOARD_SIZE             # <<<<<<<<<<<<<<
 * 
 * # from Board.pxd
 */
  __pyx_t_2 = (__pyx_v_x >= 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_x < __pyx_e_6header_BOARD_SIZE);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_y >= 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_y < __pyx_e_6header_BOARD_SIZE);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "header.pxd":95
 *     return 3 - player_no
 * 
 * cdef inline int on_the_board(int x, int y):             # <<<<<<<<<<<<<<
 *     return x >= 0 and x < BOARD_SIZE and y >= 0 and y < BOARD_SIZE
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":99
 * 
 * # from Board.pxd
 * cdef inline void deepcopy_int2d(int2d& to_mat, int2d& from_mat):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     if to_mat.size() != from_mat.size():
 */

static CYTHON_INLINE void __pyx_f_6header_deepcopy_int2d(__pyx_t_6header_int2d &__pyx_v_to_mat, __pyx_t_6header_int2d &__pyx_v_from_mat) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("deepcopy_int2d", 0);

  /* "header.pxd":101
 * cdef inline void deepcopy_int2d(int2d& to_mat, int2d& from_mat):
 *     cdef int i
 *     if to_mat.size() != from_mat.size():             # <<<<<<<<<<<<<<
 *         to_mat.resize(from_mat.size())
 *     for i in range(from_mat.size()):
 */
  __pyx_t_1 = ((__pyx_v_to_mat.size() != __pyx_v_from_mat.size()) != 0);
  if (__pyx_t_1) {

    /* "header.pxd":102
 *     cdef int i
 *     if to_mat.size() != from_mat.size():
 *         to_mat.resize(from_mat.size())             # <<<<<<<<<<<<<<
 *     for i in range(from_mat.size()):
 *         to_mat[i] = from_mat[i]
 */
    try {
      __pyx_v_to_mat.resize(__pyx_v_from_mat.size());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 102, __pyx_L1_error)
    }

    /* "header.pxd":101
 * cdef inline void deepcopy_int2d(int2d& to_mat, int2d& from_mat):
 *     cdef int i
 *     if to_mat.size() != from_mat.size():             # <<<<<<<<<<<<<<
 *         to_mat.resize(from_mat.size())
 *     for i in range(from_mat.size()):
 */
  }

  /* "header.pxd":103
 *     if to_mat.size() != from_mat.size():
 *         to_mat.resize(from_mat.size())
 *     for i in range(from_mat.size()):             # <<<<<<<<<<<<<<
 *         to_mat[i] = from_mat[i]
 * 
 */
  __pyx_t_2 = __pyx_v_from_mat.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "header.pxd":104
 *         to_mat.resize(from_mat.size())
 *     for i in range(from_mat.size()):
 *         to_mat[i] = from_mat[i]             # <<<<<<<<<<<<<<
 * 
 * cdef inline void deepcopy_board(Board& to_board, Board& from_board):
 */
    (__pyx_v_to_mat[__pyx_v_i]) = (__pyx_v_from_mat[__pyx_v_i]);
  }

  /* "header.pxd":99
 * 
 * # from Board.pxd
 * cdef inline void deepcopy_int2d(int2d& to_mat, int2d& from_mat):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     if to_mat.size() != from_mat.size():
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("header.deepcopy_int2d", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "header.pxd":106
 *         to_mat[i] = from_mat[i]
 * 
 * cdef inline void deepcopy_board(Board& to_board, Board& from_board):             # <<<<<<<<<<<<<<
 *     to_board.current = from_board.current
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)
 */

static CYTHON_INLINE void __pyx_f_6header_deepcopy_board(__pyx_t_6header_Board &__pyx_v_to_board, __pyx_t_6header_Board &__pyx_v_from_board) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("deepcopy_board", 0);

  /* "header.pxd":107
 * 
 * cdef inline void deepcopy_board(Board& to_board, Board& from_board):
 *     to_board.current = from_board.current             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)
 *     deepcopy_int2d(to_board.ownerships, from_board.ownerships)
 */
  __pyx_t_1 = __pyx_v_from_board.current;
  __pyx_v_to_board.current = __pyx_t_1;

  /* "header.pxd":108
 * cdef inline void deepcopy_board(Board& to_board, Board& from_board):
 *     to_board.current = from_board.current
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.ownerships, from_board.ownerships)
 *     deepcopy_int2d(to_board.costs, from_board.costs)
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.pieces, __pyx_v_from_board.pieces);

  /* "header.pxd":109
 *     to_board.current = from_board.current
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)
 *     deepcopy_int2d(to_board.ownerships, from_board.ownerships)             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.costs, from_board.costs)
 *     deepcopy_int2d(to_board.frozen, from_board.frozen)
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.ownerships, __pyx_v_from_board.ownerships);

  /* "header.pxd":110
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)
 *     deepcopy_int2d(to_board.ownerships, from_board.ownerships)
 *     deepcopy_int2d(to_board.costs, from_board.costs)             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.frozen, from_board.frozen)
 *     deepcopy_int2d(to_board.poison, from_board.poison)
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.costs, __pyx_v_from_board.costs);

  /* "header.pxd":111
 *     deepcopy_int2d(to_board.ownerships, from_board.ownerships)
 *     deepcopy_int2d(to_board.costs, from_board.costs)
 *     deepcopy_int2d(to_board.frozen, from_board.frozen)             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.poison, from_board.poison)
 *     deepcopy_int2d(to_board.thunder, from_board.thunder)
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.frozen, __pyx_v_from_board.frozen);

  /* "header.pxd":112
 *     deepcopy_int2d(to_board.costs, from_board.costs)
 *     deepcopy_int2d(to_board.frozen, from_board.frozen)
 *     deepcopy_int2d(to_board.poison, from_board.poison)             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.thunder, from_board.thunder)
 *     to_board.moral[1], to_board.moral[2] = from_board.moral[1], from_board.moral[2]
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.poison, __pyx_v_from_board.poison);

  /* "header.pxd":113
 *     deepcopy_int2d(to_board.frozen, from_board.frozen)
 *     deepcopy_int2d(to_board.poison, from_board.poison)
 *     deepcopy_int2d(to_board.thunder, from_board.thunder)             # <<<<<<<<<<<<<<
 *     to_board.moral[1], to_board.moral[2] = from_board.moral[1], from_board.moral[2]
 *     to_board.king[1], to_board.king[2] = from_board.king[1], from_board.king[2]
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.thunder, __pyx_v_from_board.thunder);

  /* "header.pxd":114
 *     deepcopy_int2d(to_board.poison, from_board.poison)
 *     deepcopy_int2d(to_board.thunder, from_board.thunder)
 *     to_board.moral[1], to_board.moral[2] = from_board.moral[1], from_board.moral[2]             # <<<<<<<<<<<<<<
 *     to_board.king[1], to_board.king[2] = from_board.king[1], from_board.king[2]
 * 
 */
  __pyx_t_1 = (__pyx_v_from_board.moral[1]);
  __pyx_t_2 = (__pyx_v_from_board.moral[2]);
  (__pyx_v_to_board.moral[1]) = __pyx_t_1;
  (__pyx_v_to_board.moral[2]) = __pyx_t_2;

  /* "header.pxd":115
 *     deepcopy_int2d(to_board.thunder, from_board.thunder)
 *     to_board.moral[1], to_board.moral[2] = from_board.moral[1], from_board.moral[2]
 *     to_board.king[1], to_board.king[2] = from_board.king[1], from_board.king[2]             # <<<<<<<<<<<<<<
 * 
 * cdef inline void reset_board(Board& board):
 */
  __pyx_t_2 = (__pyx_v_from_board.king[1]);
  __pyx_t_1 = (__pyx_v_from_board.king[2]);
  (__pyx_v_to_board.king[1]) = __pyx_t_2;
  (__pyx_v_to_board.king[2]) = __pyx_t_1;

  /* "header.pxd":106
 *         to_mat[i] = from_mat[i]
 * 
 * cdef inline void deepcopy_board(Board& to_board, Board& from_board):             # <<<<<<<<<<<<<<
 *     to_board.current = from_board.current
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "header.pxd":117
 *     to_board.king[1], to_board.king[2] = from_board.king[1], from_board.king[2]
 * 
 * cdef inline void reset_board(Board& board):             # <<<<<<<<<<<<<<
 *     board.current = 1
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */

static CYTHON_INLINE void __pyx_f_6header_reset_board(__pyx_t_6header_Board &__pyx_v_board) {
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  __pyx_t_6header_int2d __pyx_t_2;
  __Pyx_RefNannySetupContext("reset_board", 0);

  /* "header.pxd":118
 * 
 * cdef inline void reset_board(Board& board):
 *     board.current = 1             # <<<<<<<<<<<<<<
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.ownerships = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */
  __pyx_v_board.current = 1;

  /* "header.pxd":119
 * cdef inline void reset_board(Board& board):
 *     board.current = 1
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 *     board.ownerships = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.costs = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 119, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 119, __pyx_L1_error)
  }
  __pyx_v_board.pieces = __pyx_t_2;

  /* "header.pxd":120
 *     board.current = 1
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.ownerships = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 *     board.costs = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.frozen = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 120, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 120, __pyx_L1_error)
  }
  __pyx_v_board.ownerships = __pyx_t_2;

  /* "header.pxd":121
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.ownerships = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.costs = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 *     board.frozen = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.poison = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 121, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 121, __pyx_L1_error)
  }
  __pyx_v_board.costs = __pyx_t_2;

  /* "header.pxd":122
 *     board.ownerships = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.costs = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.frozen = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 *     board.poison = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.thunder = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 122, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 122, __pyx_L1_error)
  }
  __pyx_v_board.frozen = __pyx_t_2;

  /* "header.pxd":123
 *     board.costs = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.frozen = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.poison = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 *     board.thunder = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 * 
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 123, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 123, __pyx_L1_error)
  }
  __pyx_v_board.poison = __pyx_t_2;

  /* "header.pxd":124
 *     board.frozen = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.poison = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.thunder = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 124, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 124, __pyx_L1_error)
  }
  __pyx_v_board.thunder = __pyx_t_2;

  /* "header.pxd":117
 *     to_board.king[1], to_board.king[2] = from_board.king[1], from_board.king[2]
 * 
 * cdef inline void reset_board(Board& board):             # <<<<<<<<<<<<<<
 *     board.current = 1
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("header.reset_board", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "cyrand.pxd":8
 * cpdef srand()
 * 
 * cdef inline float random():             # <<<<<<<<<<<<<<
 *     return <float> rand() / <float> (RAND_MAX + 1)
 * 
 */

static CYTHON_INLINE float __pyx_f_6cyrand_random(void) {
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  __Pyx_RefNannySetupContext("random", 0);

  /* "cyrand.pxd":9
 * 
 * cdef inline float random():
 *     return <float> rand() / <float> (RAND_MAX + 1)             # <<<<<<<<<<<<<<
 * 
 * cdef int randint(int)
 */
  __pyx_t_1 = ((float)rand());
  __pyx_t_2 = ((float)(RAND_MAX + 1));
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 9, __pyx_L1_error)
  }
  __pyx_r = (__pyx_t_1 / __pyx_t_2);
  goto __pyx_L0;

  /* "cyrand.pxd":8
 * cpdef srand()
 * 
 * cdef inline float random():             # <<<<<<<<<<<<<<
 *     return <float> rand() / <float> (RAND_MAX + 1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyrand.random", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyrand.pxd":13
 * cdef int randint(int)
 * 
 * cdef inline int randi(int irange):  # faster version for randint, works for range > 0, fragile             # <<<<<<<<<<<<<<
 *     return rand() % irange
 * 
 */

static CYTHON_INLINE int __pyx_f_6cyrand_randi(int __pyx_v_irange) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("randi", 0);

  /* "cyrand.pxd":14
 * 
 * cdef inline int randi(int irange):  # faster version for randint, works for range > 0, fragile
 *     return rand() % irange             # <<<<<<<<<<<<<<
 * 
 * cdef inline float randf(float frange):
 */
  __pyx_t_1 = rand();
  if (unlikely(__pyx_v_irange == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(2, 14, __pyx_L1_error)
  }
  __pyx_r = __Pyx_mod_int(__pyx_t_1, __pyx_v_irange);
  goto __pyx_L0;

  /* "cyrand.pxd":13
 * cdef int randint(int)
 * 
 * cdef inline int randi(int irange):  # faster version for randint, works for range > 0, fragile             # <<<<<<<<<<<<<<
 *     return rand() % irange
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyrand.randi", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyrand.pxd":16
 *     return rand() % irange
 * 
 * cdef inline float randf(float frange):             # <<<<<<<<<<<<<<
 *     return <float> rand() / <float> (RAND_MAX + 1) * frange
 */

static CYTHON_INLINE float __pyx_f_6cyrand_randf(float __pyx_v_frange) {
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  __Pyx_RefNannySetupContext("randf", 0);

  /* "cyrand.pxd":17
 * 
 * cdef inline float randf(float frange):
 *     return <float> rand() / <float> (RAND_MAX + 1) * frange             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = ((float)rand());
  __pyx_t_2 = ((float)(RAND_MAX + 1));
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 17, __pyx_L1_error)
  }
  __pyx_r = ((__pyx_t_1 / __pyx_t_2) * __pyx_v_frange);
  goto __pyx_L0;

  /* "cyrand.pxd":16
 *     return rand() % irange
 * 
 * cdef inline float randf(float frange):             # <<<<<<<<<<<<<<
 *     return <float> rand() / <float> (RAND_MAX + 1) * frange
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyrand.randf", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(3, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 51, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 51, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) __PYX_ERR(3, 52, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::vector<int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<int> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<int>  __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___", 0);

  /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 52, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 52, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 52, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 52, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":53
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_int(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 53, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":54
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "Pieces",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_Aquarius, __pyx_k_Aquarius, sizeof(__pyx_k_Aquarius), 0, 0, 1, 1},
  {&__pyx_n_s_Champion, __pyx_k_Champion, sizeof(__pyx_k_Champion), 0, 0, 1, 1},
  {&__pyx_n_s_Comet, __pyx_k_Comet, sizeof(__pyx_k_Comet), 0, 0, 1, 1},
  {&__pyx_n_s_Greed, __pyx_k_Greed, sizeof(__pyx_k_Greed), 0, 0, 1, 1},
  {&__pyx_kp_s_Greed_2, __pyx_k_Greed_2, sizeof(__pyx_k_Greed_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Greed_3, __pyx_k_Greed_3, sizeof(__pyx_k_Greed_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Greed_4, __pyx_k_Greed_4, sizeof(__pyx_k_Greed_4), 0, 0, 1, 0},
  {&__pyx_n_b_King, __pyx_k_King, sizeof(__pyx_k_King), 0, 0, 0, 1},
  {&__pyx_n_s_King, __pyx_k_King, sizeof(__pyx_k_King), 0, 0, 1, 1},
  {&__pyx_n_s_Militia, __pyx_k_Militia, sizeof(__pyx_k_Militia), 0, 0, 1, 1},
  {&__pyx_kp_s_Militia_2, __pyx_k_Militia_2, sizeof(__pyx_k_Militia_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Militia_3, __pyx_k_Militia_3, sizeof(__pyx_k_Militia_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Militia_4, __pyx_k_Militia_4, sizeof(__pyx_k_Militia_4), 0, 0, 1, 0},
  {&__pyx_n_s_Minion, __pyx_k_Minion, sizeof(__pyx_k_Minion), 0, 0, 1, 1},
  {&__pyx_n_s_PieceLib, __pyx_k_PieceLib, sizeof(__pyx_k_PieceLib), 0, 0, 1, 1},
  {&__pyx_n_s_Reaver, __pyx_k_Reaver, sizeof(__pyx_k_Reaver), 0, 0, 1, 1},
  {&__pyx_n_s_RoyalGuard, __pyx_k_RoyalGuard, sizeof(__pyx_k_RoyalGuard), 0, 0, 1, 1},
  {&__pyx_kp_s_Sapling_Common_1_Status_Immune, __pyx_k_Sapling_Common_1_Status_Immune, sizeof(__pyx_k_Sapling_Common_1_Status_Immune), 0, 0, 1, 0},
  {&__pyx_kp_s_Tree_Common_4_Status_Immune, __pyx_k_Tree_Common_4_Status_Immune, sizeof(__pyx_k_Tree_Common_4_Status_Immune), 0, 0, 1, 0},
  {&__pyx_n_s_Vampire, __pyx_k_Vampire, sizeof(__pyx_k_Vampire), 0, 0, 1, 1},
  {&__pyx_kp_s_Vampire_2, __pyx_k_Vampire_2, sizeof(__pyx_k_Vampire_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Vampire_3, __pyx_k_Vampire_3, sizeof(__pyx_k_Vampire_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Vampire_4, __pyx_k_Vampire_4, sizeof(__pyx_k_Vampire_4), 0, 0, 1, 0},
  {&__pyx_n_s_action, __pyx_k_action, sizeof(__pyx_k_action), 0, 0, 1, 1},
  {&__pyx_n_s_cost, __pyx_k_cost, sizeof(__pyx_k_cost), 0, 0, 1, 1},
  {&__pyx_kp_s_d_s, __pyx_k_d_s, sizeof(__pyx_k_d_s), 0, 0, 1, 0},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_index_of_King, __pyx_k_index_of_King, sizeof(__pyx_k_index_of_King), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_not_blocking, __pyx_k_not_blocking, sizeof(__pyx_k_not_blocking), 0, 0, 1, 1},
  {&__pyx_n_s_piece_index, __pyx_k_piece_index, sizeof(__pyx_k_piece_index), 0, 0, 1, 1},
  {&__pyx_n_s_piece_list, __pyx_k_piece_list, sizeof(__pyx_k_piece_list), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_kp_s_promotes_to_d_s, __pyx_k_promotes_to_d_s, sizeof(__pyx_k_promotes_to_d_s), 0, 0, 1, 0},
  {&__pyx_n_s_promotion, __pyx_k_promotion, sizeof(__pyx_k_promotion), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_capi, __pyx_k_pyx_capi, sizeof(__pyx_k_pyx_capi), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 50, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initPieces(void); /*proto*/
PyMODINIT_FUNC initPieces(void)
#else
PyMODINIT_FUNC PyInit_Pieces(void); /*proto*/
PyMODINIT_FUNC PyInit_Pieces(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_Pieces(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("Pieces", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_Pieces) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "Pieces")) {
      if (unlikely(PyDict_SetItemString(modules, "Pieces", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  if (__Pyx_ExportVoidPtr(__pyx_n_s_piece_list, (void *)&__pyx_v_6Pieces_piece_list, "std::vector<__pyx_t_6header_Piece> ") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportVoidPtr(__pyx_n_s_piece_index, (void *)&__pyx_v_6Pieces_piece_index, "std::map<std::string,int> ") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportVoidPtr(__pyx_n_s_index_of_King, (void *)&__pyx_v_6Pieces_index_of_King, "int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_11PieceReader_Piece = __Pyx_ImportType("PieceReader", "Piece", sizeof(struct __pyx_obj_11PieceReader_Piece), 1); if (unlikely(!__pyx_ptype_11PieceReader_Piece)) __PYX_ERR(4, 8, __pyx_L1_error)
  __pyx_vtabptr_11PieceReader_Piece = (struct __pyx_vtabstruct_11PieceReader_Piece*)__Pyx_GetVtable(__pyx_ptype_11PieceReader_Piece->tp_dict); if (unlikely(!__pyx_vtabptr_11PieceReader_Piece)) __PYX_ERR(4, 8, __pyx_L1_error)
  __pyx_ptype_11PieceReader_PieceReader = __Pyx_ImportType("PieceReader", "PieceReader", sizeof(struct __pyx_obj_11PieceReader_PieceReader), 1); if (unlikely(!__pyx_ptype_11PieceReader_PieceReader)) __PYX_ERR(4, 18, __pyx_L1_error)
  __pyx_vtabptr_11PieceReader_PieceReader = (struct __pyx_vtabstruct_11PieceReader_PieceReader*)__Pyx_GetVtable(__pyx_ptype_11PieceReader_PieceReader->tp_dict); if (unlikely(!__pyx_vtabptr_11PieceReader_PieceReader)) __PYX_ERR(4, 18, __pyx_L1_error)
  /*--- Variable import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("Actions"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "actions", (void **)&__pyx_vp_7Actions_actions, "std::vector<__pyx_t_6header_Action> ") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Function import code ---*/
  __pyx_t_2 = __Pyx_ImportModule("cyrand"); if (!__pyx_t_2) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_2, "srand", (void (**)(void))&__pyx_f_6cyrand_srand, "PyObject *(int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_ImportModule("Actions"); if (!__pyx_t_3) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_3, "move_to", (void (**)(void))&__pyx_f_7Actions_move_to, "void (__pyx_t_6header_Board &, int, int, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "Pieces.pyx":6
 * 
 * cdef vector[Piece] piece_list
 * build_piece_list(piece_list)             # <<<<<<<<<<<<<<
 * # todo: add special pieces
 * 
 */
  __pyx_f_6Pieces_build_piece_list(__pyx_v_6Pieces_piece_list, NULL);

  /* "Pieces.pyx":9
 * # todo: add special pieces
 * 
 * link_effects(piece_list)             # <<<<<<<<<<<<<<
 * 
 * cdef map[string, int] piece_index
 */
  __pyx_f_6Pieces_link_effects(__pyx_v_6Pieces_piece_list);

  /* "Pieces.pyx":12
 * 
 * cdef map[string, int] piece_index
 * build_piece_index(piece_index, piece_list)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_f_6Pieces_build_piece_index(__pyx_v_6Pieces_piece_index, __pyx_v_6Pieces_piece_list);

  /* "Pieces.pyx":15
 * 
 * 
 * cdef int index_of_King = piece_index[b'King']             # <<<<<<<<<<<<<<
 * 
 * # cpdef int random_piece(int be_minion=0, int be_champion=0):
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_King); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_6Pieces_index_of_King = (__pyx_v_6Pieces_piece_index[__pyx_t_4]);

  /* "Pieces.pyx":1
 * # cython: python 3.5             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref, preincrement as inc, address as addr
 * from Pieces cimport *
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init Pieces", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init Pieces");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* BytesEquals */
    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
    static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyErrFetchRestore */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
    static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetItemInt */
    static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* decode_c_bytes */
    static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* None */
    static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* GetVTable */
    static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Print */
    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* PrintOne */
    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* VoidPtrExport */
    static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig) {
    PyObject *d;
    PyObject *cobj = 0;
    d = PyDict_GetItem(__pyx_d, __pyx_n_s_pyx_capi);
    Py_XINCREF(d);
    if (!d) {
        d = PyDict_New();
        if (!d)
            goto bad;
        if (__Pyx_PyObject_SetAttrStr(__pyx_m, __pyx_n_s_pyx_capi, d) < 0)
            goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItem(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* ModuleImport */
    #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
    #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* VoidPtrImport */
    #ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
    #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
