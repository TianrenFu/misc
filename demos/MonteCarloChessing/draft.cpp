/* Generated by Cython 0.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__draft
#define __PYX_HAVE_API__draft
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include "string.h"
#include <string>
#include <algorithm>
#include "stdlib.h"
#include "stddef.h"
#include "time.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "draft.pyx",
  "header.pxd",
  "cyrand.pxd",
  "stringsource",
  "PieceReader.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_11PieceReader_Piece;
struct __pyx_obj_11PieceReader_PieceReader;
struct __pyx_opt_args_11PieceReader_5Piece_new_matrix;

/* "PieceReader.pxd":13
 *     cpdef public list action
 * 
 *     cpdef new_matrix(cls, size=?)             # <<<<<<<<<<<<<<
 * 
 *     cpdef duplicate_matrix(cls, model)
 */
struct __pyx_opt_args_11PieceReader_5Piece_new_matrix {
  int __pyx_n;
  PyObject *size;
};
struct __pyx_t_6header_ActionAttribute;
typedef struct __pyx_t_6header_ActionAttribute __pyx_t_6header_ActionAttribute;
struct __pyx_t_6header_Action;
typedef struct __pyx_t_6header_Action __pyx_t_6header_Action;
struct __pyx_t_6header_Move;
typedef struct __pyx_t_6header_Move __pyx_t_6header_Move;
struct __pyx_t_6header_Piece;
typedef struct __pyx_t_6header_Piece __pyx_t_6header_Piece;
struct __pyx_t_6header_Board;
typedef struct __pyx_t_6header_Board __pyx_t_6header_Board;

/* "header.pxd":15
 * from Pieces cimport *
 * 
 * cdef enum:  # const variables             # <<<<<<<<<<<<<<
 *     BOARD_SIZE = 8
 *     ACTION_MAP_SIZE = 15
 */
enum  {
  __pyx_e_6header_BOARD_SIZE = 8,
  __pyx_e_6header_ACTION_MAP_SIZE = 15,
  __pyx_e_6header_CENTRAL_POSITION = 7,
  __pyx_e_6header_MAX_VALUE = 0x8000,
  __pyx_e_6header_MAX_MOVE_NUMBER = 0x190
};

/* "header.pxd":22
 *     MAX_MOVE_NUMBER = 400
 * 
 * ctypedef vector[vector[int]] int2d             # <<<<<<<<<<<<<<
 * 
 * ctypedef void (*ActionFunction)(Board&, int, int, int, int)
 */
typedef std::vector<std::vector<int> >  __pyx_t_6header_int2d;

/* "header.pxd":24
 * ctypedef vector[vector[int]] int2d
 * 
 * ctypedef void (*ActionFunction)(Board&, int, int, int, int)             # <<<<<<<<<<<<<<
 * ctypedef int (*TargetCheckFunction)(Board&, int, int, int, int)
 * 
 */
typedef void (*__pyx_t_6header_ActionFunction)(__pyx_t_6header_Board &, int, int, int, int);

/* "header.pxd":25
 * 
 * ctypedef void (*ActionFunction)(Board&, int, int, int, int)
 * ctypedef int (*TargetCheckFunction)(Board&, int, int, int, int)             # <<<<<<<<<<<<<<
 * 
 * ctypedef struct ActionAttribute:
 */
typedef int (*__pyx_t_6header_TargetCheckFunction)(__pyx_t_6header_Board &, int, int, int, int);

/* "header.pxd":27
 * ctypedef int (*TargetCheckFunction)(Board&, int, int, int, int)
 * 
 * ctypedef struct ActionAttribute:             # <<<<<<<<<<<<<<
 *     int to_empty
 *     int to_enemy
 */
struct __pyx_t_6header_ActionAttribute {
  int to_empty;
  int to_enemy;
  int to_friend;
  int blockable;
  int additional_limit;
  __pyx_t_6header_TargetCheckFunction limit;
};

/* "header.pxd":35
 *     TargetCheckFunction limit
 * 
 * ctypedef struct Action:             # <<<<<<<<<<<<<<
 *     int handle
 *     ActionFunction cast
 */
struct __pyx_t_6header_Action {
  int handle;
  __pyx_t_6header_ActionFunction cast;
  __pyx_t_6header_ActionAttribute attr;
  std::string description;
};

/* "header.pxd":41
 *     string description
 * 
 * ctypedef struct Move:             # <<<<<<<<<<<<<<
 *     int xfrom
 *     int yfrom
 */
struct __pyx_t_6header_Move {
  int xfrom;
  int yfrom;
  int xto;
  int yto;
  int actno;
};

/* "header.pxd":48
 *     int actno
 * 
 * ctypedef struct Piece:             # <<<<<<<<<<<<<<
 *     string name
 *     int2d map
 */
struct __pyx_t_6header_Piece {
  std::string name;
  __pyx_t_6header_int2d map;
  int cost;
  int promotion;
  int minion;
  int champion;
  int not_blocking;
  int augmented;
  int augmented_actno;
  __pyx_t_6header_TargetCheckFunction augmented_check;
  int has_on_death;
  __pyx_t_6header_ActionFunction on_death;
  int has_on_kill;
  __pyx_t_6header_ActionFunction on_kill;
};

/* "header.pxd":65
 *     ActionFunction on_kill
 * 
 * ctypedef struct Board:             # <<<<<<<<<<<<<<
 *     int2d pieces
 *     int2d ownerships  # 1/2 for each player, 0 for empty
 */
struct __pyx_t_6header_Board {
  __pyx_t_6header_int2d pieces;
  __pyx_t_6header_int2d ownerships;
  __pyx_t_6header_int2d costs;
  __pyx_t_6header_int2d frozen;
  __pyx_t_6header_int2d poison;
  __pyx_t_6header_int2d thunder;
  int current;
  int moral[3];
  int king[3];
};
struct __pyx_opt_args_5draft_find_good_moves;
struct __pyx_opt_args_5draft_simulate;
struct __pyx_opt_args_5draft_random_piece;

/* "draft.pyx":150
 * 
 * #region cdef float find_good_moves(Board& board, , int player)
 * cdef void find_good_moves(Board& board, vector[pair[int, float]]& answer, vector[Move]& possible_moves, int player, int candidates=3):             # <<<<<<<<<<<<<<
 *     cdef Board after
 *     cdef Move move
 */
struct __pyx_opt_args_5draft_find_good_moves {
  int __pyx_n;
  int candidates;
};

/* "draft.pyx":348
 * 
 * #region cpdef void simulate(str player1_setup, str player2_setup, int number_of_games, int with_frequency=0)
 * cpdef float simulate(str player1_setup, str player2_setup, int number_of_games, int with_frequency=0, int to_display=1):             # <<<<<<<<<<<<<<
 *     cdef int i, p1_wins = 0
 *     cdef float p1_rate
 */
struct __pyx_opt_args_5draft_simulate {
  int __pyx_n;
  int with_frequency;
  int to_display;
};

/* "draft.pyx":373
 * 
 * #region FOOBAR
 * cpdef int random_piece(int be_minion=0, int be_champion=0):             # <<<<<<<<<<<<<<
 *     if be_minion and be_champion:
 *         return 0
 */
struct __pyx_opt_args_5draft_random_piece {
  int __pyx_n;
  int be_minion;
  int be_champion;
};

/* "PieceReader.pxd":8
 * 
 * 
 * cdef class Piece:             # <<<<<<<<<<<<<<
 *     cpdef public str name, class_name, type, package, rarity, passive, promotion
 *     cpdef public int cost, tier, not_blocking
 */
struct __pyx_obj_11PieceReader_Piece {
  PyObject_HEAD
  struct __pyx_vtabstruct_11PieceReader_Piece *__pyx_vtab;
  PyObject *name;
  PyObject *class_name;
  PyObject *type;
  PyObject *package;
  PyObject *rarity;
  PyObject *passive;
  PyObject *promotion;
  int cost;
  int tier;
  int not_blocking;
  PyObject *action;
};


/* "PieceReader.pxd":18
 * 
 * 
 * cdef class PieceReader:             # <<<<<<<<<<<<<<
 *     cpdef public list pieces
 *     cpdef public object files
 */
struct __pyx_obj_11PieceReader_PieceReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_11PieceReader_PieceReader *__pyx_vtab;
  PyObject *pieces;
  PyObject *files;
};



/* "PieceReader.pxd":8
 * 
 * 
 * cdef class Piece:             # <<<<<<<<<<<<<<
 *     cpdef public str name, class_name, type, package, rarity, passive, promotion
 *     cpdef public int cost, tier, not_blocking
 */

struct __pyx_vtabstruct_11PieceReader_Piece {
  PyObject *(*new_matrix)(struct __pyx_obj_11PieceReader_Piece *, int __pyx_skip_dispatch, struct __pyx_opt_args_11PieceReader_5Piece_new_matrix *__pyx_optional_args);
  PyObject *(*duplicate_matrix)(struct __pyx_obj_11PieceReader_Piece *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_11PieceReader_Piece *__pyx_vtabptr_11PieceReader_Piece;


/* "PieceReader.pxd":18
 * 
 * 
 * cdef class PieceReader:             # <<<<<<<<<<<<<<
 *     cpdef public list pieces
 *     cpdef public object files
 */

struct __pyx_vtabstruct_11PieceReader_PieceReader {
  PyObject *(*get_file_list)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*read_file)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*link_promotions)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*read_actions)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*resolve_lable)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*name_plus_tier)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*is_piece_calculatable)(struct __pyx_obj_11PieceReader_PieceReader *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_11PieceReader_PieceReader *__pyx_vtabptr_11PieceReader_PieceReader;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* None.proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* None.proto */
static CYTHON_INLINE int __Pyx_mod_int(int, int);

/* ListCompAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.algorithm' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stddef' */

/* Module declarations from 'libc.time' */

/* Module declarations from 'cyrand' */
static PyObject *(*__pyx_f_6cyrand_srand)(int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE float __pyx_f_6cyrand_random(void); /*proto*/
static CYTHON_INLINE int __pyx_f_6cyrand_randi(int); /*proto*/
static CYTHON_INLINE float __pyx_f_6cyrand_randf(float); /*proto*/

/* Module declarations from 'PieceReader' */
static PyTypeObject *__pyx_ptype_11PieceReader_Piece = 0;
static PyTypeObject *__pyx_ptype_11PieceReader_PieceReader = 0;

/* Module declarations from 'Actions' */
static std::vector<__pyx_t_6header_Action>  *__pyx_vp_7Actions_actions = 0;
#define __pyx_v_7Actions_actions (*__pyx_vp_7Actions_actions)
static int (*__pyx_f_7Actions_can_target)(__pyx_t_6header_Board &, int, int, int, int, int); /*proto*/

/* Module declarations from 'Pieces' */
static std::vector<__pyx_t_6header_Piece>  *__pyx_vp_6Pieces_piece_list = 0;
#define __pyx_v_6Pieces_piece_list (*__pyx_vp_6Pieces_piece_list)
static std::map<std::string,int>  *__pyx_vp_6Pieces_piece_index = 0;
#define __pyx_v_6Pieces_piece_index (*__pyx_vp_6Pieces_piece_index)
static int *__pyx_vp_6Pieces_index_of_King = 0;
#define __pyx_v_6Pieces_index_of_King (*__pyx_vp_6Pieces_index_of_King)

/* Module declarations from 'header' */
static CYTHON_INLINE int __pyx_f_6header_enemy_player(int); /*proto*/
static CYTHON_INLINE void __pyx_f_6header_deepcopy_int2d(__pyx_t_6header_int2d &, __pyx_t_6header_int2d &); /*proto*/
static CYTHON_INLINE void __pyx_f_6header_deepcopy_board(__pyx_t_6header_Board &, __pyx_t_6header_Board &); /*proto*/
static CYTHON_INLINE void __pyx_f_6header_reset_board(__pyx_t_6header_Board &); /*proto*/

/* Module declarations from 'draft' */
static float __pyx_f_5draft_evaluate_board(__pyx_t_6header_Board &, int); /*proto*/
static void __pyx_f_5draft_find_possible_moves(__pyx_t_6header_Board &, std::vector<__pyx_t_6header_Move>  &, int); /*proto*/
static int __pyx_f_5draft_find_possible_move_count(__pyx_t_6header_Board &, int); /*proto*/
static float __pyx_f_5draft_find_best_move(__pyx_t_6header_Board &, __pyx_t_6header_Move &, int); /*proto*/
static void __pyx_f_5draft_find_good_moves(__pyx_t_6header_Board &, std::vector<std::pair<int,float> >  &, std::vector<__pyx_t_6header_Move>  &, int, struct __pyx_opt_args_5draft_find_good_moves *__pyx_optional_args); /*proto*/
static bool __pyx_f_5draft_cmp_freq_pair_rev(std::pair<int,float> , std::pair<int,float> ); /*proto*/
static int __pyx_f_5draft_random_with_frequency(std::vector<std::pair<int,float> >  &); /*proto*/
static void __pyx_f_5draft_build_board(__pyx_t_6header_Board &, std::vector<__pyx_t_6header_Piece>  &, PyObject *, PyObject *); /*proto*/
static void __pyx_f_5draft_turn_pass(__pyx_t_6header_Board &); /*proto*/
static int __pyx_f_5draft_simulate_once_with_frequency(__pyx_t_6header_Board &); /*proto*/
static int __pyx_f_5draft_simulate_once(__pyx_t_6header_Board &); /*proto*/
static float __pyx_f_5draft_simulate(PyObject *, PyObject *, int, int __pyx_skip_dispatch, struct __pyx_opt_args_5draft_simulate *__pyx_optional_args); /*proto*/
static int __pyx_f_5draft_random_piece(int __pyx_skip_dispatch, struct __pyx_opt_args_5draft_random_piece *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_5draft_to_piece(int, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_5draft_to_piece_cost(int, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_5draft_to_piece_no(PyObject *, int __pyx_skip_dispatch); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const std::vector<std::vector<int> >  &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "draft"
int __pyx_module_is_main_draft = 0;

/* Implementation of 'draft' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_[] = ";";
static const char __pyx_k__3[] = ",";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_xto[] = "xto";
static const char __pyx_k_yto[] = "yto";
static const char __pyx_k_cost[] = "cost";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_actno[] = "actno";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_xfrom[] = "xfrom";
static const char __pyx_k_yfrom[] = "yfrom";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_pprint[] = "pprint";
static const char __pyx_k_be_minion[] = "be_minion";
static const char __pyx_k_moral_d_d[] = "\nmoral = [%d]:[%d]";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_to_display[] = "to_display";
static const char __pyx_k_be_champion[] = "be_champion";
static const char __pyx_k_d_completed[] = "%d%% completed...";
static const char __pyx_k_100_completed[] = "100% completed...";
static const char __pyx_k_player1_setup[] = "player1_setup";
static const char __pyx_k_player2_setup[] = "player2_setup";
static const char __pyx_k_with_frequency[] = "with_frequency";
static const char __pyx_k_number_of_games[] = "number_of_games";
static const char __pyx_k_Player_1_has_a_Win_of_1f_wins_d[] = "Player 1 has a Win%% of [%.1f%%] (wins %d times out of %d games).";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_s_100_completed;
static PyObject *__pyx_kp_s_Player_1_has_a_Win_of_1f_wins_d;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_n_s_actno;
static PyObject *__pyx_n_s_be_champion;
static PyObject *__pyx_n_s_be_minion;
static PyObject *__pyx_n_s_cost;
static PyObject *__pyx_kp_s_d_completed;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_s_moral_d_d;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_number_of_games;
static PyObject *__pyx_n_s_player1_setup;
static PyObject *__pyx_n_s_player2_setup;
static PyObject *__pyx_n_s_pprint;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_display;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_with_frequency;
static PyObject *__pyx_n_s_xfrom;
static PyObject *__pyx_n_s_xto;
static PyObject *__pyx_n_s_yfrom;
static PyObject *__pyx_n_s_yto;
static PyObject *__pyx_pf_5draft_simulate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_player1_setup, PyObject *__pyx_v_player2_setup, int __pyx_v_number_of_games, int __pyx_v_with_frequency, int __pyx_v_to_display); /* proto */
static PyObject *__pyx_pf_5draft_2random_piece(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_be_minion, int __pyx_v_be_champion); /* proto */
static PyObject *__pyx_pf_5draft_4to_piece(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_num); /* proto */
static PyObject *__pyx_pf_5draft_6to_piece_cost(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_num); /* proto */
static PyObject *__pyx_pf_5draft_8to_piece_no(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_int_45;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;

/* "draft.pyx":19
 * 
 * #region cdef float evaluate_board(Board& board, int player)
 * cdef float evaluate_board(Board& board, int player):             # <<<<<<<<<<<<<<
 *     cdef float e = <float> find_possible_move_count(board, enemy_player(player))
 *     return <float> find_possible_move_count(board, player) / e if e != 0. else MAX_VALUE
 */

static float __pyx_f_5draft_evaluate_board(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_player) {
  float __pyx_v_e;
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  __Pyx_RefNannySetupContext("evaluate_board", 0);

  /* "draft.pyx":20
 * #region cdef float evaluate_board(Board& board, int player)
 * cdef float evaluate_board(Board& board, int player):
 *     cdef float e = <float> find_possible_move_count(board, enemy_player(player))             # <<<<<<<<<<<<<<
 *     return <float> find_possible_move_count(board, player) / e if e != 0. else MAX_VALUE
 * #endregion
 */
  __pyx_v_e = ((float)__pyx_f_5draft_find_possible_move_count(__pyx_v_board, __pyx_f_6header_enemy_player(__pyx_v_player)));

  /* "draft.pyx":21
 * cdef float evaluate_board(Board& board, int player):
 *     cdef float e = <float> find_possible_move_count(board, enemy_player(player))
 *     return <float> find_possible_move_count(board, player) / e if e != 0. else MAX_VALUE             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
  if (((__pyx_v_e != 0.) != 0)) {
    __pyx_t_2 = ((float)__pyx_f_5draft_find_possible_move_count(__pyx_v_board, __pyx_v_player));
    if (unlikely(__pyx_v_e == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 21, __pyx_L1_error)
    }
    __pyx_t_1 = (__pyx_t_2 / __pyx_v_e);
  } else {
    __pyx_t_1 = __pyx_e_6header_MAX_VALUE;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "draft.pyx":19
 * 
 * #region cdef float evaluate_board(Board& board, int player)
 * cdef float evaluate_board(Board& board, int player):             # <<<<<<<<<<<<<<
 *     cdef float e = <float> find_possible_move_count(board, enemy_player(player))
 *     return <float> find_possible_move_count(board, player) / e if e != 0. else MAX_VALUE
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("draft.evaluate_board", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":26
 * 
 * #region cdef void find_possible_moves(Board& board, vector[Move]& vec, int player)
 * cdef void find_possible_moves(Board& board, vector[Move]& vec, int player):             # <<<<<<<<<<<<<<
 *     cdef int xfrom, yfrom, xto, yto, actno, pfrom
 *     cdef Piece* piece
 */

static void __pyx_f_5draft_find_possible_moves(__pyx_t_6header_Board &__pyx_v_board, std::vector<__pyx_t_6header_Move>  &__pyx_v_vec, int __pyx_v_player) {
  int __pyx_v_xfrom;
  int __pyx_v_yfrom;
  int __pyx_v_xto;
  int __pyx_v_yto;
  int __pyx_v_actno;
  int __pyx_v_pfrom;
  __pyx_t_6header_Piece *__pyx_v_piece;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  __pyx_t_6header_Move __pyx_t_11;
  __Pyx_RefNannySetupContext("find_possible_moves", 0);

  /* "draft.pyx":29
 *     cdef int xfrom, yfrom, xto, yto, actno, pfrom
 *     cdef Piece* piece
 *     vec.clear()             # <<<<<<<<<<<<<<
 *     for xfrom in range(BOARD_SIZE):
 *         for yfrom in range(BOARD_SIZE):
 */
  __pyx_v_vec.clear();

  /* "draft.pyx":30
 *     cdef Piece* piece
 *     vec.clear()
 *     for xfrom in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *         for yfrom in range(BOARD_SIZE):
 *             if board.ownerships[xfrom][yfrom] != player:
 */
  __pyx_t_1 = __pyx_e_6header_BOARD_SIZE;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_xfrom = __pyx_t_2;

    /* "draft.pyx":31
 *     vec.clear()
 *     for xfrom in range(BOARD_SIZE):
 *         for yfrom in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *             if board.ownerships[xfrom][yfrom] != player:
 *                 continue  # only current player can move pieces
 */
    __pyx_t_3 = __pyx_e_6header_BOARD_SIZE;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_yfrom = __pyx_t_4;

      /* "draft.pyx":32
 *     for xfrom in range(BOARD_SIZE):
 *         for yfrom in range(BOARD_SIZE):
 *             if board.ownerships[xfrom][yfrom] != player:             # <<<<<<<<<<<<<<
 *                 continue  # only current player can move pieces
 *             pfrom = board.pieces[xfrom][yfrom]
 */
      __pyx_t_5 = ((((__pyx_v_board.ownerships[__pyx_v_xfrom])[__pyx_v_yfrom]) != __pyx_v_player) != 0);
      if (__pyx_t_5) {

        /* "draft.pyx":33
 *         for yfrom in range(BOARD_SIZE):
 *             if board.ownerships[xfrom][yfrom] != player:
 *                 continue  # only current player can move pieces             # <<<<<<<<<<<<<<
 *             pfrom = board.pieces[xfrom][yfrom]
 *             if pfrom:
 */
        goto __pyx_L5_continue;

        /* "draft.pyx":32
 *     for xfrom in range(BOARD_SIZE):
 *         for yfrom in range(BOARD_SIZE):
 *             if board.ownerships[xfrom][yfrom] != player:             # <<<<<<<<<<<<<<
 *                 continue  # only current player can move pieces
 *             pfrom = board.pieces[xfrom][yfrom]
 */
      }

      /* "draft.pyx":34
 *             if board.ownerships[xfrom][yfrom] != player:
 *                 continue  # only current player can move pieces
 *             pfrom = board.pieces[xfrom][yfrom]             # <<<<<<<<<<<<<<
 *             if pfrom:
 *                 piece = addr(piece_list[pfrom])
 */
      __pyx_v_pfrom = ((__pyx_v_board.pieces[__pyx_v_xfrom])[__pyx_v_yfrom]);

      /* "draft.pyx":35
 *                 continue  # only current player can move pieces
 *             pfrom = board.pieces[xfrom][yfrom]
 *             if pfrom:             # <<<<<<<<<<<<<<
 *                 piece = addr(piece_list[pfrom])
 *                 if piece.augmented and piece.augmented_actno:
 */
      __pyx_t_5 = (__pyx_v_pfrom != 0);
      if (__pyx_t_5) {

        /* "draft.pyx":36
 *             pfrom = board.pieces[xfrom][yfrom]
 *             if pfrom:
 *                 piece = addr(piece_list[pfrom])             # <<<<<<<<<<<<<<
 *                 if piece.augmented and piece.augmented_actno:
 *                     for xto in range(BOARD_SIZE):
 */
        __pyx_v_piece = (&(__pyx_v_6Pieces_piece_list[__pyx_v_pfrom]));

        /* "draft.pyx":37
 *             if pfrom:
 *                 piece = addr(piece_list[pfrom])
 *                 if piece.augmented and piece.augmented_actno:             # <<<<<<<<<<<<<<
 *                     for xto in range(BOARD_SIZE):
 *                         for yto in range(BOARD_SIZE):
 */
        __pyx_t_6 = (__pyx_v_piece->augmented != 0);
        if (__pyx_t_6) {
        } else {
          __pyx_t_5 = __pyx_t_6;
          goto __pyx_L10_bool_binop_done;
        }
        __pyx_t_6 = (__pyx_v_piece->augmented_actno != 0);
        __pyx_t_5 = __pyx_t_6;
        __pyx_L10_bool_binop_done:;
        if (__pyx_t_5) {

          /* "draft.pyx":38
 *                 piece = addr(piece_list[pfrom])
 *                 if piece.augmented and piece.augmented_actno:
 *                     for xto in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *                         for yto in range(BOARD_SIZE):
 *                             if player == 1:
 */
          __pyx_t_7 = __pyx_e_6header_BOARD_SIZE;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_xto = __pyx_t_8;

            /* "draft.pyx":39
 *                 if piece.augmented and piece.augmented_actno:
 *                     for xto in range(BOARD_SIZE):
 *                         for yto in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *                             if player == 1:
 *                                 actno = piece.map[xto - xfrom + CENTRAL_POSITION][yto - yfrom + CENTRAL_POSITION]
 */
            __pyx_t_9 = __pyx_e_6header_BOARD_SIZE;
            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
              __pyx_v_yto = __pyx_t_10;

              /* "draft.pyx":40
 *                     for xto in range(BOARD_SIZE):
 *                         for yto in range(BOARD_SIZE):
 *                             if player == 1:             # <<<<<<<<<<<<<<
 *                                 actno = piece.map[xto - xfrom + CENTRAL_POSITION][yto - yfrom + CENTRAL_POSITION]
 *                             else:
 */
              __pyx_t_5 = ((__pyx_v_player == 1) != 0);
              if (__pyx_t_5) {

                /* "draft.pyx":41
 *                         for yto in range(BOARD_SIZE):
 *                             if player == 1:
 *                                 actno = piece.map[xto - xfrom + CENTRAL_POSITION][yto - yfrom + CENTRAL_POSITION]             # <<<<<<<<<<<<<<
 *                             else:
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]
 */
                __pyx_v_actno = ((__pyx_v_piece->map[((__pyx_v_xto - __pyx_v_xfrom) + __pyx_e_6header_CENTRAL_POSITION)])[((__pyx_v_yto - __pyx_v_yfrom) + __pyx_e_6header_CENTRAL_POSITION)]);

                /* "draft.pyx":40
 *                     for xto in range(BOARD_SIZE):
 *                         for yto in range(BOARD_SIZE):
 *                             if player == 1:             # <<<<<<<<<<<<<<
 *                                 actno = piece.map[xto - xfrom + CENTRAL_POSITION][yto - yfrom + CENTRAL_POSITION]
 *                             else:
 */
                goto __pyx_L16;
              }

              /* "draft.pyx":43
 *                                 actno = piece.map[xto - xfrom + CENTRAL_POSITION][yto - yfrom + CENTRAL_POSITION]
 *                             else:
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]             # <<<<<<<<<<<<<<
 *                             if actno and can_target(board, xfrom, yfrom, xto, yto, actno):
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, actno))
 */
              /*else*/ {
                __pyx_v_actno = ((__pyx_v_piece->map[((__pyx_v_xfrom - __pyx_v_xto) + __pyx_e_6header_CENTRAL_POSITION)])[((__pyx_v_yfrom - __pyx_v_yto) + __pyx_e_6header_CENTRAL_POSITION)]);
              }
              __pyx_L16:;

              /* "draft.pyx":44
 *                             else:
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]
 *                             if actno and can_target(board, xfrom, yfrom, xto, yto, actno):             # <<<<<<<<<<<<<<
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, actno))
 *                             elif piece.augmented_check(board, xfrom, yfrom, xto, yto):
 */
              __pyx_t_6 = (__pyx_v_actno != 0);
              if (__pyx_t_6) {
              } else {
                __pyx_t_5 = __pyx_t_6;
                goto __pyx_L18_bool_binop_done;
              }
              __pyx_t_6 = (__pyx_f_7Actions_can_target(__pyx_v_board, __pyx_v_xfrom, __pyx_v_yfrom, __pyx_v_xto, __pyx_v_yto, __pyx_v_actno) != 0);
              __pyx_t_5 = __pyx_t_6;
              __pyx_L18_bool_binop_done:;
              if (__pyx_t_5) {

                /* "draft.pyx":45
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]
 *                             if actno and can_target(board, xfrom, yfrom, xto, yto, actno):
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, actno))             # <<<<<<<<<<<<<<
 *                             elif piece.augmented_check(board, xfrom, yfrom, xto, yto):
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, piece.augmented_actno))
 */
                __pyx_t_11.xfrom = __pyx_v_xfrom;
                __pyx_t_11.yfrom = __pyx_v_yfrom;
                __pyx_t_11.xto = __pyx_v_xto;
                __pyx_t_11.yto = __pyx_v_yto;
                __pyx_t_11.actno = __pyx_v_actno;
                try {
                  __pyx_v_vec.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 45, __pyx_L1_error)
                }

                /* "draft.pyx":44
 *                             else:
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]
 *                             if actno and can_target(board, xfrom, yfrom, xto, yto, actno):             # <<<<<<<<<<<<<<
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, actno))
 *                             elif piece.augmented_check(board, xfrom, yfrom, xto, yto):
 */
                goto __pyx_L17;
              }

              /* "draft.pyx":46
 *                             if actno and can_target(board, xfrom, yfrom, xto, yto, actno):
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, actno))
 *                             elif piece.augmented_check(board, xfrom, yfrom, xto, yto):             # <<<<<<<<<<<<<<
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, piece.augmented_actno))
 *                 else:
 */
              __pyx_t_5 = (__pyx_v_piece->augmented_check(__pyx_v_board, __pyx_v_xfrom, __pyx_v_yfrom, __pyx_v_xto, __pyx_v_yto) != 0);
              if (__pyx_t_5) {

                /* "draft.pyx":47
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, actno))
 *                             elif piece.augmented_check(board, xfrom, yfrom, xto, yto):
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, piece.augmented_actno))             # <<<<<<<<<<<<<<
 *                 else:
 *                     for xto in range(BOARD_SIZE):
 */
                __pyx_t_11.xfrom = __pyx_v_xfrom;
                __pyx_t_11.yfrom = __pyx_v_yfrom;
                __pyx_t_11.xto = __pyx_v_xto;
                __pyx_t_11.yto = __pyx_v_yto;
                __pyx_t_11.actno = __pyx_v_piece->augmented_actno;
                try {
                  __pyx_v_vec.push_back(__pyx_t_11);
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 47, __pyx_L1_error)
                }

                /* "draft.pyx":46
 *                             if actno and can_target(board, xfrom, yfrom, xto, yto, actno):
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, actno))
 *                             elif piece.augmented_check(board, xfrom, yfrom, xto, yto):             # <<<<<<<<<<<<<<
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, piece.augmented_actno))
 *                 else:
 */
              }
              __pyx_L17:;
            }
          }

          /* "draft.pyx":37
 *             if pfrom:
 *                 piece = addr(piece_list[pfrom])
 *                 if piece.augmented and piece.augmented_actno:             # <<<<<<<<<<<<<<
 *                     for xto in range(BOARD_SIZE):
 *                         for yto in range(BOARD_SIZE):
 */
          goto __pyx_L9;
        }

        /* "draft.pyx":49
 *                                 vec.push_back(Move(xfrom, yfrom, xto, yto, piece.augmented_actno))
 *                 else:
 *                     for xto in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *                         for yto in range(BOARD_SIZE):
 *                             if player == 1:
 */
        /*else*/ {
          __pyx_t_7 = __pyx_e_6header_BOARD_SIZE;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_xto = __pyx_t_8;

            /* "draft.pyx":50
 *                 else:
 *                     for xto in range(BOARD_SIZE):
 *                         for yto in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *                             if player == 1:
 *                                 actno = piece.map[xto - xfrom + CENTRAL_POSITION][yto - yfrom + CENTRAL_POSITION]
 */
            __pyx_t_9 = __pyx_e_6header_BOARD_SIZE;
            for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
              __pyx_v_yto = __pyx_t_10;

              /* "draft.pyx":51
 *                     for xto in range(BOARD_SIZE):
 *                         for yto in range(BOARD_SIZE):
 *                             if player == 1:             # <<<<<<<<<<<<<<
 *                                 actno = piece.map[xto - xfrom + CENTRAL_POSITION][yto - yfrom + CENTRAL_POSITION]
 *                             else:
 */
              __pyx_t_5 = ((__pyx_v_player == 1) != 0);
              if (__pyx_t_5) {

                /* "draft.pyx":52
 *                         for yto in range(BOARD_SIZE):
 *                             if player == 1:
 *                                 actno = piece.map[xto - xfrom + CENTRAL_POSITION][yto - yfrom + CENTRAL_POSITION]             # <<<<<<<<<<<<<<
 *                             else:
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]
 */
                __pyx_v_actno = ((__pyx_v_piece->map[((__pyx_v_xto - __pyx_v_xfrom) + __pyx_e_6header_CENTRAL_POSITION)])[((__pyx_v_yto - __pyx_v_yfrom) + __pyx_e_6header_CENTRAL_POSITION)]);

                /* "draft.pyx":51
 *                     for xto in range(BOARD_SIZE):
 *                         for yto in range(BOARD_SIZE):
 *                             if player == 1:             # <<<<<<<<<<<<<<
 *                                 actno = piece.map[xto - xfrom + CENTRAL_POSITION][yto - yfrom + CENTRAL_POSITION]
 *                             else:
 */
                goto __pyx_L24;
              }

              /* "draft.pyx":54
 *                                 actno = piece.map[xto - xfrom + CENTRAL_POSITION][yto - yfrom + CENTRAL_POSITION]
 *                             else:
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]             # <<<<<<<<<<<<<<
 *                             if actno:
 *                                 if can_target(board, xfrom, yfrom, xto, yto, actno):
 */
              /*else*/ {
                __pyx_v_actno = ((__pyx_v_piece->map[((__pyx_v_xfrom - __pyx_v_xto) + __pyx_e_6header_CENTRAL_POSITION)])[((__pyx_v_yfrom - __pyx_v_yto) + __pyx_e_6header_CENTRAL_POSITION)]);
              }
              __pyx_L24:;

              /* "draft.pyx":55
 *                             else:
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]
 *                             if actno:             # <<<<<<<<<<<<<<
 *                                 if can_target(board, xfrom, yfrom, xto, yto, actno):
 *                                     vec.push_back(Move(xfrom, yfrom, xto, yto, actno))
 */
              __pyx_t_5 = (__pyx_v_actno != 0);
              if (__pyx_t_5) {

                /* "draft.pyx":56
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]
 *                             if actno:
 *                                 if can_target(board, xfrom, yfrom, xto, yto, actno):             # <<<<<<<<<<<<<<
 *                                     vec.push_back(Move(xfrom, yfrom, xto, yto, actno))
 * #endregion
 */
                __pyx_t_5 = (__pyx_f_7Actions_can_target(__pyx_v_board, __pyx_v_xfrom, __pyx_v_yfrom, __pyx_v_xto, __pyx_v_yto, __pyx_v_actno) != 0);
                if (__pyx_t_5) {

                  /* "draft.pyx":57
 *                             if actno:
 *                                 if can_target(board, xfrom, yfrom, xto, yto, actno):
 *                                     vec.push_back(Move(xfrom, yfrom, xto, yto, actno))             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
                  __pyx_t_11.xfrom = __pyx_v_xfrom;
                  __pyx_t_11.yfrom = __pyx_v_yfrom;
                  __pyx_t_11.xto = __pyx_v_xto;
                  __pyx_t_11.yto = __pyx_v_yto;
                  __pyx_t_11.actno = __pyx_v_actno;
                  try {
                    __pyx_v_vec.push_back(__pyx_t_11);
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 57, __pyx_L1_error)
                  }

                  /* "draft.pyx":56
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]
 *                             if actno:
 *                                 if can_target(board, xfrom, yfrom, xto, yto, actno):             # <<<<<<<<<<<<<<
 *                                     vec.push_back(Move(xfrom, yfrom, xto, yto, actno))
 * #endregion
 */
                }

                /* "draft.pyx":55
 *                             else:
 *                                 actno = piece.map[xfrom - xto + CENTRAL_POSITION][yfrom - yto + CENTRAL_POSITION]
 *                             if actno:             # <<<<<<<<<<<<<<
 *                                 if can_target(board, xfrom, yfrom, xto, yto, actno):
 *                                     vec.push_back(Move(xfrom, yfrom, xto, yto, actno))
 */
              }
            }
          }
        }
        __pyx_L9:;

        /* "draft.pyx":35
 *                 continue  # only current player can move pieces
 *             pfrom = board.pieces[xfrom][yfrom]
 *             if pfrom:             # <<<<<<<<<<<<<<
 *                 piece = addr(piece_list[pfrom])
 *                 if piece.augmented and piece.augmented_actno:
 */
      }
      __pyx_L5_continue:;
    }
  }

  /* "draft.pyx":26
 * 
 * #region cdef void find_possible_moves(Board& board, vector[Move]& vec, int player)
 * cdef void find_possible_moves(Board& board, vector[Move]& vec, int player):             # <<<<<<<<<<<<<<
 *     cdef int xfrom, yfrom, xto, yto, actno, pfrom
 *     cdef Piece* piece
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("draft.find_possible_moves", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "draft.pyx":62
 * 
 * #region cdef int find_possible_move_count(Board& board, int player)
 * cdef int find_possible_move_count(Board& board, int player):             # <<<<<<<<<<<<<<
 *     cdef vector[Move] move_vec
 *     find_possible_moves(board, move_vec, player)
 */

static int __pyx_f_5draft_find_possible_move_count(__pyx_t_6header_Board &__pyx_v_board, int __pyx_v_player) {
  std::vector<__pyx_t_6header_Move>  __pyx_v_move_vec;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_possible_move_count", 0);

  /* "draft.pyx":64
 * cdef int find_possible_move_count(Board& board, int player):
 *     cdef vector[Move] move_vec
 *     find_possible_moves(board, move_vec, player)             # <<<<<<<<<<<<<<
 *     return move_vec.size()
 *     # cdef int count = 0
 */
  __pyx_f_5draft_find_possible_moves(__pyx_v_board, __pyx_v_move_vec, __pyx_v_player);

  /* "draft.pyx":65
 *     cdef vector[Move] move_vec
 *     find_possible_moves(board, move_vec, player)
 *     return move_vec.size()             # <<<<<<<<<<<<<<
 *     # cdef int count = 0
 *     # cdef int xfrom, yfrom, xto, yto, actno, pfrom
 */
  __pyx_r = __pyx_v_move_vec.size();
  goto __pyx_L0;

  /* "draft.pyx":62
 * 
 * #region cdef int find_possible_move_count(Board& board, int player)
 * cdef int find_possible_move_count(Board& board, int player):             # <<<<<<<<<<<<<<
 *     cdef vector[Move] move_vec
 *     find_possible_moves(board, move_vec, player)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":90
 * 
 * #region cdef float find_best_move(Board& board, Move& move, int player)
 * cdef float find_best_move(Board& board, Move& move, int player):             # <<<<<<<<<<<<<<
 *     cdef int i, best
 *     cdef Move m
 */

static float __pyx_f_5draft_find_best_move(__pyx_t_6header_Board &__pyx_v_board, __pyx_t_6header_Move &__pyx_v_move, int __pyx_v_player) {
  int __pyx_v_i;
  int __pyx_v_best;
  __pyx_t_6header_Move __pyx_v_m;
  __pyx_t_6header_Board __pyx_v_after;
  std::vector<__pyx_t_6header_Move>  __pyx_v_move_vec;
  float __pyx_v_this_value;
  float __pyx_v_highest_value;
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  size_t __pyx_t_4;
  float __pyx_t_5;
  __Pyx_RefNannySetupContext("find_best_move", 0);

  /* "draft.pyx":96
 *     cdef vector[Move] move_vec
 *     cdef float this_value, highest_value
 *     find_possible_moves(board, move_vec, player)             # <<<<<<<<<<<<<<
 *     if move_vec.size() < 1:
 *         return 1. / <float> MAX_VALUE
 */
  __pyx_f_5draft_find_possible_moves(__pyx_v_board, __pyx_v_move_vec, __pyx_v_player);

  /* "draft.pyx":97
 *     cdef float this_value, highest_value
 *     find_possible_moves(board, move_vec, player)
 *     if move_vec.size() < 1:             # <<<<<<<<<<<<<<
 *         return 1. / <float> MAX_VALUE
 *     best, highest_value = 0, 1. / <float> MAX_VALUE
 */
  __pyx_t_1 = ((__pyx_v_move_vec.size() < 1) != 0);
  if (__pyx_t_1) {

    /* "draft.pyx":98
 *     find_possible_moves(board, move_vec, player)
 *     if move_vec.size() < 1:
 *         return 1. / <float> MAX_VALUE             # <<<<<<<<<<<<<<
 *     best, highest_value = 0, 1. / <float> MAX_VALUE
 *     for i in range(move_vec.size()):
 */
    if (unlikely(((float)__pyx_e_6header_MAX_VALUE) == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 98, __pyx_L1_error)
    }
    __pyx_r = (1. / ((float)__pyx_e_6header_MAX_VALUE));
    goto __pyx_L0;

    /* "draft.pyx":97
 *     cdef float this_value, highest_value
 *     find_possible_moves(board, move_vec, player)
 *     if move_vec.size() < 1:             # <<<<<<<<<<<<<<
 *         return 1. / <float> MAX_VALUE
 *     best, highest_value = 0, 1. / <float> MAX_VALUE
 */
  }

  /* "draft.pyx":99
 *     if move_vec.size() < 1:
 *         return 1. / <float> MAX_VALUE
 *     best, highest_value = 0, 1. / <float> MAX_VALUE             # <<<<<<<<<<<<<<
 *     for i in range(move_vec.size()):
 *         m = move_vec[i]
 */
  __pyx_t_2 = 0;
  if (unlikely(((float)__pyx_e_6header_MAX_VALUE) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 99, __pyx_L1_error)
  }
  __pyx_t_3 = (1. / ((float)__pyx_e_6header_MAX_VALUE));
  __pyx_v_best = __pyx_t_2;
  __pyx_v_highest_value = __pyx_t_3;

  /* "draft.pyx":100
 *         return 1. / <float> MAX_VALUE
 *     best, highest_value = 0, 1. / <float> MAX_VALUE
 *     for i in range(move_vec.size()):             # <<<<<<<<<<<<<<
 *         m = move_vec[i]
 *         deepcopy_board(after, board)
 */
  __pyx_t_4 = __pyx_v_move_vec.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_4; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "draft.pyx":101
 *     best, highest_value = 0, 1. / <float> MAX_VALUE
 *     for i in range(move_vec.size()):
 *         m = move_vec[i]             # <<<<<<<<<<<<<<
 *         deepcopy_board(after, board)
 *         actions[m.actno].cast(after, m.xfrom, m.yfrom, m.xto, m.yto)
 */
    __pyx_v_m = (__pyx_v_move_vec[__pyx_v_i]);

    /* "draft.pyx":102
 *     for i in range(move_vec.size()):
 *         m = move_vec[i]
 *         deepcopy_board(after, board)             # <<<<<<<<<<<<<<
 *         actions[m.actno].cast(after, m.xfrom, m.yfrom, m.xto, m.yto)
 *         this_value = evaluate_board(after, player)
 */
    __pyx_f_6header_deepcopy_board(__pyx_v_after, __pyx_v_board);

    /* "draft.pyx":103
 *         m = move_vec[i]
 *         deepcopy_board(after, board)
 *         actions[m.actno].cast(after, m.xfrom, m.yfrom, m.xto, m.yto)             # <<<<<<<<<<<<<<
 *         this_value = evaluate_board(after, player)
 *         if this_value > highest_value:
 */
    (__pyx_v_7Actions_actions[__pyx_v_m.actno]).cast(__pyx_v_after, __pyx_v_m.xfrom, __pyx_v_m.yfrom, __pyx_v_m.xto, __pyx_v_m.yto);

    /* "draft.pyx":104
 *         deepcopy_board(after, board)
 *         actions[m.actno].cast(after, m.xfrom, m.yfrom, m.xto, m.yto)
 *         this_value = evaluate_board(after, player)             # <<<<<<<<<<<<<<
 *         if this_value > highest_value:
 *             highest_value = this_value
 */
    __pyx_v_this_value = __pyx_f_5draft_evaluate_board(__pyx_v_after, __pyx_v_player);

    /* "draft.pyx":105
 *         actions[m.actno].cast(after, m.xfrom, m.yfrom, m.xto, m.yto)
 *         this_value = evaluate_board(after, player)
 *         if this_value > highest_value:             # <<<<<<<<<<<<<<
 *             highest_value = this_value
 *             best = i
 */
    __pyx_t_1 = ((__pyx_v_this_value > __pyx_v_highest_value) != 0);
    if (__pyx_t_1) {

      /* "draft.pyx":106
 *         this_value = evaluate_board(after, player)
 *         if this_value > highest_value:
 *             highest_value = this_value             # <<<<<<<<<<<<<<
 *             best = i
 *     m = move_vec[best]
 */
      __pyx_v_highest_value = __pyx_v_this_value;

      /* "draft.pyx":107
 *         if this_value > highest_value:
 *             highest_value = this_value
 *             best = i             # <<<<<<<<<<<<<<
 *     m = move_vec[best]
 *     move.xfrom = m.xfrom; move.yfrom = m.yfrom
 */
      __pyx_v_best = __pyx_v_i;

      /* "draft.pyx":105
 *         actions[m.actno].cast(after, m.xfrom, m.yfrom, m.xto, m.yto)
 *         this_value = evaluate_board(after, player)
 *         if this_value > highest_value:             # <<<<<<<<<<<<<<
 *             highest_value = this_value
 *             best = i
 */
    }
  }

  /* "draft.pyx":108
 *             highest_value = this_value
 *             best = i
 *     m = move_vec[best]             # <<<<<<<<<<<<<<
 *     move.xfrom = m.xfrom; move.yfrom = m.yfrom
 *     move.xto = m.xto; move.yto = m.yto
 */
  __pyx_v_m = (__pyx_v_move_vec[__pyx_v_best]);

  /* "draft.pyx":109
 *             best = i
 *     m = move_vec[best]
 *     move.xfrom = m.xfrom; move.yfrom = m.yfrom             # <<<<<<<<<<<<<<
 *     move.xto = m.xto; move.yto = m.yto
 *     move.actno = m.actno
 */
  __pyx_t_2 = __pyx_v_m.xfrom;
  __pyx_v_move.xfrom = __pyx_t_2;
  __pyx_t_2 = __pyx_v_m.yfrom;
  __pyx_v_move.yfrom = __pyx_t_2;

  /* "draft.pyx":110
 *     m = move_vec[best]
 *     move.xfrom = m.xfrom; move.yfrom = m.yfrom
 *     move.xto = m.xto; move.yto = m.yto             # <<<<<<<<<<<<<<
 *     move.actno = m.actno
 *     # for xfrom in range(BOARD_SIZE):
 */
  __pyx_t_2 = __pyx_v_m.xto;
  __pyx_v_move.xto = __pyx_t_2;
  __pyx_t_2 = __pyx_v_m.yto;
  __pyx_v_move.yto = __pyx_t_2;

  /* "draft.pyx":111
 *     move.xfrom = m.xfrom; move.yfrom = m.yfrom
 *     move.xto = m.xto; move.yto = m.yto
 *     move.actno = m.actno             # <<<<<<<<<<<<<<
 *     # for xfrom in range(BOARD_SIZE):
 *     #     for yfrom in range(BOARD_SIZE):
 */
  __pyx_t_2 = __pyx_v_m.actno;
  __pyx_v_move.actno = __pyx_t_2;

  /* "draft.pyx":135
 *     #                                 move.xto = xto; move.yto = yto
 *     #                                 move.actno = actno
 *     return highest_value if highest_value < MAX_VALUE else MAX_VALUE             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
  if (((__pyx_v_highest_value < __pyx_e_6header_MAX_VALUE) != 0)) {
    __pyx_t_5 = __pyx_v_highest_value;
  } else {
    __pyx_t_5 = __pyx_e_6header_MAX_VALUE;
  }
  __pyx_r = __pyx_t_5;
  goto __pyx_L0;

  /* "draft.pyx":90
 * 
 * #region cdef float find_best_move(Board& board, Move& move, int player)
 * cdef float find_best_move(Board& board, Move& move, int player):             # <<<<<<<<<<<<<<
 *     cdef int i, best
 *     cdef Move m
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("draft.find_best_move", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":140
 * 
 * #region cdef float evaluate_move(Board& board, Move& move, int player)
 * cdef float evaluate_move(Board& board, Move& move, int player):             # <<<<<<<<<<<<<<
 *     cdef Board after
 *     cdef Move response
 */

static float __pyx_f_5draft_evaluate_move(__pyx_t_6header_Board &__pyx_v_board, __pyx_t_6header_Move &__pyx_v_move, int __pyx_v_player) {
  __pyx_t_6header_Board __pyx_v_after;
  __pyx_t_6header_Move __pyx_v_response;
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  __Pyx_RefNannySetupContext("evaluate_move", 0);

  /* "draft.pyx":143
 *     cdef Board after
 *     cdef Move response
 *     deepcopy_board(after, board)             # <<<<<<<<<<<<<<
 *     actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)
 *     return 1. / find_best_move(after, response, enemy_player(player))
 */
  __pyx_f_6header_deepcopy_board(__pyx_v_after, __pyx_v_board);

  /* "draft.pyx":144
 *     cdef Move response
 *     deepcopy_board(after, board)
 *     actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)             # <<<<<<<<<<<<<<
 *     return 1. / find_best_move(after, response, enemy_player(player))
 * #endregion
 */
  (__pyx_v_7Actions_actions[__pyx_v_move.actno]).cast(__pyx_v_after, __pyx_v_move.xfrom, __pyx_v_move.yfrom, __pyx_v_move.xto, __pyx_v_move.yto);

  /* "draft.pyx":145
 *     deepcopy_board(after, board)
 *     actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)
 *     return 1. / find_best_move(after, response, enemy_player(player))             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
  __pyx_t_1 = __pyx_f_5draft_find_best_move(__pyx_v_after, __pyx_v_response, __pyx_f_6header_enemy_player(__pyx_v_player));
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 145, __pyx_L1_error)
  }
  __pyx_r = (1. / __pyx_t_1);
  goto __pyx_L0;

  /* "draft.pyx":140
 * 
 * #region cdef float evaluate_move(Board& board, Move& move, int player)
 * cdef float evaluate_move(Board& board, Move& move, int player):             # <<<<<<<<<<<<<<
 *     cdef Board after
 *     cdef Move response
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("draft.evaluate_move", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":150
 * 
 * #region cdef float find_good_moves(Board& board, , int player)
 * cdef void find_good_moves(Board& board, vector[pair[int, float]]& answer, vector[Move]& possible_moves, int player, int candidates=3):             # <<<<<<<<<<<<<<
 *     cdef Board after
 *     cdef Move move
 */

static void __pyx_f_5draft_find_good_moves(__pyx_t_6header_Board &__pyx_v_board, std::vector<std::pair<int,float> >  &__pyx_v_answer, std::vector<__pyx_t_6header_Move>  &__pyx_v_possible_moves, int __pyx_v_player, struct __pyx_opt_args_5draft_find_good_moves *__pyx_optional_args) {
  int __pyx_v_candidates = ((int)3);
  __pyx_t_6header_Board __pyx_v_after;
  __pyx_t_6header_Move __pyx_v_move;
  int __pyx_v_i;
  std::vector<std::pair<int,float> >  __pyx_v_temp;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  std::pair<int,float>  __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  float __pyx_t_6;
  __Pyx_RefNannySetupContext("find_good_moves", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_candidates = __pyx_optional_args->candidates;
    }
  }

  /* "draft.pyx":155
 *     cdef int i
 *     cdef vector[pair[int, float]] temp
 *     answer.clear()             # <<<<<<<<<<<<<<
 *     for i in range(possible_moves.size()):
 *         move = possible_moves[i]
 */
  __pyx_v_answer.clear();

  /* "draft.pyx":156
 *     cdef vector[pair[int, float]] temp
 *     answer.clear()
 *     for i in range(possible_moves.size()):             # <<<<<<<<<<<<<<
 *         move = possible_moves[i]
 *         deepcopy_board(after, board)
 */
  __pyx_t_1 = __pyx_v_possible_moves.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "draft.pyx":157
 *     answer.clear()
 *     for i in range(possible_moves.size()):
 *         move = possible_moves[i]             # <<<<<<<<<<<<<<
 *         deepcopy_board(after, board)
 *         actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)
 */
    __pyx_v_move = (__pyx_v_possible_moves[__pyx_v_i]);

    /* "draft.pyx":158
 *     for i in range(possible_moves.size()):
 *         move = possible_moves[i]
 *         deepcopy_board(after, board)             # <<<<<<<<<<<<<<
 *         actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)
 *         temp.push_back(pair[int, float](i, evaluate_board(board, player)))
 */
    __pyx_f_6header_deepcopy_board(__pyx_v_after, __pyx_v_board);

    /* "draft.pyx":159
 *         move = possible_moves[i]
 *         deepcopy_board(after, board)
 *         actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)             # <<<<<<<<<<<<<<
 *         temp.push_back(pair[int, float](i, evaluate_board(board, player)))
 *     sort(temp.begin(), temp.end(), cmp_freq_pair_rev)
 */
    (__pyx_v_7Actions_actions[__pyx_v_move.actno]).cast(__pyx_v_after, __pyx_v_move.xfrom, __pyx_v_move.yfrom, __pyx_v_move.xto, __pyx_v_move.yto);

    /* "draft.pyx":160
 *         deepcopy_board(after, board)
 *         actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)
 *         temp.push_back(pair[int, float](i, evaluate_board(board, player)))             # <<<<<<<<<<<<<<
 *     sort(temp.begin(), temp.end(), cmp_freq_pair_rev)
 *     for i in range(candidates):
 */
    try {
      __pyx_t_3 = std::pair<int,float> (__pyx_v_i, __pyx_f_5draft_evaluate_board(__pyx_v_board, __pyx_v_player));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 160, __pyx_L1_error)
    }
    try {
      __pyx_v_temp.push_back(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 160, __pyx_L1_error)
    }
  }

  /* "draft.pyx":161
 *         actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)
 *         temp.push_back(pair[int, float](i, evaluate_board(board, player)))
 *     sort(temp.begin(), temp.end(), cmp_freq_pair_rev)             # <<<<<<<<<<<<<<
 *     for i in range(candidates):
 *         if i >= temp.size(): break
 */
  std::sort<std::vector<std::pair<int,float> > ::iterator,bool (std::pair<int,float> , std::pair<int,float> )>(__pyx_v_temp.begin(), __pyx_v_temp.end(), __pyx_f_5draft_cmp_freq_pair_rev);

  /* "draft.pyx":162
 *         temp.push_back(pair[int, float](i, evaluate_board(board, player)))
 *     sort(temp.begin(), temp.end(), cmp_freq_pair_rev)
 *     for i in range(candidates):             # <<<<<<<<<<<<<<
 *         if i >= temp.size(): break
 *         move = possible_moves[temp[i].first]
 */
  __pyx_t_2 = __pyx_v_candidates;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_2; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "draft.pyx":163
 *     sort(temp.begin(), temp.end(), cmp_freq_pair_rev)
 *     for i in range(candidates):
 *         if i >= temp.size(): break             # <<<<<<<<<<<<<<
 *         move = possible_moves[temp[i].first]
 *         deepcopy_board(after, board)
 */
    __pyx_t_5 = ((__pyx_v_i >= __pyx_v_temp.size()) != 0);
    if (__pyx_t_5) {
      goto __pyx_L6_break;
    }

    /* "draft.pyx":164
 *     for i in range(candidates):
 *         if i >= temp.size(): break
 *         move = possible_moves[temp[i].first]             # <<<<<<<<<<<<<<
 *         deepcopy_board(after, board)
 *         actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)
 */
    __pyx_v_move = (__pyx_v_possible_moves[(__pyx_v_temp[__pyx_v_i]).first]);

    /* "draft.pyx":165
 *         if i >= temp.size(): break
 *         move = possible_moves[temp[i].first]
 *         deepcopy_board(after, board)             # <<<<<<<<<<<<<<
 *         actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)
 *         answer.push_back(pair[int, float](temp[i].first, 1. / find_best_move(after, move, enemy_player(player))))
 */
    __pyx_f_6header_deepcopy_board(__pyx_v_after, __pyx_v_board);

    /* "draft.pyx":166
 *         move = possible_moves[temp[i].first]
 *         deepcopy_board(after, board)
 *         actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)             # <<<<<<<<<<<<<<
 *         answer.push_back(pair[int, float](temp[i].first, 1. / find_best_move(after, move, enemy_player(player))))
 * 
 */
    (__pyx_v_7Actions_actions[__pyx_v_move.actno]).cast(__pyx_v_after, __pyx_v_move.xfrom, __pyx_v_move.yfrom, __pyx_v_move.xto, __pyx_v_move.yto);

    /* "draft.pyx":167
 *         deepcopy_board(after, board)
 *         actions[move.actno].cast(after, move.xfrom, move.yfrom, move.xto, move.yto)
 *         answer.push_back(pair[int, float](temp[i].first, 1. / find_best_move(after, move, enemy_player(player))))             # <<<<<<<<<<<<<<
 * 
 * cdef bool cmp_freq_pair_rev(pair[int, float] p1, pair[int, float] p2):
 */
    __pyx_t_6 = __pyx_f_5draft_find_best_move(__pyx_v_after, __pyx_v_move, __pyx_f_6header_enemy_player(__pyx_v_player));
    if (unlikely(__pyx_t_6 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 167, __pyx_L1_error)
    }
    try {
      __pyx_t_3 = std::pair<int,float> ((__pyx_v_temp[__pyx_v_i]).first, (1. / __pyx_t_6));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 167, __pyx_L1_error)
    }
    try {
      __pyx_v_answer.push_back(__pyx_t_3);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 167, __pyx_L1_error)
    }
  }
  __pyx_L6_break:;

  /* "draft.pyx":150
 * 
 * #region cdef float find_good_moves(Board& board, , int player)
 * cdef void find_good_moves(Board& board, vector[pair[int, float]]& answer, vector[Move]& possible_moves, int player, int candidates=3):             # <<<<<<<<<<<<<<
 *     cdef Board after
 *     cdef Move move
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("draft.find_good_moves", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "draft.pyx":169
 *         answer.push_back(pair[int, float](temp[i].first, 1. / find_best_move(after, move, enemy_player(player))))
 * 
 * cdef bool cmp_freq_pair_rev(pair[int, float] p1, pair[int, float] p2):             # <<<<<<<<<<<<<<
 *     return p1.second > p2.second
 * #endregion
 */

static bool __pyx_f_5draft_cmp_freq_pair_rev(std::pair<int,float>  __pyx_v_p1, std::pair<int,float>  __pyx_v_p2) {
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cmp_freq_pair_rev", 0);

  /* "draft.pyx":170
 * 
 * cdef bool cmp_freq_pair_rev(pair[int, float] p1, pair[int, float] p2):
 *     return p1.second > p2.second             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
  __pyx_r = (__pyx_v_p1.second > __pyx_v_p2.second);
  goto __pyx_L0;

  /* "draft.pyx":169
 *         answer.push_back(pair[int, float](temp[i].first, 1. / find_best_move(after, move, enemy_player(player))))
 * 
 * cdef bool cmp_freq_pair_rev(pair[int, float] p1, pair[int, float] p2):             # <<<<<<<<<<<<<<
 *     return p1.second > p2.second
 * #endregion
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":175
 * 
 * #region cdef int random_with_frequency(vector[pair[int, float]]& frequency_vec)
 * cdef int random_with_frequency(vector[pair[int, float]]& frequency_vec):             # <<<<<<<<<<<<<<
 *     cdef int i, vecsize
 *     cdef vector[float] s
 */

static int __pyx_f_5draft_random_with_frequency(std::vector<std::pair<int,float> >  &__pyx_v_frequency_vec) {
  int __pyx_v_i;
  int __pyx_v_vecsize;
  std::vector<float>  __pyx_v_s;
  float __pyx_v_r;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("random_with_frequency", 0);

  /* "draft.pyx":179
 *     cdef vector[float] s
 *     cdef float r
 *     vecsize = frequency_vec.size()             # <<<<<<<<<<<<<<
 *     if vecsize <= 1:
 *         return 0
 */
  __pyx_v_vecsize = __pyx_v_frequency_vec.size();

  /* "draft.pyx":180
 *     cdef float r
 *     vecsize = frequency_vec.size()
 *     if vecsize <= 1:             # <<<<<<<<<<<<<<
 *         return 0
 *     s.push_back(frequency_vec[0].second)
 */
  __pyx_t_1 = ((__pyx_v_vecsize <= 1) != 0);
  if (__pyx_t_1) {

    /* "draft.pyx":181
 *     vecsize = frequency_vec.size()
 *     if vecsize <= 1:
 *         return 0             # <<<<<<<<<<<<<<
 *     s.push_back(frequency_vec[0].second)
 *     for i in range(1, vecsize):
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "draft.pyx":180
 *     cdef float r
 *     vecsize = frequency_vec.size()
 *     if vecsize <= 1:             # <<<<<<<<<<<<<<
 *         return 0
 *     s.push_back(frequency_vec[0].second)
 */
  }

  /* "draft.pyx":182
 *     if vecsize <= 1:
 *         return 0
 *     s.push_back(frequency_vec[0].second)             # <<<<<<<<<<<<<<
 *     for i in range(1, vecsize):
 *         s.push_back(s[i - 1] + frequency_vec[i - 1].second)
 */
  try {
    __pyx_v_s.push_back((__pyx_v_frequency_vec[0]).second);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 182, __pyx_L1_error)
  }

  /* "draft.pyx":183
 *         return 0
 *     s.push_back(frequency_vec[0].second)
 *     for i in range(1, vecsize):             # <<<<<<<<<<<<<<
 *         s.push_back(s[i - 1] + frequency_vec[i - 1].second)
 *     r = randfloat(frequency_vec[vecsize - 1].second)
 */
  __pyx_t_2 = __pyx_v_vecsize;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "draft.pyx":184
 *     s.push_back(frequency_vec[0].second)
 *     for i in range(1, vecsize):
 *         s.push_back(s[i - 1] + frequency_vec[i - 1].second)             # <<<<<<<<<<<<<<
 *     r = randfloat(frequency_vec[vecsize - 1].second)
 *     i = 0
 */
    try {
      __pyx_v_s.push_back(((__pyx_v_s[(__pyx_v_i - 1)]) + (__pyx_v_frequency_vec[(__pyx_v_i - 1)]).second));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 184, __pyx_L1_error)
    }
  }

  /* "draft.pyx":185
 *     for i in range(1, vecsize):
 *         s.push_back(s[i - 1] + frequency_vec[i - 1].second)
 *     r = randfloat(frequency_vec[vecsize - 1].second)             # <<<<<<<<<<<<<<
 *     i = 0
 *     while i < vecsize:
 */
  __pyx_v_r = __pyx_f_6cyrand_randf((__pyx_v_frequency_vec[(__pyx_v_vecsize - 1)]).second);

  /* "draft.pyx":186
 *         s.push_back(s[i - 1] + frequency_vec[i - 1].second)
 *     r = randfloat(frequency_vec[vecsize - 1].second)
 *     i = 0             # <<<<<<<<<<<<<<
 *     while i < vecsize:
 *         if s[i] > r:
 */
  __pyx_v_i = 0;

  /* "draft.pyx":187
 *     r = randfloat(frequency_vec[vecsize - 1].second)
 *     i = 0
 *     while i < vecsize:             # <<<<<<<<<<<<<<
 *         if s[i] > r:
 *             return frequency_vec[i].first
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_vecsize) != 0);
    if (!__pyx_t_1) break;

    /* "draft.pyx":188
 *     i = 0
 *     while i < vecsize:
 *         if s[i] > r:             # <<<<<<<<<<<<<<
 *             return frequency_vec[i].first
 *         i += 1
 */
    __pyx_t_1 = (((__pyx_v_s[__pyx_v_i]) > __pyx_v_r) != 0);
    if (__pyx_t_1) {

      /* "draft.pyx":189
 *     while i < vecsize:
 *         if s[i] > r:
 *             return frequency_vec[i].first             # <<<<<<<<<<<<<<
 *         i += 1
 *     return frequency_vec[vecsize - 1].first
 */
      __pyx_r = (__pyx_v_frequency_vec[__pyx_v_i]).first;
      goto __pyx_L0;

      /* "draft.pyx":188
 *     i = 0
 *     while i < vecsize:
 *         if s[i] > r:             # <<<<<<<<<<<<<<
 *             return frequency_vec[i].first
 *         i += 1
 */
    }

    /* "draft.pyx":190
 *         if s[i] > r:
 *             return frequency_vec[i].first
 *         i += 1             # <<<<<<<<<<<<<<
 *     return frequency_vec[vecsize - 1].first
 * #endregion
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "draft.pyx":191
 *             return frequency_vec[i].first
 *         i += 1
 *     return frequency_vec[vecsize - 1].first             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
  __pyx_r = (__pyx_v_frequency_vec[(__pyx_v_vecsize - 1)]).first;
  goto __pyx_L0;

  /* "draft.pyx":175
 * 
 * #region cdef int random_with_frequency(vector[pair[int, float]]& frequency_vec)
 * cdef int random_with_frequency(vector[pair[int, float]]& frequency_vec):             # <<<<<<<<<<<<<<
 *     cdef int i, vecsize
 *     cdef vector[float] s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("draft.random_with_frequency", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":196
 * 
 * #region cdef void build_board(Board& board, vector[Piece]&, str, str, str, str)
 * cdef void build_board(Board& board, vector[Piece]& piece_list, str player1_setup, str player2_setup):             # <<<<<<<<<<<<<<
 *     reset_board(board)
 *     cdef int x, y, line_no, i, pno
 */

static void __pyx_f_5draft_build_board(__pyx_t_6header_Board &__pyx_v_board, std::vector<__pyx_t_6header_Piece>  &__pyx_v_piece_list, PyObject *__pyx_v_player1_setup, PyObject *__pyx_v_player2_setup) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_line_no;
  int __pyx_v_i;
  int __pyx_v_pno;
  std::string __pyx_v_pname;
  PyObject *__pyx_v_lstsz = 0;
  PyObject *__pyx_v_lines = NULL;
  PyObject *__pyx_v_setup = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::string __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("build_board", 0);

  /* "draft.pyx":197
 * #region cdef void build_board(Board& board, vector[Piece]&, str, str, str, str)
 * cdef void build_board(Board& board, vector[Piece]& piece_list, str player1_setup, str player2_setup):
 *     reset_board(board)             # <<<<<<<<<<<<<<
 *     cdef int x, y, line_no, i, pno
 *     cdef string pname
 */
  __pyx_f_6header_reset_board(__pyx_v_board);

  /* "draft.pyx":200
 *     cdef int x, y, line_no, i, pno
 *     cdef string pname
 *     cdef lstsz = piece_list.size()             # <<<<<<<<<<<<<<
 *     board.moral[1] = 0
 *     lines = player1_setup.split(';'); line_no = len(lines)
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_piece_list.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lstsz = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "draft.pyx":201
 *     cdef string pname
 *     cdef lstsz = piece_list.size()
 *     board.moral[1] = 0             # <<<<<<<<<<<<<<
 *     lines = player1_setup.split(';'); line_no = len(lines)
 *     setup = []
 */
  (__pyx_v_board.moral[1]) = 0;

  /* "draft.pyx":202
 *     cdef lstsz = piece_list.size()
 *     board.moral[1] = 0
 *     lines = player1_setup.split(';'); line_no = len(lines)             # <<<<<<<<<<<<<<
 *     setup = []
 *     for y in range(line_no):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_player1_setup, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_lines = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_v_lines); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_v_line_no = __pyx_t_3;

  /* "draft.pyx":203
 *     board.moral[1] = 0
 *     lines = player1_setup.split(';'); line_no = len(lines)
 *     setup = []             # <<<<<<<<<<<<<<
 *     for y in range(line_no):
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_setup = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "draft.pyx":204
 *     lines = player1_setup.split(';'); line_no = len(lines)
 *     setup = []
 *     for y in range(line_no):             # <<<<<<<<<<<<<<
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])
 *     for y in range(line_no):
 */
  __pyx_t_4 = __pyx_v_line_no;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "draft.pyx":205
 *     setup = []
 *     for y in range(line_no):
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])             # <<<<<<<<<<<<<<
 *     for y in range(line_no):
 *         for x in range(<int> len(setup[y])):
 */
    __pyx_t_6 = ((__pyx_v_line_no - 1) - __pyx_v_y);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_lines, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_e_6header_BOARD_SIZE, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_setup, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "draft.pyx":206
 *     for y in range(line_no):
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])
 *     for y in range(line_no):             # <<<<<<<<<<<<<<
 *         for x in range(<int> len(setup[y])):
 *             pname = setup[y][x].encode()
 */
  __pyx_t_4 = __pyx_v_line_no;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "draft.pyx":207
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])
 *     for y in range(line_no):
 *         for x in range(<int> len(setup[y])):             # <<<<<<<<<<<<<<
 *             pname = setup[y][x].encode()
 *             pno = 0
 */
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_setup, __pyx_v_y, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = ((int)__pyx_t_3);
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_x = __pyx_t_9;

      /* "draft.pyx":208
 *     for y in range(line_no):
 *         for x in range(<int> len(setup[y])):
 *             pname = setup[y][x].encode()             # <<<<<<<<<<<<<<
 *             pno = 0
 *             for i in range(lstsz):
 */
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_setup, __pyx_v_y, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_x, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (__pyx_t_10) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_pname = __pyx_t_11;

      /* "draft.pyx":209
 *         for x in range(<int> len(setup[y])):
 *             pname = setup[y][x].encode()
 *             pno = 0             # <<<<<<<<<<<<<<
 *             for i in range(lstsz):
 *                 if piece_list[i].name == pname:
 */
      __pyx_v_pno = 0;

      /* "draft.pyx":210
 *             pname = setup[y][x].encode()
 *             pno = 0
 *             for i in range(lstsz):             # <<<<<<<<<<<<<<
 *                 if piece_list[i].name == pname:
 *                     pno = i
 */
      __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_v_lstsz); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L1_error)
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_6; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "draft.pyx":211
 *             pno = 0
 *             for i in range(lstsz):
 *                 if piece_list[i].name == pname:             # <<<<<<<<<<<<<<
 *                     pno = i
 *                     break
 */
        __pyx_t_13 = (((__pyx_v_piece_list[__pyx_v_i]).name == __pyx_v_pname) != 0);
        if (__pyx_t_13) {

          /* "draft.pyx":212
 *             for i in range(lstsz):
 *                 if piece_list[i].name == pname:
 *                     pno = i             # <<<<<<<<<<<<<<
 *                     break
 *             board.pieces[BOARD_SIZE - 1 - y][x] = pno
 */
          __pyx_v_pno = __pyx_v_i;

          /* "draft.pyx":213
 *                 if piece_list[i].name == pname:
 *                     pno = i
 *                     break             # <<<<<<<<<<<<<<
 *             board.pieces[BOARD_SIZE - 1 - y][x] = pno
 *             if pno != 0:
 */
          goto __pyx_L10_break;

          /* "draft.pyx":211
 *             pno = 0
 *             for i in range(lstsz):
 *                 if piece_list[i].name == pname:             # <<<<<<<<<<<<<<
 *                     pno = i
 *                     break
 */
        }
      }
      __pyx_L10_break:;

      /* "draft.pyx":214
 *                     pno = i
 *                     break
 *             board.pieces[BOARD_SIZE - 1 - y][x] = pno             # <<<<<<<<<<<<<<
 *             if pno != 0:
 *                 board.ownerships[BOARD_SIZE - 1 - y][x] = 1
 */
      ((__pyx_v_board.pieces[((__pyx_e_6header_BOARD_SIZE - 1) - __pyx_v_y)])[__pyx_v_x]) = __pyx_v_pno;

      /* "draft.pyx":215
 *                     break
 *             board.pieces[BOARD_SIZE - 1 - y][x] = pno
 *             if pno != 0:             # <<<<<<<<<<<<<<
 *                 board.ownerships[BOARD_SIZE - 1 - y][x] = 1
 *                 board.costs[BOARD_SIZE - 1 - y][x] = piece_list[pno].cost
 */
      __pyx_t_13 = ((__pyx_v_pno != 0) != 0);
      if (__pyx_t_13) {

        /* "draft.pyx":216
 *             board.pieces[BOARD_SIZE - 1 - y][x] = pno
 *             if pno != 0:
 *                 board.ownerships[BOARD_SIZE - 1 - y][x] = 1             # <<<<<<<<<<<<<<
 *                 board.costs[BOARD_SIZE - 1 - y][x] = piece_list[pno].cost
 *                 board.moral[1] += piece_list[pno].cost
 */
        ((__pyx_v_board.ownerships[((__pyx_e_6header_BOARD_SIZE - 1) - __pyx_v_y)])[__pyx_v_x]) = 1;

        /* "draft.pyx":217
 *             if pno != 0:
 *                 board.ownerships[BOARD_SIZE - 1 - y][x] = 1
 *                 board.costs[BOARD_SIZE - 1 - y][x] = piece_list[pno].cost             # <<<<<<<<<<<<<<
 *                 board.moral[1] += piece_list[pno].cost
 *     board.moral[2] = 0
 */
        __pyx_t_12 = (__pyx_v_piece_list[__pyx_v_pno]).cost;
        ((__pyx_v_board.costs[((__pyx_e_6header_BOARD_SIZE - 1) - __pyx_v_y)])[__pyx_v_x]) = __pyx_t_12;

        /* "draft.pyx":218
 *                 board.ownerships[BOARD_SIZE - 1 - y][x] = 1
 *                 board.costs[BOARD_SIZE - 1 - y][x] = piece_list[pno].cost
 *                 board.moral[1] += piece_list[pno].cost             # <<<<<<<<<<<<<<
 *     board.moral[2] = 0
 *     lines = player2_setup.split(';'); line_no = len(lines)
 */
        __pyx_t_6 = 1;
        (__pyx_v_board.moral[__pyx_t_6]) = ((__pyx_v_board.moral[__pyx_t_6]) + (__pyx_v_piece_list[__pyx_v_pno]).cost);

        /* "draft.pyx":215
 *                     break
 *             board.pieces[BOARD_SIZE - 1 - y][x] = pno
 *             if pno != 0:             # <<<<<<<<<<<<<<
 *                 board.ownerships[BOARD_SIZE - 1 - y][x] = 1
 *                 board.costs[BOARD_SIZE - 1 - y][x] = piece_list[pno].cost
 */
      }
    }
  }

  /* "draft.pyx":219
 *                 board.costs[BOARD_SIZE - 1 - y][x] = piece_list[pno].cost
 *                 board.moral[1] += piece_list[pno].cost
 *     board.moral[2] = 0             # <<<<<<<<<<<<<<
 *     lines = player2_setup.split(';'); line_no = len(lines)
 *     setup = []
 */
  (__pyx_v_board.moral[2]) = 0;

  /* "draft.pyx":220
 *                 board.moral[1] += piece_list[pno].cost
 *     board.moral[2] = 0
 *     lines = player2_setup.split(';'); line_no = len(lines)             # <<<<<<<<<<<<<<
 *     setup = []
 *     for y in range(line_no):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_player2_setup, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_lines, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_v_lines); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_v_line_no = __pyx_t_3;

  /* "draft.pyx":221
 *     board.moral[2] = 0
 *     lines = player2_setup.split(';'); line_no = len(lines)
 *     setup = []             # <<<<<<<<<<<<<<
 *     for y in range(line_no):
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_setup, ((PyObject*)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "draft.pyx":222
 *     lines = player2_setup.split(';'); line_no = len(lines)
 *     setup = []
 *     for y in range(line_no):             # <<<<<<<<<<<<<<
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])
 *     for y in range(line_no):
 */
  __pyx_t_4 = __pyx_v_line_no;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "draft.pyx":223
 *     setup = []
 *     for y in range(line_no):
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])             # <<<<<<<<<<<<<<
 *     for y in range(line_no):
 *         for x in range(<int> len(setup[y])):
 */
    __pyx_t_6 = ((__pyx_v_line_no - 1) - __pyx_v_y);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_lines, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_t_2, 0, __pyx_e_6header_BOARD_SIZE, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_setup, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "draft.pyx":224
 *     for y in range(line_no):
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])
 *     for y in range(line_no):             # <<<<<<<<<<<<<<
 *         for x in range(<int> len(setup[y])):
 *             pname = setup[y][x].encode()
 */
  __pyx_t_4 = __pyx_v_line_no;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_y = __pyx_t_5;

    /* "draft.pyx":225
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])
 *     for y in range(line_no):
 *         for x in range(<int> len(setup[y])):             # <<<<<<<<<<<<<<
 *             pname = setup[y][x].encode()
 *             pno = 0
 */
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_setup, __pyx_v_y, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = ((int)__pyx_t_3);
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_x = __pyx_t_9;

      /* "draft.pyx":226
 *     for y in range(line_no):
 *         for x in range(<int> len(setup[y])):
 *             pname = setup[y][x].encode()             # <<<<<<<<<<<<<<
 *             pno = 0
 *             for i in range(lstsz):
 */
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_setup, __pyx_v_y, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_x, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (__pyx_t_10) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      } else {
        __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_pname = __pyx_t_11;

      /* "draft.pyx":227
 *         for x in range(<int> len(setup[y])):
 *             pname = setup[y][x].encode()
 *             pno = 0             # <<<<<<<<<<<<<<
 *             for i in range(lstsz):
 *                 if piece_list[i].name == pname:
 */
      __pyx_v_pno = 0;

      /* "draft.pyx":228
 *             pname = setup[y][x].encode()
 *             pno = 0
 *             for i in range(lstsz):             # <<<<<<<<<<<<<<
 *                 if piece_list[i].name == pname:
 *                     pno = i
 */
      __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_v_lstsz); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L1_error)
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_6; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "draft.pyx":229
 *             pno = 0
 *             for i in range(lstsz):
 *                 if piece_list[i].name == pname:             # <<<<<<<<<<<<<<
 *                     pno = i
 *                     break
 */
        __pyx_t_13 = (((__pyx_v_piece_list[__pyx_v_i]).name == __pyx_v_pname) != 0);
        if (__pyx_t_13) {

          /* "draft.pyx":230
 *             for i in range(lstsz):
 *                 if piece_list[i].name == pname:
 *                     pno = i             # <<<<<<<<<<<<<<
 *                     break
 *             board.pieces[y][BOARD_SIZE - 1 - x] = pno
 */
          __pyx_v_pno = __pyx_v_i;

          /* "draft.pyx":231
 *                 if piece_list[i].name == pname:
 *                     pno = i
 *                     break             # <<<<<<<<<<<<<<
 *             board.pieces[y][BOARD_SIZE - 1 - x] = pno
 *             if pno != 0:
 */
          goto __pyx_L20_break;

          /* "draft.pyx":229
 *             pno = 0
 *             for i in range(lstsz):
 *                 if piece_list[i].name == pname:             # <<<<<<<<<<<<<<
 *                     pno = i
 *                     break
 */
        }
      }
      __pyx_L20_break:;

      /* "draft.pyx":232
 *                     pno = i
 *                     break
 *             board.pieces[y][BOARD_SIZE - 1 - x] = pno             # <<<<<<<<<<<<<<
 *             if pno != 0:
 *                 board.ownerships[y][BOARD_SIZE - 1 - x] = 2
 */
      ((__pyx_v_board.pieces[__pyx_v_y])[((__pyx_e_6header_BOARD_SIZE - 1) - __pyx_v_x)]) = __pyx_v_pno;

      /* "draft.pyx":233
 *                     break
 *             board.pieces[y][BOARD_SIZE - 1 - x] = pno
 *             if pno != 0:             # <<<<<<<<<<<<<<
 *                 board.ownerships[y][BOARD_SIZE - 1 - x] = 2
 *                 board.costs[y][BOARD_SIZE - 1 - x] = piece_list[pno].cost
 */
      __pyx_t_13 = ((__pyx_v_pno != 0) != 0);
      if (__pyx_t_13) {

        /* "draft.pyx":234
 *             board.pieces[y][BOARD_SIZE - 1 - x] = pno
 *             if pno != 0:
 *                 board.ownerships[y][BOARD_SIZE - 1 - x] = 2             # <<<<<<<<<<<<<<
 *                 board.costs[y][BOARD_SIZE - 1 - x] = piece_list[pno].cost
 *                 board.moral[2] += piece_list[pno].cost
 */
        ((__pyx_v_board.ownerships[__pyx_v_y])[((__pyx_e_6header_BOARD_SIZE - 1) - __pyx_v_x)]) = 2;

        /* "draft.pyx":235
 *             if pno != 0:
 *                 board.ownerships[y][BOARD_SIZE - 1 - x] = 2
 *                 board.costs[y][BOARD_SIZE - 1 - x] = piece_list[pno].cost             # <<<<<<<<<<<<<<
 *                 board.moral[2] += piece_list[pno].cost
 *     board.king[1], board.king[2] = 0, 0
 */
        __pyx_t_12 = (__pyx_v_piece_list[__pyx_v_pno]).cost;
        ((__pyx_v_board.costs[__pyx_v_y])[((__pyx_e_6header_BOARD_SIZE - 1) - __pyx_v_x)]) = __pyx_t_12;

        /* "draft.pyx":236
 *                 board.ownerships[y][BOARD_SIZE - 1 - x] = 2
 *                 board.costs[y][BOARD_SIZE - 1 - x] = piece_list[pno].cost
 *                 board.moral[2] += piece_list[pno].cost             # <<<<<<<<<<<<<<
 *     board.king[1], board.king[2] = 0, 0
 *     for x in range(BOARD_SIZE):
 */
        __pyx_t_6 = 2;
        (__pyx_v_board.moral[__pyx_t_6]) = ((__pyx_v_board.moral[__pyx_t_6]) + (__pyx_v_piece_list[__pyx_v_pno]).cost);

        /* "draft.pyx":233
 *                     break
 *             board.pieces[y][BOARD_SIZE - 1 - x] = pno
 *             if pno != 0:             # <<<<<<<<<<<<<<
 *                 board.ownerships[y][BOARD_SIZE - 1 - x] = 2
 *                 board.costs[y][BOARD_SIZE - 1 - x] = piece_list[pno].cost
 */
      }
    }
  }

  /* "draft.pyx":237
 *                 board.costs[y][BOARD_SIZE - 1 - x] = piece_list[pno].cost
 *                 board.moral[2] += piece_list[pno].cost
 *     board.king[1], board.king[2] = 0, 0             # <<<<<<<<<<<<<<
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):
 */
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  (__pyx_v_board.king[1]) = __pyx_t_4;
  (__pyx_v_board.king[2]) = __pyx_t_5;

  /* "draft.pyx":238
 *                 board.moral[2] += piece_list[pno].cost
 *     board.king[1], board.king[2] = 0, 0
 *     for x in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *         for y in range(BOARD_SIZE):
 *             if board.pieces[x][y] == index_of_King:
 */
  __pyx_t_14 = __pyx_e_6header_BOARD_SIZE;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_14; __pyx_t_5+=1) {
    __pyx_v_x = __pyx_t_5;

    /* "draft.pyx":239
 *     board.king[1], board.king[2] = 0, 0
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *             if board.pieces[x][y] == index_of_King:
 *                 if 1 <= board.ownerships[x][y] <= 2:
 */
    __pyx_t_15 = __pyx_e_6header_BOARD_SIZE;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_15; __pyx_t_4+=1) {
      __pyx_v_y = __pyx_t_4;

      /* "draft.pyx":240
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):
 *             if board.pieces[x][y] == index_of_King:             # <<<<<<<<<<<<<<
 *                 if 1 <= board.ownerships[x][y] <= 2:
 *                     board.king[board.ownerships[x][y]] += 1
 */
      __pyx_t_13 = ((((__pyx_v_board.pieces[__pyx_v_x])[__pyx_v_y]) == __pyx_v_6Pieces_index_of_King) != 0);
      if (__pyx_t_13) {

        /* "draft.pyx":241
 *         for y in range(BOARD_SIZE):
 *             if board.pieces[x][y] == index_of_King:
 *                 if 1 <= board.ownerships[x][y] <= 2:             # <<<<<<<<<<<<<<
 *                     board.king[board.ownerships[x][y]] += 1
 * #endregion
 */
        __pyx_t_8 = ((__pyx_v_board.ownerships[__pyx_v_x])[__pyx_v_y]);
        __pyx_t_13 = (1 <= __pyx_t_8);
        if (__pyx_t_13) {
          __pyx_t_13 = (__pyx_t_8 <= 2);
        }
        __pyx_t_16 = (__pyx_t_13 != 0);
        if (__pyx_t_16) {

          /* "draft.pyx":242
 *             if board.pieces[x][y] == index_of_King:
 *                 if 1 <= board.ownerships[x][y] <= 2:
 *                     board.king[board.ownerships[x][y]] += 1             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
          __pyx_t_8 = ((__pyx_v_board.ownerships[__pyx_v_x])[__pyx_v_y]);
          (__pyx_v_board.king[__pyx_t_8]) = ((__pyx_v_board.king[__pyx_t_8]) + 1);

          /* "draft.pyx":241
 *         for y in range(BOARD_SIZE):
 *             if board.pieces[x][y] == index_of_King:
 *                 if 1 <= board.ownerships[x][y] <= 2:             # <<<<<<<<<<<<<<
 *                     board.king[board.ownerships[x][y]] += 1
 * #endregion
 */
        }

        /* "draft.pyx":240
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):
 *             if board.pieces[x][y] == index_of_King:             # <<<<<<<<<<<<<<
 *                 if 1 <= board.ownerships[x][y] <= 2:
 *                     board.king[board.ownerships[x][y]] += 1
 */
      }
    }
  }

  /* "draft.pyx":196
 * 
 * #region cdef void build_board(Board& board, vector[Piece]&, str, str, str, str)
 * cdef void build_board(Board& board, vector[Piece]& piece_list, str player1_setup, str player2_setup):             # <<<<<<<<<<<<<<
 *     reset_board(board)
 *     cdef int x, y, line_no, i, pno
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("draft.build_board", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lstsz);
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_setup);
  __Pyx_RefNannyFinishContext();
}

/* "draft.pyx":247
 * 
 * #region cdef void turn_pass(Board& board)
 * cdef void turn_pass(Board& board):             # <<<<<<<<<<<<<<
 *     cdef int x, y, pxy
 *     # todo: lure
 */

static void __pyx_f_5draft_turn_pass(__pyx_t_6header_Board &__pyx_v_board) {
  int __pyx_v_x;
  int __pyx_v_y;
  int __pyx_v_pxy;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("turn_pass", 0);

  /* "draft.pyx":250
 *     cdef int x, y, pxy
 *     # todo: lure
 *     board.current = enemy_player(board.current)             # <<<<<<<<<<<<<<
 *     # todo: sumurai, sapling
 *     for x in range(BOARD_SIZE):
 */
  __pyx_v_board.current = __pyx_f_6header_enemy_player(__pyx_v_board.current);

  /* "draft.pyx":252
 *     board.current = enemy_player(board.current)
 *     # todo: sumurai, sapling
 *     for x in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *         for y in range(BOARD_SIZE):
 *             if board.poison[x][y] == 1 or board.thunder[x][y] == 1:
 */
  __pyx_t_1 = __pyx_e_6header_BOARD_SIZE;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_x = __pyx_t_2;

    /* "draft.pyx":253
 *     # todo: sumurai, sapling
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):             # <<<<<<<<<<<<<<
 *             if board.poison[x][y] == 1 or board.thunder[x][y] == 1:
 *                 pxy = board.pieces[x][y]
 */
    __pyx_t_3 = __pyx_e_6header_BOARD_SIZE;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_y = __pyx_t_4;

      /* "draft.pyx":254
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):
 *             if board.poison[x][y] == 1 or board.thunder[x][y] == 1:             # <<<<<<<<<<<<<<
 *                 pxy = board.pieces[x][y]
 *                 if pxy:
 */
      __pyx_t_6 = ((((__pyx_v_board.poison[__pyx_v_x])[__pyx_v_y]) == 1) != 0);
      if (!__pyx_t_6) {
      } else {
        __pyx_t_5 = __pyx_t_6;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_6 = ((((__pyx_v_board.thunder[__pyx_v_x])[__pyx_v_y]) == 1) != 0);
      __pyx_t_5 = __pyx_t_6;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_5) {

        /* "draft.pyx":255
 *         for y in range(BOARD_SIZE):
 *             if board.poison[x][y] == 1 or board.thunder[x][y] == 1:
 *                 pxy = board.pieces[x][y]             # <<<<<<<<<<<<<<
 *                 if pxy:
 *                     if piece_list[pxy].has_on_death: piece_list[pxy].on_death(board, x, y, x, y)  # on death
 */
        __pyx_v_pxy = ((__pyx_v_board.pieces[__pyx_v_x])[__pyx_v_y]);

        /* "draft.pyx":256
 *             if board.poison[x][y] == 1 or board.thunder[x][y] == 1:
 *                 pxy = board.pieces[x][y]
 *                 if pxy:             # <<<<<<<<<<<<<<
 *                     if piece_list[pxy].has_on_death: piece_list[pxy].on_death(board, x, y, x, y)  # on death
 *                     board.moral[board.ownerships[x][y]] -= board.costs[x][y]
 */
        __pyx_t_5 = (__pyx_v_pxy != 0);
        if (__pyx_t_5) {

          /* "draft.pyx":257
 *                 pxy = board.pieces[x][y]
 *                 if pxy:
 *                     if piece_list[pxy].has_on_death: piece_list[pxy].on_death(board, x, y, x, y)  # on death             # <<<<<<<<<<<<<<
 *                     board.moral[board.ownerships[x][y]] -= board.costs[x][y]
 *                     board.pieces[x][y] = 0
 */
          __pyx_t_5 = ((__pyx_v_6Pieces_piece_list[__pyx_v_pxy]).has_on_death != 0);
          if (__pyx_t_5) {
            (__pyx_v_6Pieces_piece_list[__pyx_v_pxy]).on_death(__pyx_v_board, __pyx_v_x, __pyx_v_y, __pyx_v_x, __pyx_v_y);
          }

          /* "draft.pyx":258
 *                 if pxy:
 *                     if piece_list[pxy].has_on_death: piece_list[pxy].on_death(board, x, y, x, y)  # on death
 *                     board.moral[board.ownerships[x][y]] -= board.costs[x][y]             # <<<<<<<<<<<<<<
 *                     board.pieces[x][y] = 0
 *                     board.ownerships[x][y] = 0
 */
          __pyx_t_7 = ((__pyx_v_board.ownerships[__pyx_v_x])[__pyx_v_y]);
          (__pyx_v_board.moral[__pyx_t_7]) = ((__pyx_v_board.moral[__pyx_t_7]) - ((__pyx_v_board.costs[__pyx_v_x])[__pyx_v_y]));

          /* "draft.pyx":259
 *                     if piece_list[pxy].has_on_death: piece_list[pxy].on_death(board, x, y, x, y)  # on death
 *                     board.moral[board.ownerships[x][y]] -= board.costs[x][y]
 *                     board.pieces[x][y] = 0             # <<<<<<<<<<<<<<
 *                     board.ownerships[x][y] = 0
 *                     board.costs[x][y] = 0
 */
          ((__pyx_v_board.pieces[__pyx_v_x])[__pyx_v_y]) = 0;

          /* "draft.pyx":260
 *                     board.moral[board.ownerships[x][y]] -= board.costs[x][y]
 *                     board.pieces[x][y] = 0
 *                     board.ownerships[x][y] = 0             # <<<<<<<<<<<<<<
 *                     board.costs[x][y] = 0
 *             if board.frozen[x][y] > 0: board.frozen[x][y] -= 1
 */
          ((__pyx_v_board.ownerships[__pyx_v_x])[__pyx_v_y]) = 0;

          /* "draft.pyx":261
 *                     board.pieces[x][y] = 0
 *                     board.ownerships[x][y] = 0
 *                     board.costs[x][y] = 0             # <<<<<<<<<<<<<<
 *             if board.frozen[x][y] > 0: board.frozen[x][y] -= 1
 *             if board.poison[x][y] > 0: board.poison[x][y] -= 1
 */
          ((__pyx_v_board.costs[__pyx_v_x])[__pyx_v_y]) = 0;

          /* "draft.pyx":256
 *             if board.poison[x][y] == 1 or board.thunder[x][y] == 1:
 *                 pxy = board.pieces[x][y]
 *                 if pxy:             # <<<<<<<<<<<<<<
 *                     if piece_list[pxy].has_on_death: piece_list[pxy].on_death(board, x, y, x, y)  # on death
 *                     board.moral[board.ownerships[x][y]] -= board.costs[x][y]
 */
        }

        /* "draft.pyx":254
 *     for x in range(BOARD_SIZE):
 *         for y in range(BOARD_SIZE):
 *             if board.poison[x][y] == 1 or board.thunder[x][y] == 1:             # <<<<<<<<<<<<<<
 *                 pxy = board.pieces[x][y]
 *                 if pxy:
 */
      }

      /* "draft.pyx":262
 *                     board.ownerships[x][y] = 0
 *                     board.costs[x][y] = 0
 *             if board.frozen[x][y] > 0: board.frozen[x][y] -= 1             # <<<<<<<<<<<<<<
 *             if board.poison[x][y] > 0: board.poison[x][y] -= 1
 *             if board.thunder[x][y] > 0: board.thunder[x][y] -= 1
 */
      __pyx_t_5 = ((((__pyx_v_board.frozen[__pyx_v_x])[__pyx_v_y]) > 0) != 0);
      if (__pyx_t_5) {
        __pyx_t_7 = __pyx_v_x;
        __pyx_t_8 = __pyx_v_y;
        ((__pyx_v_board.frozen[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_board.frozen[__pyx_t_7])[__pyx_t_8]) - 1);
      }

      /* "draft.pyx":263
 *                     board.costs[x][y] = 0
 *             if board.frozen[x][y] > 0: board.frozen[x][y] -= 1
 *             if board.poison[x][y] > 0: board.poison[x][y] -= 1             # <<<<<<<<<<<<<<
 *             if board.thunder[x][y] > 0: board.thunder[x][y] -= 1
 *     if board.king[board.current] <= 0:
 */
      __pyx_t_5 = ((((__pyx_v_board.poison[__pyx_v_x])[__pyx_v_y]) > 0) != 0);
      if (__pyx_t_5) {
        __pyx_t_7 = __pyx_v_x;
        __pyx_t_8 = __pyx_v_y;
        ((__pyx_v_board.poison[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_board.poison[__pyx_t_7])[__pyx_t_8]) - 1);
      }

      /* "draft.pyx":264
 *             if board.frozen[x][y] > 0: board.frozen[x][y] -= 1
 *             if board.poison[x][y] > 0: board.poison[x][y] -= 1
 *             if board.thunder[x][y] > 0: board.thunder[x][y] -= 1             # <<<<<<<<<<<<<<
 *     if board.king[board.current] <= 0:
 *             board.moral[board.current] -= 3
 */
      __pyx_t_5 = ((((__pyx_v_board.thunder[__pyx_v_x])[__pyx_v_y]) > 0) != 0);
      if (__pyx_t_5) {
        __pyx_t_7 = __pyx_v_x;
        __pyx_t_8 = __pyx_v_y;
        ((__pyx_v_board.thunder[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_board.thunder[__pyx_t_7])[__pyx_t_8]) - 1);
      }
    }
  }

  /* "draft.pyx":265
 *             if board.poison[x][y] > 0: board.poison[x][y] -= 1
 *             if board.thunder[x][y] > 0: board.thunder[x][y] -= 1
 *     if board.king[board.current] <= 0:             # <<<<<<<<<<<<<<
 *             board.moral[board.current] -= 3
 * #endregion
 */
  __pyx_t_5 = (((__pyx_v_board.king[__pyx_v_board.current]) <= 0) != 0);
  if (__pyx_t_5) {

    /* "draft.pyx":266
 *             if board.thunder[x][y] > 0: board.thunder[x][y] -= 1
 *     if board.king[board.current] <= 0:
 *             board.moral[board.current] -= 3             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
    __pyx_t_2 = __pyx_v_board.current;
    (__pyx_v_board.moral[__pyx_t_2]) = ((__pyx_v_board.moral[__pyx_t_2]) - 3);

    /* "draft.pyx":265
 *             if board.poison[x][y] > 0: board.poison[x][y] -= 1
 *             if board.thunder[x][y] > 0: board.thunder[x][y] -= 1
 *     if board.king[board.current] <= 0:             # <<<<<<<<<<<<<<
 *             board.moral[board.current] -= 3
 * #endregion
 */
  }

  /* "draft.pyx":247
 * 
 * #region cdef void turn_pass(Board& board)
 * cdef void turn_pass(Board& board):             # <<<<<<<<<<<<<<
 *     cdef int x, y, pxy
 *     # todo: lure
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "draft.pyx":271
 * 
 * #region cdef int simulate_once_with_frequency(Board& initial_board)
 * cdef int simulate_once_with_frequency(Board& initial_board):             # <<<<<<<<<<<<<<
 *     cdef Board test_board
 *     deepcopy_board(test_board, initial_board)
 */

static int __pyx_f_5draft_simulate_once_with_frequency(__pyx_t_6header_Board &__pyx_v_initial_board) {
  __pyx_t_6header_Board __pyx_v_test_board;
  std::vector<__pyx_t_6header_Move>  __pyx_v_possible_moves;
  std::vector<std::pair<int,float> >  __pyx_v_frequency;
  __pyx_t_6header_Move __pyx_v_move;
  int __pyx_v_randno;
  int __pyx_v_loser;
  int __pyx_v_winner;
  int __pyx_v_move_number;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("simulate_once_with_frequency", 0);

  /* "draft.pyx":273
 * cdef int simulate_once_with_frequency(Board& initial_board):
 *     cdef Board test_board
 *     deepcopy_board(test_board, initial_board)             # <<<<<<<<<<<<<<
 *     test_board.current = randint(2) + 1
 * 
 */
  __pyx_f_6header_deepcopy_board(__pyx_v_test_board, __pyx_v_initial_board);

  /* "draft.pyx":274
 *     cdef Board test_board
 *     deepcopy_board(test_board, initial_board)
 *     test_board.current = randint(2) + 1             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Move] possible_moves
 */
  __pyx_v_test_board.current = (__pyx_f_6cyrand_randi(2) + 1);

  /* "draft.pyx":282
 *     cdef int loser, winner, move_number
 * 
 *     for move_number in range(MAX_MOVE_NUMBER):             # <<<<<<<<<<<<<<
 *         if move_number >= 100:
 *             test_board.moral[test_board.current] -= 1
 */
  __pyx_t_1 = __pyx_e_6header_MAX_MOVE_NUMBER;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_move_number = __pyx_t_2;

    /* "draft.pyx":283
 * 
 *     for move_number in range(MAX_MOVE_NUMBER):
 *         if move_number >= 100:             # <<<<<<<<<<<<<<
 *             test_board.moral[test_board.current] -= 1
 *         if test_board.moral[test_board.current] <= 0:
 */
    __pyx_t_3 = ((__pyx_v_move_number >= 0x64) != 0);
    if (__pyx_t_3) {

      /* "draft.pyx":284
 *     for move_number in range(MAX_MOVE_NUMBER):
 *         if move_number >= 100:
 *             test_board.moral[test_board.current] -= 1             # <<<<<<<<<<<<<<
 *         if test_board.moral[test_board.current] <= 0:
 *             loser = test_board.current
 */
      __pyx_t_4 = __pyx_v_test_board.current;
      (__pyx_v_test_board.moral[__pyx_t_4]) = ((__pyx_v_test_board.moral[__pyx_t_4]) - 1);

      /* "draft.pyx":283
 * 
 *     for move_number in range(MAX_MOVE_NUMBER):
 *         if move_number >= 100:             # <<<<<<<<<<<<<<
 *             test_board.moral[test_board.current] -= 1
 *         if test_board.moral[test_board.current] <= 0:
 */
    }

    /* "draft.pyx":285
 *         if move_number >= 100:
 *             test_board.moral[test_board.current] -= 1
 *         if test_board.moral[test_board.current] <= 0:             # <<<<<<<<<<<<<<
 *             loser = test_board.current
 *             break
 */
    __pyx_t_3 = (((__pyx_v_test_board.moral[__pyx_v_test_board.current]) <= 0) != 0);
    if (__pyx_t_3) {

      /* "draft.pyx":286
 *             test_board.moral[test_board.current] -= 1
 *         if test_board.moral[test_board.current] <= 0:
 *             loser = test_board.current             # <<<<<<<<<<<<<<
 *             break
 *         find_possible_moves(test_board, possible_moves, test_board.current)
 */
      __pyx_t_4 = __pyx_v_test_board.current;
      __pyx_v_loser = __pyx_t_4;

      /* "draft.pyx":287
 *         if test_board.moral[test_board.current] <= 0:
 *             loser = test_board.current
 *             break             # <<<<<<<<<<<<<<
 *         find_possible_moves(test_board, possible_moves, test_board.current)
 *         if possible_moves.size() < 1:
 */
      goto __pyx_L4_break;

      /* "draft.pyx":285
 *         if move_number >= 100:
 *             test_board.moral[test_board.current] -= 1
 *         if test_board.moral[test_board.current] <= 0:             # <<<<<<<<<<<<<<
 *             loser = test_board.current
 *             break
 */
    }

    /* "draft.pyx":288
 *             loser = test_board.current
 *             break
 *         find_possible_moves(test_board, possible_moves, test_board.current)             # <<<<<<<<<<<<<<
 *         if possible_moves.size() < 1:
 *             loser = test_board.current
 */
    __pyx_f_5draft_find_possible_moves(__pyx_v_test_board, __pyx_v_possible_moves, __pyx_v_test_board.current);

    /* "draft.pyx":289
 *             break
 *         find_possible_moves(test_board, possible_moves, test_board.current)
 *         if possible_moves.size() < 1:             # <<<<<<<<<<<<<<
 *             loser = test_board.current
 *             break
 */
    __pyx_t_3 = ((__pyx_v_possible_moves.size() < 1) != 0);
    if (__pyx_t_3) {

      /* "draft.pyx":290
 *         find_possible_moves(test_board, possible_moves, test_board.current)
 *         if possible_moves.size() < 1:
 *             loser = test_board.current             # <<<<<<<<<<<<<<
 *             break
 *         find_good_moves(test_board, frequency, possible_moves, test_board.current)
 */
      __pyx_t_4 = __pyx_v_test_board.current;
      __pyx_v_loser = __pyx_t_4;

      /* "draft.pyx":291
 *         if possible_moves.size() < 1:
 *             loser = test_board.current
 *             break             # <<<<<<<<<<<<<<
 *         find_good_moves(test_board, frequency, possible_moves, test_board.current)
 *         # for i in range(possible_moves.size()):
 */
      goto __pyx_L4_break;

      /* "draft.pyx":289
 *             break
 *         find_possible_moves(test_board, possible_moves, test_board.current)
 *         if possible_moves.size() < 1:             # <<<<<<<<<<<<<<
 *             loser = test_board.current
 *             break
 */
    }

    /* "draft.pyx":292
 *             loser = test_board.current
 *             break
 *         find_good_moves(test_board, frequency, possible_moves, test_board.current)             # <<<<<<<<<<<<<<
 *         # for i in range(possible_moves.size()):
 *         #     frequency.push_back(evaluate_move(test_board, possible_moves[i], test_board.current))
 */
    __pyx_f_5draft_find_good_moves(__pyx_v_test_board, __pyx_v_frequency, __pyx_v_possible_moves, __pyx_v_test_board.current, NULL);

    /* "draft.pyx":295
 *         # for i in range(possible_moves.size()):
 *         #     frequency.push_back(evaluate_move(test_board, possible_moves[i], test_board.current))
 *         randno = random_with_frequency(frequency)             # <<<<<<<<<<<<<<
 *         # print('#%d in %d candidates.' % (randno + 1, possible_moves.size()))
 *         move = possible_moves[randno]
 */
    __pyx_v_randno = __pyx_f_5draft_random_with_frequency(__pyx_v_frequency);

    /* "draft.pyx":297
 *         randno = random_with_frequency(frequency)
 *         # print('#%d in %d candidates.' % (randno + 1, possible_moves.size()))
 *         move = possible_moves[randno]             # <<<<<<<<<<<<<<
 *         # print('Player %d: <%s> (%d, %d) -\"%s\"-> (%d, %d)' % (test_board.current, piece_list[test_board.pieces[move.xfrom][move.yfrom]].name.decode(), move.xfrom, move.yfrom, actions[move.actno].description.decode(), move.xto, move.yto))
 *         actions[move.actno].cast(test_board, move.xfrom, move.yfrom, move.xto, move.yto)
 */
    __pyx_v_move = (__pyx_v_possible_moves[__pyx_v_randno]);

    /* "draft.pyx":299
 *         move = possible_moves[randno]
 *         # print('Player %d: <%s> (%d, %d) -\"%s\"-> (%d, %d)' % (test_board.current, piece_list[test_board.pieces[move.xfrom][move.yfrom]].name.decode(), move.xfrom, move.yfrom, actions[move.actno].description.decode(), move.xto, move.yto))
 *         actions[move.actno].cast(test_board, move.xfrom, move.yfrom, move.xto, move.yto)             # <<<<<<<<<<<<<<
 *         # pprint(test_board.pieces, width=45)
 *         # print('moral = [%d]:[%d]\n' % (test_board.moral[1], test_board.moral[2]))
 */
    (__pyx_v_7Actions_actions[__pyx_v_move.actno]).cast(__pyx_v_test_board, __pyx_v_move.xfrom, __pyx_v_move.yfrom, __pyx_v_move.xto, __pyx_v_move.yto);

    /* "draft.pyx":302
 *         # pprint(test_board.pieces, width=45)
 *         # print('moral = [%d]:[%d]\n' % (test_board.moral[1], test_board.moral[2]))
 *         turn_pass(test_board)             # <<<<<<<<<<<<<<
 *     else:
 *         loser = randint(2) + 1
 */
    __pyx_f_5draft_turn_pass(__pyx_v_test_board);
  }
  /*else*/ {

    /* "draft.pyx":304
 *         turn_pass(test_board)
 *     else:
 *         loser = randint(2) + 1             # <<<<<<<<<<<<<<
 * 
 *     winner = enemy_player(loser)
 */
    __pyx_v_loser = (__pyx_f_6cyrand_randi(2) + 1);
  }
  __pyx_L4_break:;

  /* "draft.pyx":306
 *         loser = randint(2) + 1
 * 
 *     winner = enemy_player(loser)             # <<<<<<<<<<<<<<
 *     return winner
 * #endregion
 */
  __pyx_v_winner = __pyx_f_6header_enemy_player(__pyx_v_loser);

  /* "draft.pyx":307
 * 
 *     winner = enemy_player(loser)
 *     return winner             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
  __pyx_r = __pyx_v_winner;
  goto __pyx_L0;

  /* "draft.pyx":271
 * 
 * #region cdef int simulate_once_with_frequency(Board& initial_board)
 * cdef int simulate_once_with_frequency(Board& initial_board):             # <<<<<<<<<<<<<<
 *     cdef Board test_board
 *     deepcopy_board(test_board, initial_board)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":312
 * 
 * #region cdef int simulate_once(Board& initial_board)
 * cdef int simulate_once(Board& initial_board):             # <<<<<<<<<<<<<<
 *     cdef Board test_board
 *     deepcopy_board(test_board, initial_board)
 */

static int __pyx_f_5draft_simulate_once(__pyx_t_6header_Board &__pyx_v_initial_board) {
  __pyx_t_6header_Board __pyx_v_test_board;
  std::vector<__pyx_t_6header_Move>  __pyx_v_possible_moves;
  __pyx_t_6header_Move __pyx_v_move;
  int __pyx_v_loser;
  int __pyx_v_winner;
  int __pyx_v_move_number;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("simulate_once", 0);

  /* "draft.pyx":314
 * cdef int simulate_once(Board& initial_board):
 *     cdef Board test_board
 *     deepcopy_board(test_board, initial_board)             # <<<<<<<<<<<<<<
 *     # test_board.pieces = [[2, 2, 2], [0, 0, 0], [3, 3, 3]]
 *     # test_board.ownerships = [[1, 1, 1], [0, 0, 0], [2, 2, 2]]
 */
  __pyx_f_6header_deepcopy_board(__pyx_v_test_board, __pyx_v_initial_board);

  /* "draft.pyx":317
 *     # test_board.pieces = [[2, 2, 2], [0, 0, 0], [3, 3, 3]]
 *     # test_board.ownerships = [[1, 1, 1], [0, 0, 0], [2, 2, 2]]
 *     test_board.current = randint(2) + 1             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Move] possible_moves
 */
  __pyx_v_test_board.current = (__pyx_f_6cyrand_randi(2) + 1);

  /* "draft.pyx":323
 *     cdef int loser, winner, move_number
 * 
 *     for move_number in range(MAX_MOVE_NUMBER):             # <<<<<<<<<<<<<<
 *         if move_number >= 100:
 *             test_board.moral[test_board.current] -= 1
 */
  __pyx_t_1 = __pyx_e_6header_MAX_MOVE_NUMBER;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_move_number = __pyx_t_2;

    /* "draft.pyx":324
 * 
 *     for move_number in range(MAX_MOVE_NUMBER):
 *         if move_number >= 100:             # <<<<<<<<<<<<<<
 *             test_board.moral[test_board.current] -= 1
 *         if test_board.moral[test_board.current] <= 0:
 */
    __pyx_t_3 = ((__pyx_v_move_number >= 0x64) != 0);
    if (__pyx_t_3) {

      /* "draft.pyx":325
 *     for move_number in range(MAX_MOVE_NUMBER):
 *         if move_number >= 100:
 *             test_board.moral[test_board.current] -= 1             # <<<<<<<<<<<<<<
 *         if test_board.moral[test_board.current] <= 0:
 *             loser = test_board.current
 */
      __pyx_t_4 = __pyx_v_test_board.current;
      (__pyx_v_test_board.moral[__pyx_t_4]) = ((__pyx_v_test_board.moral[__pyx_t_4]) - 1);

      /* "draft.pyx":324
 * 
 *     for move_number in range(MAX_MOVE_NUMBER):
 *         if move_number >= 100:             # <<<<<<<<<<<<<<
 *             test_board.moral[test_board.current] -= 1
 *         if test_board.moral[test_board.current] <= 0:
 */
    }

    /* "draft.pyx":326
 *         if move_number >= 100:
 *             test_board.moral[test_board.current] -= 1
 *         if test_board.moral[test_board.current] <= 0:             # <<<<<<<<<<<<<<
 *             loser = test_board.current
 *             break
 */
    __pyx_t_3 = (((__pyx_v_test_board.moral[__pyx_v_test_board.current]) <= 0) != 0);
    if (__pyx_t_3) {

      /* "draft.pyx":327
 *             test_board.moral[test_board.current] -= 1
 *         if test_board.moral[test_board.current] <= 0:
 *             loser = test_board.current             # <<<<<<<<<<<<<<
 *             break
 *         find_possible_moves(test_board, possible_moves, test_board.current)
 */
      __pyx_t_4 = __pyx_v_test_board.current;
      __pyx_v_loser = __pyx_t_4;

      /* "draft.pyx":328
 *         if test_board.moral[test_board.current] <= 0:
 *             loser = test_board.current
 *             break             # <<<<<<<<<<<<<<
 *         find_possible_moves(test_board, possible_moves, test_board.current)
 *         if possible_moves.size() < 1:
 */
      goto __pyx_L4_break;

      /* "draft.pyx":326
 *         if move_number >= 100:
 *             test_board.moral[test_board.current] -= 1
 *         if test_board.moral[test_board.current] <= 0:             # <<<<<<<<<<<<<<
 *             loser = test_board.current
 *             break
 */
    }

    /* "draft.pyx":329
 *             loser = test_board.current
 *             break
 *         find_possible_moves(test_board, possible_moves, test_board.current)             # <<<<<<<<<<<<<<
 *         if possible_moves.size() < 1:
 *             # print('Player %d passes.' % (test_board.current,))
 */
    __pyx_f_5draft_find_possible_moves(__pyx_v_test_board, __pyx_v_possible_moves, __pyx_v_test_board.current);

    /* "draft.pyx":330
 *             break
 *         find_possible_moves(test_board, possible_moves, test_board.current)
 *         if possible_moves.size() < 1:             # <<<<<<<<<<<<<<
 *             # print('Player %d passes.' % (test_board.current,))
 *             loser = test_board.current
 */
    __pyx_t_3 = ((__pyx_v_possible_moves.size() < 1) != 0);
    if (__pyx_t_3) {

      /* "draft.pyx":332
 *         if possible_moves.size() < 1:
 *             # print('Player %d passes.' % (test_board.current,))
 *             loser = test_board.current             # <<<<<<<<<<<<<<
 *             break
 *         move = possible_moves[randint(possible_moves.size())]
 */
      __pyx_t_4 = __pyx_v_test_board.current;
      __pyx_v_loser = __pyx_t_4;

      /* "draft.pyx":333
 *             # print('Player %d passes.' % (test_board.current,))
 *             loser = test_board.current
 *             break             # <<<<<<<<<<<<<<
 *         move = possible_moves[randint(possible_moves.size())]
 *         # print('Player %d: (%d, %d) --%d--> (%d, %d)' % (test_board.current, move.xfrom, move.yfrom, move.actno, move.xto, move.yto))
 */
      goto __pyx_L4_break;

      /* "draft.pyx":330
 *             break
 *         find_possible_moves(test_board, possible_moves, test_board.current)
 *         if possible_moves.size() < 1:             # <<<<<<<<<<<<<<
 *             # print('Player %d passes.' % (test_board.current,))
 *             loser = test_board.current
 */
    }

    /* "draft.pyx":334
 *             loser = test_board.current
 *             break
 *         move = possible_moves[randint(possible_moves.size())]             # <<<<<<<<<<<<<<
 *         # print('Player %d: (%d, %d) --%d--> (%d, %d)' % (test_board.current, move.xfrom, move.yfrom, move.actno, move.xto, move.yto))
 *         actions[move.actno].cast(test_board, move.xfrom, move.yfrom, move.xto, move.yto)
 */
    __pyx_v_move = (__pyx_v_possible_moves[__pyx_f_6cyrand_randi(__pyx_v_possible_moves.size())]);

    /* "draft.pyx":336
 *         move = possible_moves[randint(possible_moves.size())]
 *         # print('Player %d: (%d, %d) --%d--> (%d, %d)' % (test_board.current, move.xfrom, move.yfrom, move.actno, move.xto, move.yto))
 *         actions[move.actno].cast(test_board, move.xfrom, move.yfrom, move.xto, move.yto)             # <<<<<<<<<<<<<<
 *         # pprint(test_board.pieces, width=30)
 *         turn_pass(test_board)
 */
    (__pyx_v_7Actions_actions[__pyx_v_move.actno]).cast(__pyx_v_test_board, __pyx_v_move.xfrom, __pyx_v_move.yfrom, __pyx_v_move.xto, __pyx_v_move.yto);

    /* "draft.pyx":338
 *         actions[move.actno].cast(test_board, move.xfrom, move.yfrom, move.xto, move.yto)
 *         # pprint(test_board.pieces, width=30)
 *         turn_pass(test_board)             # <<<<<<<<<<<<<<
 *     else:
 *         loser = randint(2) + 1
 */
    __pyx_f_5draft_turn_pass(__pyx_v_test_board);
  }
  /*else*/ {

    /* "draft.pyx":340
 *         turn_pass(test_board)
 *     else:
 *         loser = randint(2) + 1             # <<<<<<<<<<<<<<
 * 
 *     winner = enemy_player(loser)
 */
    __pyx_v_loser = (__pyx_f_6cyrand_randi(2) + 1);
  }
  __pyx_L4_break:;

  /* "draft.pyx":342
 *         loser = randint(2) + 1
 * 
 *     winner = enemy_player(loser)             # <<<<<<<<<<<<<<
 *     return winner
 * #endregion
 */
  __pyx_v_winner = __pyx_f_6header_enemy_player(__pyx_v_loser);

  /* "draft.pyx":343
 * 
 *     winner = enemy_player(loser)
 *     return winner             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
  __pyx_r = __pyx_v_winner;
  goto __pyx_L0;

  /* "draft.pyx":312
 * 
 * #region cdef int simulate_once(Board& initial_board)
 * cdef int simulate_once(Board& initial_board):             # <<<<<<<<<<<<<<
 *     cdef Board test_board
 *     deepcopy_board(test_board, initial_board)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":348
 * 
 * #region cpdef void simulate(str player1_setup, str player2_setup, int number_of_games, int with_frequency=0)
 * cpdef float simulate(str player1_setup, str player2_setup, int number_of_games, int with_frequency=0, int to_display=1):             # <<<<<<<<<<<<<<
 *     cdef int i, p1_wins = 0
 *     cdef float p1_rate
 */

static PyObject *__pyx_pw_5draft_1simulate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static float __pyx_f_5draft_simulate(PyObject *__pyx_v_player1_setup, PyObject *__pyx_v_player2_setup, int __pyx_v_number_of_games, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5draft_simulate *__pyx_optional_args) {
  int __pyx_v_with_frequency = ((int)0);
  int __pyx_v_to_display = ((int)1);
  int __pyx_v_i;
  int __pyx_v_p1_wins;
  float __pyx_v_p1_rate;
  __pyx_t_6header_Board __pyx_v_initial;
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  long __pyx_t_9;
  __Pyx_RefNannySetupContext("simulate", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_with_frequency = __pyx_optional_args->with_frequency;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_to_display = __pyx_optional_args->to_display;
      }
    }
  }

  /* "draft.pyx":349
 * #region cpdef void simulate(str player1_setup, str player2_setup, int number_of_games, int with_frequency=0)
 * cpdef float simulate(str player1_setup, str player2_setup, int number_of_games, int with_frequency=0, int to_display=1):
 *     cdef int i, p1_wins = 0             # <<<<<<<<<<<<<<
 *     cdef float p1_rate
 *     cdef Board initial
 */
  __pyx_v_p1_wins = 0;

  /* "draft.pyx":352
 *     cdef float p1_rate
 *     cdef Board initial
 *     build_board(initial, piece_list, player1_setup, player2_setup)             # <<<<<<<<<<<<<<
 *     if to_display: print('\nmoral = [%d]:[%d]' % (initial.moral[1], initial.moral[2]))
 *     if to_display: pprint(initial.pieces, width=45)
 */
  __pyx_f_5draft_build_board(__pyx_v_initial, __pyx_v_6Pieces_piece_list, __pyx_v_player1_setup, __pyx_v_player2_setup);

  /* "draft.pyx":353
 *     cdef Board initial
 *     build_board(initial, piece_list, player1_setup, player2_setup)
 *     if to_display: print('\nmoral = [%d]:[%d]' % (initial.moral[1], initial.moral[2]))             # <<<<<<<<<<<<<<
 *     if to_display: pprint(initial.pieces, width=45)
 *     if with_frequency == 0:
 */
  __pyx_t_1 = (__pyx_v_to_display != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_initial.moral[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_initial.moral[2])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_moral_d_d, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_3) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "draft.pyx":354
 *     build_board(initial, piece_list, player1_setup, player2_setup)
 *     if to_display: print('\nmoral = [%d]:[%d]' % (initial.moral[1], initial.moral[2]))
 *     if to_display: pprint(initial.pieces, width=45)             # <<<<<<<<<<<<<<
 *     if with_frequency == 0:
 *         for i in range(number_of_games):
 */
  __pyx_t_1 = (__pyx_v_to_display != 0);
  if (__pyx_t_1) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pprint); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_initial.pieces); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_width, __pyx_int_45) < 0) __PYX_ERR(0, 354, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "draft.pyx":355
 *     if to_display: print('\nmoral = [%d]:[%d]' % (initial.moral[1], initial.moral[2]))
 *     if to_display: pprint(initial.pieces, width=45)
 *     if with_frequency == 0:             # <<<<<<<<<<<<<<
 *         for i in range(number_of_games):
 *             if to_display and i % 1000 == 0:
 */
  __pyx_t_1 = ((__pyx_v_with_frequency == 0) != 0);
  if (__pyx_t_1) {

    /* "draft.pyx":356
 *     if to_display: pprint(initial.pieces, width=45)
 *     if with_frequency == 0:
 *         for i in range(number_of_games):             # <<<<<<<<<<<<<<
 *             if to_display and i % 1000 == 0:
 *                 print('%d%% completed...' % (i * 100 / number_of_games,))
 */
    __pyx_t_6 = __pyx_v_number_of_games;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "draft.pyx":357
 *     if with_frequency == 0:
 *         for i in range(number_of_games):
 *             if to_display and i % 1000 == 0:             # <<<<<<<<<<<<<<
 *                 print('%d%% completed...' % (i * 100 / number_of_games,))
 *             if simulate_once(initial) == 1:
 */
      __pyx_t_8 = (__pyx_v_to_display != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_8 = ((__Pyx_mod_long(__pyx_v_i, 0x3E8) == 0) != 0);
      __pyx_t_1 = __pyx_t_8;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_1) {

        /* "draft.pyx":358
 *         for i in range(number_of_games):
 *             if to_display and i % 1000 == 0:
 *                 print('%d%% completed...' % (i * 100 / number_of_games,))             # <<<<<<<<<<<<<<
 *             if simulate_once(initial) == 1:
 *                 p1_wins += 1
 */
        __pyx_t_9 = (__pyx_v_i * 0x64);
        if (unlikely(__pyx_v_number_of_games == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 358, __pyx_L1_error)
        }
        else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_number_of_games == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_9))) {
          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
          __PYX_ERR(0, 358, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyInt_From_long(__Pyx_div_long(__pyx_t_9, __pyx_v_number_of_games)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_d_completed, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "draft.pyx":357
 *     if with_frequency == 0:
 *         for i in range(number_of_games):
 *             if to_display and i % 1000 == 0:             # <<<<<<<<<<<<<<
 *                 print('%d%% completed...' % (i * 100 / number_of_games,))
 *             if simulate_once(initial) == 1:
 */
      }

      /* "draft.pyx":359
 *             if to_display and i % 1000 == 0:
 *                 print('%d%% completed...' % (i * 100 / number_of_games,))
 *             if simulate_once(initial) == 1:             # <<<<<<<<<<<<<<
 *                 p1_wins += 1
 *     else:
 */
      __pyx_t_1 = ((__pyx_f_5draft_simulate_once(__pyx_v_initial) == 1) != 0);
      if (__pyx_t_1) {

        /* "draft.pyx":360
 *                 print('%d%% completed...' % (i * 100 / number_of_games,))
 *             if simulate_once(initial) == 1:
 *                 p1_wins += 1             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(number_of_games):
 */
        __pyx_v_p1_wins = (__pyx_v_p1_wins + 1);

        /* "draft.pyx":359
 *             if to_display and i % 1000 == 0:
 *                 print('%d%% completed...' % (i * 100 / number_of_games,))
 *             if simulate_once(initial) == 1:             # <<<<<<<<<<<<<<
 *                 p1_wins += 1
 *     else:
 */
      }
    }

    /* "draft.pyx":355
 *     if to_display: print('\nmoral = [%d]:[%d]' % (initial.moral[1], initial.moral[2]))
 *     if to_display: pprint(initial.pieces, width=45)
 *     if with_frequency == 0:             # <<<<<<<<<<<<<<
 *         for i in range(number_of_games):
 *             if to_display and i % 1000 == 0:
 */
    goto __pyx_L5;
  }

  /* "draft.pyx":362
 *                 p1_wins += 1
 *     else:
 *         for i in range(number_of_games):             # <<<<<<<<<<<<<<
 *             if to_display: print('%d%% completed...' % (i * 100 / number_of_games,))
 *             if simulate_once_with_frequency(initial) == 1:
 */
  /*else*/ {
    __pyx_t_6 = __pyx_v_number_of_games;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "draft.pyx":363
 *     else:
 *         for i in range(number_of_games):
 *             if to_display: print('%d%% completed...' % (i * 100 / number_of_games,))             # <<<<<<<<<<<<<<
 *             if simulate_once_with_frequency(initial) == 1:
 *                 p1_wins += 1
 */
      __pyx_t_1 = (__pyx_v_to_display != 0);
      if (__pyx_t_1) {
        __pyx_t_9 = (__pyx_v_i * 0x64);
        if (unlikely(__pyx_v_number_of_games == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 363, __pyx_L1_error)
        }
        else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_number_of_games == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_9))) {
          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
          __PYX_ERR(0, 363, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyInt_From_long(__Pyx_div_long(__pyx_t_9, __pyx_v_number_of_games)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 363, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_d_completed, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__Pyx_PrintOne(0, __pyx_t_5) < 0) __PYX_ERR(0, 363, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }

      /* "draft.pyx":364
 *         for i in range(number_of_games):
 *             if to_display: print('%d%% completed...' % (i * 100 / number_of_games,))
 *             if simulate_once_with_frequency(initial) == 1:             # <<<<<<<<<<<<<<
 *                 p1_wins += 1
 *     if to_display: print('100% completed...')
 */
      __pyx_t_1 = ((__pyx_f_5draft_simulate_once_with_frequency(__pyx_v_initial) == 1) != 0);
      if (__pyx_t_1) {

        /* "draft.pyx":365
 *             if to_display: print('%d%% completed...' % (i * 100 / number_of_games,))
 *             if simulate_once_with_frequency(initial) == 1:
 *                 p1_wins += 1             # <<<<<<<<<<<<<<
 *     if to_display: print('100% completed...')
 *     p1_rate = <float> p1_wins / <float> number_of_games
 */
        __pyx_v_p1_wins = (__pyx_v_p1_wins + 1);

        /* "draft.pyx":364
 *         for i in range(number_of_games):
 *             if to_display: print('%d%% completed...' % (i * 100 / number_of_games,))
 *             if simulate_once_with_frequency(initial) == 1:             # <<<<<<<<<<<<<<
 *                 p1_wins += 1
 *     if to_display: print('100% completed...')
 */
      }
    }
  }
  __pyx_L5:;

  /* "draft.pyx":366
 *             if simulate_once_with_frequency(initial) == 1:
 *                 p1_wins += 1
 *     if to_display: print('100% completed...')             # <<<<<<<<<<<<<<
 *     p1_rate = <float> p1_wins / <float> number_of_games
 *     if to_display: print('Player 1 has a Win%% of [%.1f%%] (wins %d times out of %d games).' % (p1_rate * 100., p1_wins, number_of_games))
 */
  __pyx_t_1 = (__pyx_v_to_display != 0);
  if (__pyx_t_1) {
    if (__Pyx_PrintOne(0, __pyx_kp_s_100_completed) < 0) __PYX_ERR(0, 366, __pyx_L1_error)
  }

  /* "draft.pyx":367
 *                 p1_wins += 1
 *     if to_display: print('100% completed...')
 *     p1_rate = <float> p1_wins / <float> number_of_games             # <<<<<<<<<<<<<<
 *     if to_display: print('Player 1 has a Win%% of [%.1f%%] (wins %d times out of %d games).' % (p1_rate * 100., p1_wins, number_of_games))
 *     return p1_rate
 */
  if (unlikely(((float)__pyx_v_number_of_games) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 367, __pyx_L1_error)
  }
  __pyx_v_p1_rate = (((float)__pyx_v_p1_wins) / ((float)__pyx_v_number_of_games));

  /* "draft.pyx":368
 *     if to_display: print('100% completed...')
 *     p1_rate = <float> p1_wins / <float> number_of_games
 *     if to_display: print('Player 1 has a Win%% of [%.1f%%] (wins %d times out of %d games).' % (p1_rate * 100., p1_wins, number_of_games))             # <<<<<<<<<<<<<<
 *     return p1_rate
 * #endregion
 */
  __pyx_t_1 = (__pyx_v_to_display != 0);
  if (__pyx_t_1) {
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_p1_rate * 100.)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_p1_wins); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_number_of_games); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_4 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Player_1_has_a_Win_of_1f_wins_d, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "draft.pyx":369
 *     p1_rate = <float> p1_wins / <float> number_of_games
 *     if to_display: print('Player 1 has a Win%% of [%.1f%%] (wins %d times out of %d games).' % (p1_rate * 100., p1_wins, number_of_games))
 *     return p1_rate             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
  __pyx_r = __pyx_v_p1_rate;
  goto __pyx_L0;

  /* "draft.pyx":348
 * 
 * #region cpdef void simulate(str player1_setup, str player2_setup, int number_of_games, int with_frequency=0)
 * cpdef float simulate(str player1_setup, str player2_setup, int number_of_games, int with_frequency=0, int to_display=1):             # <<<<<<<<<<<<<<
 *     cdef int i, p1_wins = 0
 *     cdef float p1_rate
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("draft.simulate", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5draft_1simulate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5draft_1simulate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player1_setup = 0;
  PyObject *__pyx_v_player2_setup = 0;
  int __pyx_v_number_of_games;
  int __pyx_v_with_frequency;
  int __pyx_v_to_display;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("simulate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player1_setup,&__pyx_n_s_player2_setup,&__pyx_n_s_number_of_games,&__pyx_n_s_with_frequency,&__pyx_n_s_to_display,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player1_setup)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player2_setup)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("simulate", 0, 3, 5, 1); __PYX_ERR(0, 348, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_number_of_games)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("simulate", 0, 3, 5, 2); __PYX_ERR(0, 348, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_with_frequency);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_display);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "simulate") < 0)) __PYX_ERR(0, 348, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_player1_setup = ((PyObject*)values[0]);
    __pyx_v_player2_setup = ((PyObject*)values[1]);
    __pyx_v_number_of_games = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_number_of_games == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_with_frequency = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_with_frequency == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
    } else {
      __pyx_v_with_frequency = ((int)0);
    }
    if (values[4]) {
      __pyx_v_to_display = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_to_display == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
    } else {
      __pyx_v_to_display = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("simulate", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 348, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("draft.simulate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player1_setup), (&PyString_Type), 1, "player1_setup", 1))) __PYX_ERR(0, 348, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player2_setup), (&PyString_Type), 1, "player2_setup", 1))) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_r = __pyx_pf_5draft_simulate(__pyx_self, __pyx_v_player1_setup, __pyx_v_player2_setup, __pyx_v_number_of_games, __pyx_v_with_frequency, __pyx_v_to_display);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5draft_simulate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_player1_setup, PyObject *__pyx_v_player2_setup, int __pyx_v_number_of_games, int __pyx_v_with_frequency, int __pyx_v_to_display) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  struct __pyx_opt_args_5draft_simulate __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("simulate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.with_frequency = __pyx_v_with_frequency;
  __pyx_t_2.to_display = __pyx_v_to_display;
  __pyx_t_1 = __pyx_f_5draft_simulate(__pyx_v_player1_setup, __pyx_v_player2_setup, __pyx_v_number_of_games, 0, &__pyx_t_2); 
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("draft.simulate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":373
 * 
 * #region FOOBAR
 * cpdef int random_piece(int be_minion=0, int be_champion=0):             # <<<<<<<<<<<<<<
 *     if be_minion and be_champion:
 *         return 0
 */

static PyObject *__pyx_pw_5draft_3random_piece(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_5draft_random_piece(CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_5draft_random_piece *__pyx_optional_args) {
  int __pyx_v_be_minion = ((int)0);
  int __pyx_v_be_champion = ((int)0);
  int __pyx_v_num;
  __pyx_t_6header_Piece *__pyx_v_p;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("random_piece", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_be_minion = __pyx_optional_args->be_minion;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_be_champion = __pyx_optional_args->be_champion;
      }
    }
  }

  /* "draft.pyx":374
 * #region FOOBAR
 * cpdef int random_piece(int be_minion=0, int be_champion=0):
 *     if be_minion and be_champion:             # <<<<<<<<<<<<<<
 *         return 0
 *     cdef int num = randint(piece_list.size())
 */
  __pyx_t_2 = (__pyx_v_be_minion != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_be_champion != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "draft.pyx":375
 * cpdef int random_piece(int be_minion=0, int be_champion=0):
 *     if be_minion and be_champion:
 *         return 0             # <<<<<<<<<<<<<<
 *     cdef int num = randint(piece_list.size())
 *     cdef Piece* p = addr(piece_list[num])
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "draft.pyx":374
 * #region FOOBAR
 * cpdef int random_piece(int be_minion=0, int be_champion=0):
 *     if be_minion and be_champion:             # <<<<<<<<<<<<<<
 *         return 0
 *     cdef int num = randint(piece_list.size())
 */
  }

  /* "draft.pyx":376
 *     if be_minion and be_champion:
 *         return 0
 *     cdef int num = randint(piece_list.size())             # <<<<<<<<<<<<<<
 *     cdef Piece* p = addr(piece_list[num])
 *     while (p.name == b'Unnamed') or (not p.minion and not p.champion)\
 */
  __pyx_v_num = __pyx_f_6cyrand_randi(__pyx_v_6Pieces_piece_list.size());

  /* "draft.pyx":377
 *         return 0
 *     cdef int num = randint(piece_list.size())
 *     cdef Piece* p = addr(piece_list[num])             # <<<<<<<<<<<<<<
 *     while (p.name == b'Unnamed') or (not p.minion and not p.champion)\
 *             or (be_minion and not p.minion) or (be_champion and not p.champion):
 */
  __pyx_v_p = (&(__pyx_v_6Pieces_piece_list[__pyx_v_num]));

  /* "draft.pyx":378
 *     cdef int num = randint(piece_list.size())
 *     cdef Piece* p = addr(piece_list[num])
 *     while (p.name == b'Unnamed') or (not p.minion and not p.champion)\             # <<<<<<<<<<<<<<
 *             or (be_minion and not p.minion) or (be_champion and not p.champion):
 *         num = randint(piece_list.size())
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_p->name == ((char *)"Unnamed")) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }

    /* "draft.pyx":379
 *     cdef Piece* p = addr(piece_list[num])
 *     while (p.name == b'Unnamed') or (not p.minion and not p.champion)\
 *             or (be_minion and not p.minion) or (be_champion and not p.champion):             # <<<<<<<<<<<<<<
 *         num = randint(piece_list.size())
 *         p = addr(piece_list[num])
 */
    __pyx_t_2 = ((!(__pyx_v_p->minion != 0)) != 0);
    if (!__pyx_t_2) {
      goto __pyx_L10_next_or;
    } else {
    }

    /* "draft.pyx":378
 *     cdef int num = randint(piece_list.size())
 *     cdef Piece* p = addr(piece_list[num])
 *     while (p.name == b'Unnamed') or (not p.minion and not p.champion)\             # <<<<<<<<<<<<<<
 *             or (be_minion and not p.minion) or (be_champion and not p.champion):
 *         num = randint(piece_list.size())
 */
    __pyx_t_2 = ((!(__pyx_v_p->champion != 0)) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_L10_next_or:;

    /* "draft.pyx":379
 *     cdef Piece* p = addr(piece_list[num])
 *     while (p.name == b'Unnamed') or (not p.minion and not p.champion)\
 *             or (be_minion and not p.minion) or (be_champion and not p.champion):             # <<<<<<<<<<<<<<
 *         num = randint(piece_list.size())
 *         p = addr(piece_list[num])
 */
    __pyx_t_2 = (__pyx_v_be_minion != 0);
    if (!__pyx_t_2) {
      goto __pyx_L12_next_or;
    } else {
    }
    __pyx_t_2 = ((!(__pyx_v_p->minion != 0)) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_L12_next_or:;
    __pyx_t_2 = (__pyx_v_be_champion != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_p->champion != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L8_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "draft.pyx":380
 *     while (p.name == b'Unnamed') or (not p.minion and not p.champion)\
 *             or (be_minion and not p.minion) or (be_champion and not p.champion):
 *         num = randint(piece_list.size())             # <<<<<<<<<<<<<<
 *         p = addr(piece_list[num])
 *     return num
 */
    __pyx_v_num = __pyx_f_6cyrand_randi(__pyx_v_6Pieces_piece_list.size());

    /* "draft.pyx":381
 *             or (be_minion and not p.minion) or (be_champion and not p.champion):
 *         num = randint(piece_list.size())
 *         p = addr(piece_list[num])             # <<<<<<<<<<<<<<
 *     return num
 * 
 */
    __pyx_v_p = (&(__pyx_v_6Pieces_piece_list[__pyx_v_num]));
  }

  /* "draft.pyx":382
 *         num = randint(piece_list.size())
 *         p = addr(piece_list[num])
 *     return num             # <<<<<<<<<<<<<<
 * 
 * cpdef dict to_piece(int num):
 */
  __pyx_r = __pyx_v_num;
  goto __pyx_L0;

  /* "draft.pyx":373
 * 
 * #region FOOBAR
 * cpdef int random_piece(int be_minion=0, int be_champion=0):             # <<<<<<<<<<<<<<
 *     if be_minion and be_champion:
 *         return 0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5draft_3random_piece(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5draft_3random_piece(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_be_minion;
  int __pyx_v_be_champion;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("random_piece (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_be_minion,&__pyx_n_s_be_champion,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_be_minion);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_be_champion);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random_piece") < 0)) __PYX_ERR(0, 373, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_be_minion = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_be_minion == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
    } else {
      __pyx_v_be_minion = ((int)0);
    }
    if (values[1]) {
      __pyx_v_be_champion = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_be_champion == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 373, __pyx_L3_error)
    } else {
      __pyx_v_be_champion = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("random_piece", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 373, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("draft.random_piece", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5draft_2random_piece(__pyx_self, __pyx_v_be_minion, __pyx_v_be_champion);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5draft_2random_piece(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_be_minion, int __pyx_v_be_champion) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_5draft_random_piece __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("random_piece", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.be_minion = __pyx_v_be_minion;
  __pyx_t_2.be_champion = __pyx_v_be_champion;
  __pyx_t_1 = __pyx_f_5draft_random_piece(0, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("draft.random_piece", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":384
 *     return num
 * 
 * cpdef dict to_piece(int num):             # <<<<<<<<<<<<<<
 *     cdef Piece p = piece_list.at(num)
 *     return {'name': p.name, 'cost': p.cost}
 */

static PyObject *__pyx_pw_5draft_5to_piece(PyObject *__pyx_self, PyObject *__pyx_arg_num); /*proto*/
static PyObject *__pyx_f_5draft_to_piece(int __pyx_v_num, CYTHON_UNUSED int __pyx_skip_dispatch) {
  __pyx_t_6header_Piece __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<__pyx_t_6header_Piece> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("to_piece", 0);

  /* "draft.pyx":385
 * 
 * cpdef dict to_piece(int num):
 *     cdef Piece p = piece_list.at(num)             # <<<<<<<<<<<<<<
 *     return {'name': p.name, 'cost': p.cost}
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_6Pieces_piece_list.at(__pyx_v_num);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 385, __pyx_L1_error)
  }
  __pyx_v_p = __pyx_t_1;

  /* "draft.pyx":386
 * cpdef dict to_piece(int num):
 *     cdef Piece p = piece_list.at(num)
 *     return {'name': p.name, 'cost': p.cost}             # <<<<<<<<<<<<<<
 * 
 * cpdef str to_piece_cost(int num):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_p.name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_name, __pyx_t_3) < 0) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_p.cost); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_cost, __pyx_t_3) < 0) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "draft.pyx":384
 *     return num
 * 
 * cpdef dict to_piece(int num):             # <<<<<<<<<<<<<<
 *     cdef Piece p = piece_list.at(num)
 *     return {'name': p.name, 'cost': p.cost}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("draft.to_piece", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5draft_5to_piece(PyObject *__pyx_self, PyObject *__pyx_arg_num); /*proto*/
static PyObject *__pyx_pw_5draft_5to_piece(PyObject *__pyx_self, PyObject *__pyx_arg_num) {
  int __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_piece (wrapper)", 0);
  assert(__pyx_arg_num); {
    __pyx_v_num = __Pyx_PyInt_As_int(__pyx_arg_num); if (unlikely((__pyx_v_num == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 384, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("draft.to_piece", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5draft_4to_piece(__pyx_self, ((int)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5draft_4to_piece(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_piece", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5draft_to_piece(__pyx_v_num, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("draft.to_piece", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":388
 *     return {'name': p.name, 'cost': p.cost}
 * 
 * cpdef str to_piece_cost(int num):             # <<<<<<<<<<<<<<
 *     return piece_list.at(num).name.decode()
 * 
 */

static PyObject *__pyx_pw_5draft_7to_piece_cost(PyObject *__pyx_self, PyObject *__pyx_arg_num); /*proto*/
static PyObject *__pyx_f_5draft_to_piece_cost(int __pyx_v_num, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<__pyx_t_6header_Piece> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("to_piece_cost", 0);

  /* "draft.pyx":389
 * 
 * cpdef str to_piece_cost(int num):
 *     return piece_list.at(num).name.decode()             # <<<<<<<<<<<<<<
 * 
 * cpdef int to_piece_no(str name):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_6Pieces_piece_list.at(__pyx_v_num);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 389, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_t_1->name, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyString_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 389, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "draft.pyx":388
 *     return {'name': p.name, 'cost': p.cost}
 * 
 * cpdef str to_piece_cost(int num):             # <<<<<<<<<<<<<<
 *     return piece_list.at(num).name.decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("draft.to_piece_cost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5draft_7to_piece_cost(PyObject *__pyx_self, PyObject *__pyx_arg_num); /*proto*/
static PyObject *__pyx_pw_5draft_7to_piece_cost(PyObject *__pyx_self, PyObject *__pyx_arg_num) {
  int __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_piece_cost (wrapper)", 0);
  assert(__pyx_arg_num); {
    __pyx_v_num = __Pyx_PyInt_As_int(__pyx_arg_num); if (unlikely((__pyx_v_num == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 388, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("draft.to_piece_cost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5draft_6to_piece_cost(__pyx_self, ((int)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5draft_6to_piece_cost(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_piece_cost", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5draft_to_piece_cost(__pyx_v_num, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("draft.to_piece_cost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "draft.pyx":391
 *     return piece_list.at(num).name.decode()
 * 
 * cpdef int to_piece_no(str name):             # <<<<<<<<<<<<<<
 *     cdef bname = name.encode()
 *     if piece_index.count(bname) == 0:
 */

static PyObject *__pyx_pw_5draft_9to_piece_no(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static int __pyx_f_5draft_to_piece_no(PyObject *__pyx_v_name, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_bname = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("to_piece_no", 0);

  /* "draft.pyx":392
 * 
 * cpdef int to_piece_no(str name):
 *     cdef bname = name.encode()             # <<<<<<<<<<<<<<
 *     if piece_index.count(bname) == 0:
 *         return 0
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_bname = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "draft.pyx":393
 * cpdef int to_piece_no(str name):
 *     cdef bname = name.encode()
 *     if piece_index.count(bname) == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     return piece_index[bname]
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_bname); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_v_6Pieces_piece_index.count(__pyx_t_4) == 0) != 0);
  if (__pyx_t_5) {

    /* "draft.pyx":394
 *     cdef bname = name.encode()
 *     if piece_index.count(bname) == 0:
 *         return 0             # <<<<<<<<<<<<<<
 *     return piece_index[bname]
 * #endregion
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "draft.pyx":393
 * cpdef int to_piece_no(str name):
 *     cdef bname = name.encode()
 *     if piece_index.count(bname) == 0:             # <<<<<<<<<<<<<<
 *         return 0
 *     return piece_index[bname]
 */
  }

  /* "draft.pyx":395
 *     if piece_index.count(bname) == 0:
 *         return 0
 *     return piece_index[bname]             # <<<<<<<<<<<<<<
 * #endregion
 * 
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_bname); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 395, __pyx_L1_error)
  __pyx_r = (__pyx_v_6Pieces_piece_index[__pyx_t_4]);
  goto __pyx_L0;

  /* "draft.pyx":391
 *     return piece_list.at(num).name.decode()
 * 
 * cpdef int to_piece_no(str name):             # <<<<<<<<<<<<<<
 *     cdef bname = name.encode()
 *     if piece_index.count(bname) == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("draft.to_piece_no", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bname);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5draft_9to_piece_no(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_5draft_9to_piece_no(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_piece_no (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyString_Type), 1, "name", 1))) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_r = __pyx_pf_5draft_8to_piece_no(__pyx_self, ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5draft_8to_piece_no(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_piece_no", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_5draft_to_piece_no(__pyx_v_name, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("draft.to_piece_no", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":80
 * #### INLINE FUNCTIONS ####
 * 
 * cdef inline int iabs(int x):             # <<<<<<<<<<<<<<
 *     return -x if x < 0 else x
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_iabs(int __pyx_v_x) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("iabs", 0);

  /* "header.pxd":81
 * 
 * cdef inline int iabs(int x):
 *     return -x if x < 0 else x             # <<<<<<<<<<<<<<
 * 
 * cdef inline int imin(int x, int y):
 */
  if (((__pyx_v_x < 0) != 0)) {
    __pyx_t_1 = (-__pyx_v_x);
  } else {
    __pyx_t_1 = __pyx_v_x;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "header.pxd":80
 * #### INLINE FUNCTIONS ####
 * 
 * cdef inline int iabs(int x):             # <<<<<<<<<<<<<<
 *     return -x if x < 0 else x
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":83
 *     return -x if x < 0 else x
 * 
 * cdef inline int imin(int x, int y):             # <<<<<<<<<<<<<<
 *     return x if x < y else y
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_imin(int __pyx_v_x, int __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("imin", 0);

  /* "header.pxd":84
 * 
 * cdef inline int imin(int x, int y):
 *     return x if x < y else y             # <<<<<<<<<<<<<<
 * 
 * cdef inline int imax(int x, int y):
 */
  if (((__pyx_v_x < __pyx_v_y) != 0)) {
    __pyx_t_1 = __pyx_v_x;
  } else {
    __pyx_t_1 = __pyx_v_y;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "header.pxd":83
 *     return -x if x < 0 else x
 * 
 * cdef inline int imin(int x, int y):             # <<<<<<<<<<<<<<
 *     return x if x < y else y
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":86
 *     return x if x < y else y
 * 
 * cdef inline int imax(int x, int y):             # <<<<<<<<<<<<<<
 *     return x if x > y else y
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_imax(int __pyx_v_x, int __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("imax", 0);

  /* "header.pxd":87
 * 
 * cdef inline int imax(int x, int y):
 *     return x if x > y else y             # <<<<<<<<<<<<<<
 * 
 * cdef inline int unit(int x):
 */
  if (((__pyx_v_x > __pyx_v_y) != 0)) {
    __pyx_t_1 = __pyx_v_x;
  } else {
    __pyx_t_1 = __pyx_v_y;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "header.pxd":86
 *     return x if x < y else y
 * 
 * cdef inline int imax(int x, int y):             # <<<<<<<<<<<<<<
 *     return x if x > y else y
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":89
 *     return x if x > y else y
 * 
 * cdef inline int unit(int x):             # <<<<<<<<<<<<<<
 *     return 1 if x > 0 else (-1 if x < 0 else 0)
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_unit(int __pyx_v_x) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("unit", 0);

  /* "header.pxd":90
 * 
 * cdef inline int unit(int x):
 *     return 1 if x > 0 else (-1 if x < 0 else 0)             # <<<<<<<<<<<<<<
 * 
 * cdef inline int enemy_player(int player_no):
 */
  if (((__pyx_v_x > 0) != 0)) {
    __pyx_t_1 = 1;
  } else {
    if (((__pyx_v_x < 0) != 0)) {
      __pyx_t_2 = -1;
    } else {
      __pyx_t_2 = 0;
    }
    __pyx_t_1 = __pyx_t_2;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "header.pxd":89
 *     return x if x > y else y
 * 
 * cdef inline int unit(int x):             # <<<<<<<<<<<<<<
 *     return 1 if x > 0 else (-1 if x < 0 else 0)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":92
 *     return 1 if x > 0 else (-1 if x < 0 else 0)
 * 
 * cdef inline int enemy_player(int player_no):             # <<<<<<<<<<<<<<
 *     return 3 - player_no
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_enemy_player(int __pyx_v_player_no) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enemy_player", 0);

  /* "header.pxd":93
 * 
 * cdef inline int enemy_player(int player_no):
 *     return 3 - player_no             # <<<<<<<<<<<<<<
 * 
 * cdef inline int on_the_board(int x, int y):
 */
  __pyx_r = (3 - __pyx_v_player_no);
  goto __pyx_L0;

  /* "header.pxd":92
 *     return 1 if x > 0 else (-1 if x < 0 else 0)
 * 
 * cdef inline int enemy_player(int player_no):             # <<<<<<<<<<<<<<
 *     return 3 - player_no
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":95
 *     return 3 - player_no
 * 
 * cdef inline int on_the_board(int x, int y):             # <<<<<<<<<<<<<<
 *     return x >= 0 and x < BOARD_SIZE and y >= 0 and y < BOARD_SIZE
 * 
 */

static CYTHON_INLINE int __pyx_f_6header_on_the_board(int __pyx_v_x, int __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("on_the_board", 0);

  /* "header.pxd":96
 * 
 * cdef inline int on_the_board(int x, int y):
 *     return x >= 0 and x < BOARD_SIZE and y >= 0 and y < BOARD_SIZE             # <<<<<<<<<<<<<<
 * 
 * # from Board.pxd
 */
  __pyx_t_2 = (__pyx_v_x >= 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_x < __pyx_e_6header_BOARD_SIZE);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_y >= 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_y < __pyx_e_6header_BOARD_SIZE);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "header.pxd":95
 *     return 3 - player_no
 * 
 * cdef inline int on_the_board(int x, int y):             # <<<<<<<<<<<<<<
 *     return x >= 0 and x < BOARD_SIZE and y >= 0 and y < BOARD_SIZE
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "header.pxd":99
 * 
 * # from Board.pxd
 * cdef inline void deepcopy_int2d(int2d& to_mat, int2d& from_mat):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     if to_mat.size() != from_mat.size():
 */

static CYTHON_INLINE void __pyx_f_6header_deepcopy_int2d(__pyx_t_6header_int2d &__pyx_v_to_mat, __pyx_t_6header_int2d &__pyx_v_from_mat) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("deepcopy_int2d", 0);

  /* "header.pxd":101
 * cdef inline void deepcopy_int2d(int2d& to_mat, int2d& from_mat):
 *     cdef int i
 *     if to_mat.size() != from_mat.size():             # <<<<<<<<<<<<<<
 *         to_mat.resize(from_mat.size())
 *     for i in range(from_mat.size()):
 */
  __pyx_t_1 = ((__pyx_v_to_mat.size() != __pyx_v_from_mat.size()) != 0);
  if (__pyx_t_1) {

    /* "header.pxd":102
 *     cdef int i
 *     if to_mat.size() != from_mat.size():
 *         to_mat.resize(from_mat.size())             # <<<<<<<<<<<<<<
 *     for i in range(from_mat.size()):
 *         to_mat[i] = from_mat[i]
 */
    try {
      __pyx_v_to_mat.resize(__pyx_v_from_mat.size());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 102, __pyx_L1_error)
    }

    /* "header.pxd":101
 * cdef inline void deepcopy_int2d(int2d& to_mat, int2d& from_mat):
 *     cdef int i
 *     if to_mat.size() != from_mat.size():             # <<<<<<<<<<<<<<
 *         to_mat.resize(from_mat.size())
 *     for i in range(from_mat.size()):
 */
  }

  /* "header.pxd":103
 *     if to_mat.size() != from_mat.size():
 *         to_mat.resize(from_mat.size())
 *     for i in range(from_mat.size()):             # <<<<<<<<<<<<<<
 *         to_mat[i] = from_mat[i]
 * 
 */
  __pyx_t_2 = __pyx_v_from_mat.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "header.pxd":104
 *         to_mat.resize(from_mat.size())
 *     for i in range(from_mat.size()):
 *         to_mat[i] = from_mat[i]             # <<<<<<<<<<<<<<
 * 
 * cdef inline void deepcopy_board(Board& to_board, Board& from_board):
 */
    (__pyx_v_to_mat[__pyx_v_i]) = (__pyx_v_from_mat[__pyx_v_i]);
  }

  /* "header.pxd":99
 * 
 * # from Board.pxd
 * cdef inline void deepcopy_int2d(int2d& to_mat, int2d& from_mat):             # <<<<<<<<<<<<<<
 *     cdef int i
 *     if to_mat.size() != from_mat.size():
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("header.deepcopy_int2d", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "header.pxd":106
 *         to_mat[i] = from_mat[i]
 * 
 * cdef inline void deepcopy_board(Board& to_board, Board& from_board):             # <<<<<<<<<<<<<<
 *     to_board.current = from_board.current
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)
 */

static CYTHON_INLINE void __pyx_f_6header_deepcopy_board(__pyx_t_6header_Board &__pyx_v_to_board, __pyx_t_6header_Board &__pyx_v_from_board) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("deepcopy_board", 0);

  /* "header.pxd":107
 * 
 * cdef inline void deepcopy_board(Board& to_board, Board& from_board):
 *     to_board.current = from_board.current             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)
 *     deepcopy_int2d(to_board.ownerships, from_board.ownerships)
 */
  __pyx_t_1 = __pyx_v_from_board.current;
  __pyx_v_to_board.current = __pyx_t_1;

  /* "header.pxd":108
 * cdef inline void deepcopy_board(Board& to_board, Board& from_board):
 *     to_board.current = from_board.current
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.ownerships, from_board.ownerships)
 *     deepcopy_int2d(to_board.costs, from_board.costs)
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.pieces, __pyx_v_from_board.pieces);

  /* "header.pxd":109
 *     to_board.current = from_board.current
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)
 *     deepcopy_int2d(to_board.ownerships, from_board.ownerships)             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.costs, from_board.costs)
 *     deepcopy_int2d(to_board.frozen, from_board.frozen)
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.ownerships, __pyx_v_from_board.ownerships);

  /* "header.pxd":110
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)
 *     deepcopy_int2d(to_board.ownerships, from_board.ownerships)
 *     deepcopy_int2d(to_board.costs, from_board.costs)             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.frozen, from_board.frozen)
 *     deepcopy_int2d(to_board.poison, from_board.poison)
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.costs, __pyx_v_from_board.costs);

  /* "header.pxd":111
 *     deepcopy_int2d(to_board.ownerships, from_board.ownerships)
 *     deepcopy_int2d(to_board.costs, from_board.costs)
 *     deepcopy_int2d(to_board.frozen, from_board.frozen)             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.poison, from_board.poison)
 *     deepcopy_int2d(to_board.thunder, from_board.thunder)
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.frozen, __pyx_v_from_board.frozen);

  /* "header.pxd":112
 *     deepcopy_int2d(to_board.costs, from_board.costs)
 *     deepcopy_int2d(to_board.frozen, from_board.frozen)
 *     deepcopy_int2d(to_board.poison, from_board.poison)             # <<<<<<<<<<<<<<
 *     deepcopy_int2d(to_board.thunder, from_board.thunder)
 *     to_board.moral[1], to_board.moral[2] = from_board.moral[1], from_board.moral[2]
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.poison, __pyx_v_from_board.poison);

  /* "header.pxd":113
 *     deepcopy_int2d(to_board.frozen, from_board.frozen)
 *     deepcopy_int2d(to_board.poison, from_board.poison)
 *     deepcopy_int2d(to_board.thunder, from_board.thunder)             # <<<<<<<<<<<<<<
 *     to_board.moral[1], to_board.moral[2] = from_board.moral[1], from_board.moral[2]
 *     to_board.king[1], to_board.king[2] = from_board.king[1], from_board.king[2]
 */
  __pyx_f_6header_deepcopy_int2d(__pyx_v_to_board.thunder, __pyx_v_from_board.thunder);

  /* "header.pxd":114
 *     deepcopy_int2d(to_board.poison, from_board.poison)
 *     deepcopy_int2d(to_board.thunder, from_board.thunder)
 *     to_board.moral[1], to_board.moral[2] = from_board.moral[1], from_board.moral[2]             # <<<<<<<<<<<<<<
 *     to_board.king[1], to_board.king[2] = from_board.king[1], from_board.king[2]
 * 
 */
  __pyx_t_1 = (__pyx_v_from_board.moral[1]);
  __pyx_t_2 = (__pyx_v_from_board.moral[2]);
  (__pyx_v_to_board.moral[1]) = __pyx_t_1;
  (__pyx_v_to_board.moral[2]) = __pyx_t_2;

  /* "header.pxd":115
 *     deepcopy_int2d(to_board.thunder, from_board.thunder)
 *     to_board.moral[1], to_board.moral[2] = from_board.moral[1], from_board.moral[2]
 *     to_board.king[1], to_board.king[2] = from_board.king[1], from_board.king[2]             # <<<<<<<<<<<<<<
 * 
 * cdef inline void reset_board(Board& board):
 */
  __pyx_t_2 = (__pyx_v_from_board.king[1]);
  __pyx_t_1 = (__pyx_v_from_board.king[2]);
  (__pyx_v_to_board.king[1]) = __pyx_t_2;
  (__pyx_v_to_board.king[2]) = __pyx_t_1;

  /* "header.pxd":106
 *         to_mat[i] = from_mat[i]
 * 
 * cdef inline void deepcopy_board(Board& to_board, Board& from_board):             # <<<<<<<<<<<<<<
 *     to_board.current = from_board.current
 *     deepcopy_int2d(to_board.pieces, from_board.pieces)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "header.pxd":117
 *     to_board.king[1], to_board.king[2] = from_board.king[1], from_board.king[2]
 * 
 * cdef inline void reset_board(Board& board):             # <<<<<<<<<<<<<<
 *     board.current = 1
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */

static CYTHON_INLINE void __pyx_f_6header_reset_board(__pyx_t_6header_Board &__pyx_v_board) {
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  __pyx_t_6header_int2d __pyx_t_2;
  __Pyx_RefNannySetupContext("reset_board", 0);

  /* "header.pxd":118
 * 
 * cdef inline void reset_board(Board& board):
 *     board.current = 1             # <<<<<<<<<<<<<<
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.ownerships = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */
  __pyx_v_board.current = 1;

  /* "header.pxd":119
 * cdef inline void reset_board(Board& board):
 *     board.current = 1
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 *     board.ownerships = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.costs = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 119, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 119, __pyx_L1_error)
  }
  __pyx_v_board.pieces = __pyx_t_2;

  /* "header.pxd":120
 *     board.current = 1
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.ownerships = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 *     board.costs = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.frozen = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 120, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 120, __pyx_L1_error)
  }
  __pyx_v_board.ownerships = __pyx_t_2;

  /* "header.pxd":121
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.ownerships = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.costs = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 *     board.frozen = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.poison = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 121, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 121, __pyx_L1_error)
  }
  __pyx_v_board.costs = __pyx_t_2;

  /* "header.pxd":122
 *     board.ownerships = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.costs = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.frozen = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 *     board.poison = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.thunder = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 122, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 122, __pyx_L1_error)
  }
  __pyx_v_board.frozen = __pyx_t_2;

  /* "header.pxd":123
 *     board.costs = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.frozen = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.poison = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 *     board.thunder = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 * 
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 123, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 123, __pyx_L1_error)
  }
  __pyx_v_board.poison = __pyx_t_2;

  /* "header.pxd":124
 *     board.frozen = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.poison = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 *     board.thunder = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = std::vector<int> (__pyx_e_6header_BOARD_SIZE, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 124, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_6header_int2d(__pyx_e_6header_BOARD_SIZE, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 124, __pyx_L1_error)
  }
  __pyx_v_board.thunder = __pyx_t_2;

  /* "header.pxd":117
 *     to_board.king[1], to_board.king[2] = from_board.king[1], from_board.king[2]
 * 
 * cdef inline void reset_board(Board& board):             # <<<<<<<<<<<<<<
 *     board.current = 1
 *     board.pieces = int2d(BOARD_SIZE, vector[int](BOARD_SIZE, 0))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("header.reset_board", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "cyrand.pxd":8
 * cpdef srand()
 * 
 * cdef inline float random():             # <<<<<<<<<<<<<<
 *     return <float> rand() / <float> (RAND_MAX + 1)
 * 
 */

static CYTHON_INLINE float __pyx_f_6cyrand_random(void) {
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  __Pyx_RefNannySetupContext("random", 0);

  /* "cyrand.pxd":9
 * 
 * cdef inline float random():
 *     return <float> rand() / <float> (RAND_MAX + 1)             # <<<<<<<<<<<<<<
 * 
 * cdef int randint(int)
 */
  __pyx_t_1 = ((float)rand());
  __pyx_t_2 = ((float)(RAND_MAX + 1));
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 9, __pyx_L1_error)
  }
  __pyx_r = (__pyx_t_1 / __pyx_t_2);
  goto __pyx_L0;

  /* "cyrand.pxd":8
 * cpdef srand()
 * 
 * cdef inline float random():             # <<<<<<<<<<<<<<
 *     return <float> rand() / <float> (RAND_MAX + 1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyrand.random", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyrand.pxd":13
 * cdef int randint(int)
 * 
 * cdef inline int randi(int irange):  # faster version for randint, works for range > 0, fragile             # <<<<<<<<<<<<<<
 *     return rand() % irange
 * 
 */

static CYTHON_INLINE int __pyx_f_6cyrand_randi(int __pyx_v_irange) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("randi", 0);

  /* "cyrand.pxd":14
 * 
 * cdef inline int randi(int irange):  # faster version for randint, works for range > 0, fragile
 *     return rand() % irange             # <<<<<<<<<<<<<<
 * 
 * cdef inline float randf(float frange):
 */
  __pyx_t_1 = rand();
  if (unlikely(__pyx_v_irange == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(2, 14, __pyx_L1_error)
  }
  __pyx_r = __Pyx_mod_int(__pyx_t_1, __pyx_v_irange);
  goto __pyx_L0;

  /* "cyrand.pxd":13
 * cdef int randint(int)
 * 
 * cdef inline int randi(int irange):  # faster version for randint, works for range > 0, fragile             # <<<<<<<<<<<<<<
 *     return rand() % irange
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyrand.randi", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cyrand.pxd":16
 *     return rand() % irange
 * 
 * cdef inline float randf(float frange):             # <<<<<<<<<<<<<<
 *     return <float> rand() / <float> (RAND_MAX + 1) * frange
 */

static CYTHON_INLINE float __pyx_f_6cyrand_randf(float __pyx_v_frange) {
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  __Pyx_RefNannySetupContext("randf", 0);

  /* "cyrand.pxd":17
 * 
 * cdef inline float randf(float frange):
 *     return <float> rand() / <float> (RAND_MAX + 1) * frange             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = ((float)rand());
  __pyx_t_2 = ((float)(RAND_MAX + 1));
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 17, __pyx_L1_error)
  }
  __pyx_r = ((__pyx_t_1 / __pyx_t_2) * __pyx_v_frange);
  goto __pyx_L0;

  /* "cyrand.pxd":16
 *     return rand() % irange
 * 
 * cdef inline float randf(float frange):             # <<<<<<<<<<<<<<
 *     return <float> rand() / <float> (RAND_MAX + 1) * frange
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("cyrand.randf", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(3, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(3, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const std::vector<std::vector<int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_vector_to_py_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(3, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {"simulate", (PyCFunction)__pyx_pw_5draft_1simulate, METH_VARARGS|METH_KEYWORDS, 0},
  {"random_piece", (PyCFunction)__pyx_pw_5draft_3random_piece, METH_VARARGS|METH_KEYWORDS, 0},
  {"to_piece", (PyCFunction)__pyx_pw_5draft_5to_piece, METH_O, 0},
  {"to_piece_cost", (PyCFunction)__pyx_pw_5draft_7to_piece_cost, METH_O, 0},
  {"to_piece_no", (PyCFunction)__pyx_pw_5draft_9to_piece_no, METH_O, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "draft",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_s_100_completed, __pyx_k_100_completed, sizeof(__pyx_k_100_completed), 0, 0, 1, 0},
  {&__pyx_kp_s_Player_1_has_a_Win_of_1f_wins_d, __pyx_k_Player_1_has_a_Win_of_1f_wins_d, sizeof(__pyx_k_Player_1_has_a_Win_of_1f_wins_d), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_n_s_actno, __pyx_k_actno, sizeof(__pyx_k_actno), 0, 0, 1, 1},
  {&__pyx_n_s_be_champion, __pyx_k_be_champion, sizeof(__pyx_k_be_champion), 0, 0, 1, 1},
  {&__pyx_n_s_be_minion, __pyx_k_be_minion, sizeof(__pyx_k_be_minion), 0, 0, 1, 1},
  {&__pyx_n_s_cost, __pyx_k_cost, sizeof(__pyx_k_cost), 0, 0, 1, 1},
  {&__pyx_kp_s_d_completed, __pyx_k_d_completed, sizeof(__pyx_k_d_completed), 0, 0, 1, 0},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_s_moral_d_d, __pyx_k_moral_d_d, sizeof(__pyx_k_moral_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_number_of_games, __pyx_k_number_of_games, sizeof(__pyx_k_number_of_games), 0, 0, 1, 1},
  {&__pyx_n_s_player1_setup, __pyx_k_player1_setup, sizeof(__pyx_k_player1_setup), 0, 0, 1, 1},
  {&__pyx_n_s_player2_setup, __pyx_k_player2_setup, sizeof(__pyx_k_player2_setup), 0, 0, 1, 1},
  {&__pyx_n_s_pprint, __pyx_k_pprint, sizeof(__pyx_k_pprint), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_display, __pyx_k_to_display, sizeof(__pyx_k_to_display), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_with_frequency, __pyx_k_with_frequency, sizeof(__pyx_k_with_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_xfrom, __pyx_k_xfrom, sizeof(__pyx_k_xfrom), 0, 0, 1, 1},
  {&__pyx_n_s_xto, __pyx_k_xto, sizeof(__pyx_k_xto), 0, 0, 1, 1},
  {&__pyx_n_s_yfrom, __pyx_k_yfrom, sizeof(__pyx_k_yfrom), 0, 0, 1, 1},
  {&__pyx_n_s_yto, __pyx_k_yto, sizeof(__pyx_k_yto), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 30, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "draft.pyx":202
 *     cdef lstsz = piece_list.size()
 *     board.moral[1] = 0
 *     lines = player1_setup.split(';'); line_no = len(lines)             # <<<<<<<<<<<<<<
 *     setup = []
 *     for y in range(line_no):
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "draft.pyx":205
 *     setup = []
 *     for y in range(line_no):
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])             # <<<<<<<<<<<<<<
 *     for y in range(line_no):
 *         for x in range(<int> len(setup[y])):
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s__3); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "draft.pyx":220
 *                 board.moral[1] += piece_list[pno].cost
 *     board.moral[2] = 0
 *     lines = player2_setup.split(';'); line_no = len(lines)             # <<<<<<<<<<<<<<
 *     setup = []
 *     for y in range(line_no):
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "draft.pyx":223
 *     setup = []
 *     for y in range(line_no):
 *         setup.append(lines[line_no - 1 - y].split(',')[0:BOARD_SIZE])             # <<<<<<<<<<<<<<
 *     for y in range(line_no):
 *         for x in range(<int> len(setup[y])):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s__3); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_45 = PyInt_FromLong(45); if (unlikely(!__pyx_int_45)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initdraft(void); /*proto*/
PyMODINIT_FUNC initdraft(void)
#else
PyMODINIT_FUNC PyInit_draft(void); /*proto*/
PyMODINIT_FUNC PyInit_draft(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_draft(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("draft", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_draft) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "draft")) {
      if (unlikely(PyDict_SetItemString(modules, "draft", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_11PieceReader_Piece = __Pyx_ImportType("PieceReader", "Piece", sizeof(struct __pyx_obj_11PieceReader_Piece), 1); if (unlikely(!__pyx_ptype_11PieceReader_Piece)) __PYX_ERR(4, 8, __pyx_L1_error)
  __pyx_vtabptr_11PieceReader_Piece = (struct __pyx_vtabstruct_11PieceReader_Piece*)__Pyx_GetVtable(__pyx_ptype_11PieceReader_Piece->tp_dict); if (unlikely(!__pyx_vtabptr_11PieceReader_Piece)) __PYX_ERR(4, 8, __pyx_L1_error)
  __pyx_ptype_11PieceReader_PieceReader = __Pyx_ImportType("PieceReader", "PieceReader", sizeof(struct __pyx_obj_11PieceReader_PieceReader), 1); if (unlikely(!__pyx_ptype_11PieceReader_PieceReader)) __PYX_ERR(4, 18, __pyx_L1_error)
  __pyx_vtabptr_11PieceReader_PieceReader = (struct __pyx_vtabstruct_11PieceReader_PieceReader*)__Pyx_GetVtable(__pyx_ptype_11PieceReader_PieceReader->tp_dict); if (unlikely(!__pyx_vtabptr_11PieceReader_PieceReader)) __PYX_ERR(4, 18, __pyx_L1_error)
  /*--- Variable import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("Actions"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "actions", (void **)&__pyx_vp_7Actions_actions, "std::vector<__pyx_t_6header_Action> ") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_ImportModule("Pieces"); if (!__pyx_t_2) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_2, "piece_list", (void **)&__pyx_vp_6Pieces_piece_list, "std::vector<__pyx_t_6header_Piece> ") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_2, "piece_index", (void **)&__pyx_vp_6Pieces_piece_index, "std::map<std::string,int> ") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_2, "index_of_King", (void **)&__pyx_vp_6Pieces_index_of_King, "int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  /*--- Function import code ---*/
  __pyx_t_3 = __Pyx_ImportModule("cyrand"); if (!__pyx_t_3) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_3, "srand", (void (**)(void))&__pyx_f_6cyrand_srand, "PyObject *(int __pyx_skip_dispatch)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_ImportModule("Actions"); if (!__pyx_t_4) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_4, "can_target", (void (**)(void))&__pyx_f_7Actions_can_target, "int (__pyx_t_6header_Board &, int, int, int, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "draft.pyx":5
 * 
 * from header cimport *
 * from pprint import pprint             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_pprint);
  __Pyx_GIVEREF(__pyx_n_s_pprint);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_pprint);
  __pyx_t_6 = __Pyx_Import(__pyx_n_s_pprint, __pyx_t_5, -1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_6, __pyx_n_s_pprint); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pprint, __pyx_t_5) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "draft.pyx":15
 * 
 * # test
 * srand()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __pyx_f_6cyrand_srand(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "draft.pyx":1
 * # cython: python 3.5             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref, preincrement as inc, address as addr
 * 
 */
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_6) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init draft", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init draft");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* GetItemInt */
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetModuleGlobalName */
    static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* None */
      static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* None */
      static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* RaiseArgTupleInvalid */
      static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
      static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
      static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
      static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* decode_c_bytes */
      static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* None */
      static CYTHON_INLINE int __Pyx_mod_int(int a, int b) {
    int r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* GetVTable */
      static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
      static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
      static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CodeObjectCache */
      static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
      #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
      #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* Print */
      #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPy */
      static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* PrintOne */
      #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
      static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CheckBinaryVersion */
      static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
      #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
      #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* VoidPtrImport */
      #ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
      #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
      static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
